/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.ErrorDto;
import com.squidex.api.types.EventConsumerDto;
import com.squidex.api.types.EventConsumersDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class EventConsumersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventConsumersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventConsumersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getEventConsumersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/event-consumers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventConsumersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEventConsumersCall(_callback);

    }


    private ApiResponse<EventConsumersDto> getEventConsumersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEventConsumersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EventConsumersDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventConsumersAsync(final ApiCallback<EventConsumersDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventConsumersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EventConsumersDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIeventConsumersGetEventConsumersRequest {

        private APIeventConsumersGetEventConsumersRequest() {
        }

        /**
         * Build call for getEventConsumers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumers returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventConsumersCall(_callback);
        }

        /**
         * Execute getEventConsumers request
         * @return EventConsumersDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumers returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public EventConsumersDto execute() throws ApiException {
            ApiResponse<EventConsumersDto> localVarResp = getEventConsumersWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getEventConsumers request with HTTP info returned
         * @return ApiResponse&lt;EventConsumersDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumers returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventConsumersDto> executeWithHttpInfo() throws ApiException {
            return getEventConsumersWithHttpInfo();
        }

        /**
         * Execute getEventConsumers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumers returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventConsumersDto> _callback) throws ApiException {
            return getEventConsumersAsync(_callback);
        }
    }

    /**
     * Get event consumers.
     * 
     * @return APIeventConsumersGetEventConsumersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event consumers returned. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIeventConsumersGetEventConsumersRequest getEventConsumers() {
        return new APIeventConsumersGetEventConsumersRequest();
    }
    private okhttp3.Call resetEventConsumerCall(String consumerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/event-consumers/{consumerName}/reset"
            .replace("{" + "consumerName" + "}", localVarApiClient.escapeString(consumerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetEventConsumerValidateBeforeCall(String consumerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerName' is set
        if (consumerName == null) {
            throw new ApiException("Missing the required parameter 'consumerName' when calling (Async)");
        }

        return resetEventConsumerCall(consumerName, _callback);

    }


    private ApiResponse<EventConsumerDto> resetEventConsumerWithHttpInfo(String consumerName) throws ApiException {
        okhttp3.Call localVarCall = resetEventConsumerValidateBeforeCall(consumerName, null);
        Type localVarReturnType = new TypeToken<EventConsumerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetEventConsumerAsync(String consumerName, final ApiCallback<EventConsumerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetEventConsumerValidateBeforeCall(consumerName, _callback);
        Type localVarReturnType = new TypeToken<EventConsumerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIeventConsumersResetEventConsumerRequest {
        private final String consumerName;

        private APIeventConsumersResetEventConsumerRequest(String consumerName) {
            this.consumerName = consumerName;
        }

        /**
         * Build call for resetEventConsumer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer resetted asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetEventConsumerCall(consumerName, _callback);
        }

        /**
         * Execute resetEventConsumer request
         * @return EventConsumerDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer resetted asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public EventConsumerDto execute() throws ApiException {
            ApiResponse<EventConsumerDto> localVarResp = resetEventConsumerWithHttpInfo(consumerName);
            return localVarResp.getData();
        }

        /**
         * Execute resetEventConsumer request with HTTP info returned
         * @return ApiResponse&lt;EventConsumerDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer resetted asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventConsumerDto> executeWithHttpInfo() throws ApiException {
            return resetEventConsumerWithHttpInfo(consumerName);
        }

        /**
         * Execute resetEventConsumer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer resetted asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventConsumerDto> _callback) throws ApiException {
            return resetEventConsumerAsync(consumerName, _callback);
        }
    }

    /**
     * Reset an event consumer.
     * 
     * @param consumerName The name of the event consumer. (required)
     * @return APIeventConsumersResetEventConsumerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event consumer resetted asynchronously. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIeventConsumersResetEventConsumerRequest resetEventConsumer(String consumerName) {
        return new APIeventConsumersResetEventConsumerRequest(consumerName);
    }
    private okhttp3.Call startEventConsumerCall(String consumerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/event-consumers/{consumerName}/start"
            .replace("{" + "consumerName" + "}", localVarApiClient.escapeString(consumerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startEventConsumerValidateBeforeCall(String consumerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerName' is set
        if (consumerName == null) {
            throw new ApiException("Missing the required parameter 'consumerName' when calling (Async)");
        }

        return startEventConsumerCall(consumerName, _callback);

    }


    private ApiResponse<EventConsumerDto> startEventConsumerWithHttpInfo(String consumerName) throws ApiException {
        okhttp3.Call localVarCall = startEventConsumerValidateBeforeCall(consumerName, null);
        Type localVarReturnType = new TypeToken<EventConsumerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startEventConsumerAsync(String consumerName, final ApiCallback<EventConsumerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = startEventConsumerValidateBeforeCall(consumerName, _callback);
        Type localVarReturnType = new TypeToken<EventConsumerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIeventConsumersStartEventConsumerRequest {
        private final String consumerName;

        private APIeventConsumersStartEventConsumerRequest(String consumerName) {
            this.consumerName = consumerName;
        }

        /**
         * Build call for startEventConsumer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer started asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startEventConsumerCall(consumerName, _callback);
        }

        /**
         * Execute startEventConsumer request
         * @return EventConsumerDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer started asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public EventConsumerDto execute() throws ApiException {
            ApiResponse<EventConsumerDto> localVarResp = startEventConsumerWithHttpInfo(consumerName);
            return localVarResp.getData();
        }

        /**
         * Execute startEventConsumer request with HTTP info returned
         * @return ApiResponse&lt;EventConsumerDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer started asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventConsumerDto> executeWithHttpInfo() throws ApiException {
            return startEventConsumerWithHttpInfo(consumerName);
        }

        /**
         * Execute startEventConsumer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer started asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventConsumerDto> _callback) throws ApiException {
            return startEventConsumerAsync(consumerName, _callback);
        }
    }

    /**
     * Start an event consumer.
     * 
     * @param consumerName The name of the event consumer. (required)
     * @return APIeventConsumersStartEventConsumerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event consumer started asynchronously. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIeventConsumersStartEventConsumerRequest startEventConsumer(String consumerName) {
        return new APIeventConsumersStartEventConsumerRequest(consumerName);
    }
    private okhttp3.Call stopEventConsumerCall(String consumerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/event-consumers/{consumerName}/stop"
            .replace("{" + "consumerName" + "}", localVarApiClient.escapeString(consumerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopEventConsumerValidateBeforeCall(String consumerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerName' is set
        if (consumerName == null) {
            throw new ApiException("Missing the required parameter 'consumerName' when calling (Async)");
        }

        return stopEventConsumerCall(consumerName, _callback);

    }


    private ApiResponse<EventConsumerDto> stopEventConsumerWithHttpInfo(String consumerName) throws ApiException {
        okhttp3.Call localVarCall = stopEventConsumerValidateBeforeCall(consumerName, null);
        Type localVarReturnType = new TypeToken<EventConsumerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call stopEventConsumerAsync(String consumerName, final ApiCallback<EventConsumerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopEventConsumerValidateBeforeCall(consumerName, _callback);
        Type localVarReturnType = new TypeToken<EventConsumerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIeventConsumersStopEventConsumerRequest {
        private final String consumerName;

        private APIeventConsumersStopEventConsumerRequest(String consumerName) {
            this.consumerName = consumerName;
        }

        /**
         * Build call for stopEventConsumer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer stopped asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stopEventConsumerCall(consumerName, _callback);
        }

        /**
         * Execute stopEventConsumer request
         * @return EventConsumerDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer stopped asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public EventConsumerDto execute() throws ApiException {
            ApiResponse<EventConsumerDto> localVarResp = stopEventConsumerWithHttpInfo(consumerName);
            return localVarResp.getData();
        }

        /**
         * Execute stopEventConsumer request with HTTP info returned
         * @return ApiResponse&lt;EventConsumerDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer stopped asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventConsumerDto> executeWithHttpInfo() throws ApiException {
            return stopEventConsumerWithHttpInfo(consumerName);
        }

        /**
         * Execute stopEventConsumer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event consumer stopped asynchronously. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventConsumerDto> _callback) throws ApiException {
            return stopEventConsumerAsync(consumerName, _callback);
        }
    }

    /**
     * Stop an event consumer.
     * 
     * @param consumerName The name of the event consumer. (required)
     * @return APIeventConsumersStopEventConsumerRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event consumer stopped asynchronously. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event consumer not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIeventConsumersStopEventConsumerRequest stopEventConsumer(String consumerName) {
        return new APIeventConsumersStopEventConsumerRequest(consumerName);
    }
}
