/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.CreateUserDto;
import com.squidex.api.types.ErrorDto;
import com.squidex.api.types.UpdateUserDto;
import com.squidex.api.types.UserDto;
import com.squidex.api.types.UsersDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class UserManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteUserCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-management/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteUserCall(id, _callback);

    }


    private ApiResponse<Void> deleteUserWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUserAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIuserManagementDeleteUserRequest {
        private final String id;

        private APIuserManagementDeleteUserRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserCall(id, _callback);
        }

        /**
         * Execute deleteUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUserWithHttpInfo(id);
        }

        /**
         * Execute deleteUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUserWithHttpInfo(id);
        }

        /**
         * Execute deleteUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUserAsync(id, _callback);
        }
    }

    /**
     * Delete a User.
     * 
     * @param id The ID of the user to delete. (required)
     * @return APIuserManagementDeleteUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIuserManagementDeleteUserRequest deleteUser(String id) {
        return new APIuserManagementDeleteUserRequest(id);
    }
    private okhttp3.Call getUserCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-management/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getUserCall(id, _callback);

    }


    private ApiResponse<UserDto> getUserWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserAsync(String id, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuserManagementGetUserRequest {
        private final String id;

        private APIuserManagementGetUserRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserCall(id, _callback);
        }

        /**
         * Execute getUser request
         * @return UserDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UserDto execute() throws ApiException {
            ApiResponse<UserDto> localVarResp = getUserWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getUser request with HTTP info returned
         * @return ApiResponse&lt;UserDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserDto> executeWithHttpInfo() throws ApiException {
            return getUserWithHttpInfo(id);
        }

        /**
         * Execute getUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserDto> _callback) throws ApiException {
            return getUserAsync(id, _callback);
        }
    }

    /**
     * Get a user by ID.
     * 
     * @param id The ID of the user. (required)
     * @return APIuserManagementGetUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIuserManagementGetUserRequest getUser(String id) {
        return new APIuserManagementGetUserRequest(id);
    }
    private okhttp3.Call getUsersCall(String query, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-management";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(String query, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return getUsersCall(query, skip, take, _callback);

    }


    private ApiResponse<UsersDto> getUsersWithHttpInfo(String query, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(query, skip, take, null);
        Type localVarReturnType = new TypeToken<UsersDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUsersAsync(String query, Integer skip, Integer take, final ApiCallback<UsersDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(query, skip, take, _callback);
        Type localVarReturnType = new TypeToken<UsersDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuserManagementGetUsersRequest {
        private String query;
        private Integer skip;
        private Integer take;

        private APIuserManagementGetUsersRequest() {
        }

        /**
         * Set query
         * @param query Optional query to search by email address or username. (optional)
         * @return APIuserManagementGetUsersRequest
         */
        public APIuserManagementGetUsersRequest query(String query) {
            this.query = query;
            return this;
        }

        /**
         * Set skip
         * @param skip The number of users to skip. (optional, default to 0)
         * @return APIuserManagementGetUsersRequest
         */
        public APIuserManagementGetUsersRequest skip(Integer skip) {
            this.skip = skip;
            return this;
        }

        /**
         * Set take
         * @param take The number of users to return. (optional, default to 10)
         * @return APIuserManagementGetUsersRequest
         */
        public APIuserManagementGetUsersRequest take(Integer take) {
            this.take = take;
            return this;
        }

        /**
         * Build call for getUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Users returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUsersCall(query, skip, take, _callback);
        }

        /**
         * Execute getUsers request
         * @return UsersDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Users returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UsersDto execute() throws ApiException {
            ApiResponse<UsersDto> localVarResp = getUsersWithHttpInfo(query, skip, take);
            return localVarResp.getData();
        }

        /**
         * Execute getUsers request with HTTP info returned
         * @return ApiResponse&lt;UsersDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Users returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersDto> executeWithHttpInfo() throws ApiException {
            return getUsersWithHttpInfo(query, skip, take);
        }

        /**
         * Execute getUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Users returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersDto> _callback) throws ApiException {
            return getUsersAsync(query, skip, take, _callback);
        }
    }

    /**
     * Get users by query.
     * 
     * @return APIuserManagementGetUsersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users returned. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIuserManagementGetUsersRequest getUsers() {
        return new APIuserManagementGetUsersRequest();
    }
    private okhttp3.Call lockUserCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-management/{id}/lock"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockUserValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return lockUserCall(id, _callback);

    }


    private ApiResponse<UserDto> lockUserWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = lockUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lockUserAsync(String id, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuserManagementLockUserRequest {
        private final String id;

        private APIuserManagementLockUserRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for lockUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User locked. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lockUserCall(id, _callback);
        }

        /**
         * Execute lockUser request
         * @return UserDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User locked. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UserDto execute() throws ApiException {
            ApiResponse<UserDto> localVarResp = lockUserWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute lockUser request with HTTP info returned
         * @return ApiResponse&lt;UserDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User locked. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserDto> executeWithHttpInfo() throws ApiException {
            return lockUserWithHttpInfo(id);
        }

        /**
         * Execute lockUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User locked. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserDto> _callback) throws ApiException {
            return lockUserAsync(id, _callback);
        }
    }

    /**
     * Lock a user.
     * 
     * @param id The ID of the user to lock. (required)
     * @return APIuserManagementLockUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User locked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIuserManagementLockUserRequest lockUser(String id) {
        return new APIuserManagementLockUserRequest(id);
    }
    private okhttp3.Call postUserCall(CreateUserDto createUserDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserDto;

        // create path and map variables
        String localVarPath = "/api/user-management";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUserValidateBeforeCall(CreateUserDto createUserDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserDto' is set
        if (createUserDto == null) {
            throw new ApiException("Missing the required parameter 'createUserDto' when calling (Async)");
        }

        return postUserCall(createUserDto, _callback);

    }


    private ApiResponse<UserDto> postUserWithHttpInfo(CreateUserDto createUserDto) throws ApiException {
        okhttp3.Call localVarCall = postUserValidateBeforeCall(createUserDto, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postUserAsync(CreateUserDto createUserDto, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUserValidateBeforeCall(createUserDto, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuserManagementPostUserRequest {
        private final CreateUserDto createUserDto;

        private APIuserManagementPostUserRequest(CreateUserDto createUserDto) {
            this.createUserDto = createUserDto;
        }

        /**
         * Build call for postUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postUserCall(createUserDto, _callback);
        }

        /**
         * Execute postUser request
         * @return UserDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UserDto execute() throws ApiException {
            ApiResponse<UserDto> localVarResp = postUserWithHttpInfo(createUserDto);
            return localVarResp.getData();
        }

        /**
         * Execute postUser request with HTTP info returned
         * @return ApiResponse&lt;UserDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserDto> executeWithHttpInfo() throws ApiException {
            return postUserWithHttpInfo(createUserDto);
        }

        /**
         * Execute postUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> User created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserDto> _callback) throws ApiException {
            return postUserAsync(createUserDto, _callback);
        }
    }

    /**
     * Create a new user.
     * 
     * @param createUserDto The user object that needs to be added. (required)
     * @return APIuserManagementPostUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIuserManagementPostUserRequest postUser(CreateUserDto createUserDto) {
        return new APIuserManagementPostUserRequest(createUserDto);
    }
    private okhttp3.Call putUserCall(String id, UpdateUserDto updateUserDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserDto;

        // create path and map variables
        String localVarPath = "/api/user-management/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putUserValidateBeforeCall(String id, UpdateUserDto updateUserDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'updateUserDto' is set
        if (updateUserDto == null) {
            throw new ApiException("Missing the required parameter 'updateUserDto' when calling (Async)");
        }

        return putUserCall(id, updateUserDto, _callback);

    }


    private ApiResponse<UserDto> putUserWithHttpInfo(String id, UpdateUserDto updateUserDto) throws ApiException {
        okhttp3.Call localVarCall = putUserValidateBeforeCall(id, updateUserDto, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putUserAsync(String id, UpdateUserDto updateUserDto, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putUserValidateBeforeCall(id, updateUserDto, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuserManagementPutUserRequest {
        private final String id;
        private final UpdateUserDto updateUserDto;

        private APIuserManagementPutUserRequest(String id, UpdateUserDto updateUserDto) {
            this.id = id;
            this.updateUserDto = updateUserDto;
        }

        /**
         * Build call for putUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putUserCall(id, updateUserDto, _callback);
        }

        /**
         * Execute putUser request
         * @return UserDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UserDto execute() throws ApiException {
            ApiResponse<UserDto> localVarResp = putUserWithHttpInfo(id, updateUserDto);
            return localVarResp.getData();
        }

        /**
         * Execute putUser request with HTTP info returned
         * @return ApiResponse&lt;UserDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserDto> executeWithHttpInfo() throws ApiException {
            return putUserWithHttpInfo(id, updateUserDto);
        }

        /**
         * Execute putUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserDto> _callback) throws ApiException {
            return putUserAsync(id, updateUserDto, _callback);
        }
    }

    /**
     * Update a user.
     * 
     * @param id The ID of the user. (required)
     * @param updateUserDto The user object that needs to be updated. (required)
     * @return APIuserManagementPutUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIuserManagementPutUserRequest putUser(String id, UpdateUserDto updateUserDto) {
        return new APIuserManagementPutUserRequest(id, updateUserDto);
    }
    private okhttp3.Call unlockUserCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-management/{id}/unlock"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockUserValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return unlockUserCall(id, _callback);

    }


    private ApiResponse<UserDto> unlockUserWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = unlockUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unlockUserAsync(String id, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuserManagementUnlockUserRequest {
        private final String id;

        private APIuserManagementUnlockUserRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for unlockUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User unlocked. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unlockUserCall(id, _callback);
        }

        /**
         * Execute unlockUser request
         * @return UserDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User unlocked. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public UserDto execute() throws ApiException {
            ApiResponse<UserDto> localVarResp = unlockUserWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute unlockUser request with HTTP info returned
         * @return ApiResponse&lt;UserDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User unlocked. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserDto> executeWithHttpInfo() throws ApiException {
            return unlockUserWithHttpInfo(id);
        }

        /**
         * Execute unlockUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> User unlocked. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserDto> _callback) throws ApiException {
            return unlockUserAsync(id, _callback);
        }
    }

    /**
     * Unlock a user.
     * 
     * @param id The ID of the user to unlock. (required)
     * @return APIuserManagementUnlockUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User unlocked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is the current user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIuserManagementUnlockUserRequest unlockUser(String id) {
        return new APIuserManagementUnlockUserRequest(id);
    }
}
