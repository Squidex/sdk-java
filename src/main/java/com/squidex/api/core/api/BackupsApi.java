/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.BackupJobsDto;
import com.squidex.api.types.ErrorDto;
import java.io.File;
import com.squidex.api.types.RestoreJobDto;
import com.squidex.api.types.RestoreRequestDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class BackupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBackupContentCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/backups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupContentValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getBackupContentCall(id, _callback);

    }


    private ApiResponse<File> getBackupContentWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getBackupContentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBackupContentAsync(String id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupContentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIbackupContentGetBackupContentRequest {
        private final String id;

        private APIbackupContentGetBackupContentRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getBackupContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBackupContentCall(id, _callback);
        }

        /**
         * Execute getBackupContent request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getBackupContentWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getBackupContent request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getBackupContentWithHttpInfo(id);
        }

        /**
         * Execute getBackupContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getBackupContentAsync(id, _callback);
        }
    }

    /**
     * Get the backup content.
     * 
     * @param id The ID of the backup. (required)
     * @return APIbackupContentGetBackupContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIbackupContentGetBackupContentRequest getBackupContent(String id) {
        return new APIbackupContentGetBackupContentRequest(id);
    }
    private okhttp3.Call getBackupContentV2Call(String id, String appId, String app, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/backups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (app != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app", app));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupContentV2ValidateBeforeCall(String id, String appId, String app, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getBackupContentV2Call(id, appId, app, _callback);

    }


    private ApiResponse<File> getBackupContentV2WithHttpInfo(String id, String appId, String app) throws ApiException {
        okhttp3.Call localVarCall = getBackupContentV2ValidateBeforeCall(id, appId, app, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBackupContentV2Async(String id, String appId, String app, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupContentV2ValidateBeforeCall(id, appId, app, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIbackupContentGetBackupContentV2Request {
        private final String id;
        private String appId;
        private String app;

        private APIbackupContentGetBackupContentV2Request(String id) {
            this.id = id;
        }

        /**
         * Set appId
         * @param appId The ID of the app. (optional)
         * @return APIbackupContentGetBackupContentV2Request
         */
        public APIbackupContentGetBackupContentV2Request appId(String appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Set app
         * @param app The name of the app. (optional, default to )
         * @return APIbackupContentGetBackupContentV2Request
         */
        public APIbackupContentGetBackupContentV2Request app(String app) {
            this.app = app;
            return this;
        }

        /**
         * Build call for getBackupContentV2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBackupContentV2Call(id, appId, app, _callback);
        }

        /**
         * Execute getBackupContentV2 request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getBackupContentV2WithHttpInfo(id, appId, app);
            return localVarResp.getData();
        }

        /**
         * Execute getBackupContentV2 request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getBackupContentV2WithHttpInfo(id, appId, app);
        }

        /**
         * Execute getBackupContentV2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getBackupContentV2Async(id, appId, app, _callback);
        }
    }

    /**
     * Get the backup content.
     * 
     * @param id The ID of the backup. (required)
     * @return APIbackupContentGetBackupContentV2Request
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Backup found and content returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIbackupContentGetBackupContentV2Request getBackupContentV2(String id) {
        return new APIbackupContentGetBackupContentV2Request(id);
    }
    private okhttp3.Call deleteBackupCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/backups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBackupValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteBackupCall(id, _callback);

    }


    private ApiResponse<Void> deleteBackupWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteBackupValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBackupAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBackupValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIbackupsDeleteBackupRequest {
        private final String id;

        private APIbackupsDeleteBackupRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteBackup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Backup deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBackupCall(id, _callback);
        }

        /**
         * Execute deleteBackup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Backup deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            deleteBackupWithHttpInfo(id);
        }

        /**
         * Execute deleteBackup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Backup deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBackupWithHttpInfo(id);
        }

        /**
         * Execute deleteBackup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Backup deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBackupAsync(id, _callback);
        }
    }

    /**
     * Delete a backup.
     * 
     * @param id The ID of the backup to delete. (required)
     * @return APIbackupsDeleteBackupRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Backup deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Backup or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIbackupsDeleteBackupRequest deleteBackup(String id) {
        return new APIbackupsDeleteBackupRequest(id);
    }
    private okhttp3.Call getBackupsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/backups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getBackupsCall(_callback);

    }


    private ApiResponse<BackupJobsDto> getBackupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getBackupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BackupJobsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBackupsAsync(final ApiCallback<BackupJobsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BackupJobsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIbackupsGetBackupsRequest {

        private APIbackupsGetBackupsRequest() {
        }

        /**
         * Build call for getBackups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backups returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBackupsCall(_callback);
        }

        /**
         * Execute getBackups request
         * @return BackupJobsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backups returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public BackupJobsDto execute() throws ApiException {
            ApiResponse<BackupJobsDto> localVarResp = getBackupsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getBackups request with HTTP info returned
         * @return ApiResponse&lt;BackupJobsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backups returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<BackupJobsDto> executeWithHttpInfo() throws ApiException {
            return getBackupsWithHttpInfo();
        }

        /**
         * Execute getBackups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Backups returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<BackupJobsDto> _callback) throws ApiException {
            return getBackupsAsync(_callback);
        }
    }

    /**
     * Get all backup jobs.
     * 
     * @return APIbackupsGetBackupsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Backups returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIbackupsGetBackupsRequest getBackups() {
        return new APIbackupsGetBackupsRequest();
    }
    private okhttp3.Call postBackupCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/backups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBackupValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return postBackupCall(_callback);

    }


    private ApiResponse<Void> postBackupWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = postBackupValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call postBackupAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBackupValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIbackupsPostBackupRequest {

        private APIbackupsPostBackupRequest() {
        }

        /**
         * Build call for postBackup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Backup started. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Backup contingent reached. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postBackupCall(_callback);
        }

        /**
         * Execute postBackup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Backup started. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Backup contingent reached. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            postBackupWithHttpInfo();
        }

        /**
         * Execute postBackup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Backup started. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Backup contingent reached. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return postBackupWithHttpInfo();
        }

        /**
         * Execute postBackup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Backup started. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Backup contingent reached. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return postBackupAsync(_callback);
        }
    }

    /**
     * Start a new backup.
     * 
     * @return APIbackupsPostBackupRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Backup started. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Backup contingent reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIbackupsPostBackupRequest postBackup() {
        return new APIbackupsPostBackupRequest();
    }
    private okhttp3.Call getRestoreJobCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRestoreJobValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRestoreJobCall(_callback);

    }


    private ApiResponse<RestoreJobDto> getRestoreJobWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRestoreJobValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestoreJobDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRestoreJobAsync(final ApiCallback<RestoreJobDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRestoreJobValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestoreJobDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrestoreGetRestoreJobRequest {

        private APIrestoreGetRestoreJobRequest() {
        }

        /**
         * Build call for getRestoreJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Status returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRestoreJobCall(_callback);
        }

        /**
         * Execute getRestoreJob request
         * @return RestoreJobDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Status returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public RestoreJobDto execute() throws ApiException {
            ApiResponse<RestoreJobDto> localVarResp = getRestoreJobWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getRestoreJob request with HTTP info returned
         * @return ApiResponse&lt;RestoreJobDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Status returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RestoreJobDto> executeWithHttpInfo() throws ApiException {
            return getRestoreJobWithHttpInfo();
        }

        /**
         * Execute getRestoreJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Status returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RestoreJobDto> _callback) throws ApiException {
            return getRestoreJobAsync(_callback);
        }
    }

    /**
     * Get current restore status.
     * 
     * @return APIrestoreGetRestoreJobRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status returned. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIrestoreGetRestoreJobRequest getRestoreJob() {
        return new APIrestoreGetRestoreJobRequest();
    }
    private okhttp3.Call postRestoreJobCall(RestoreRequestDto restoreRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreRequestDto;

        // create path and map variables
        String localVarPath = "/api/apps/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postRestoreJobValidateBeforeCall(RestoreRequestDto restoreRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restoreRequestDto' is set
        if (restoreRequestDto == null) {
            throw new ApiException("Missing the required parameter 'restoreRequestDto' when calling (Async)");
        }

        return postRestoreJobCall(restoreRequestDto, _callback);

    }


    private ApiResponse<Void> postRestoreJobWithHttpInfo(RestoreRequestDto restoreRequestDto) throws ApiException {
        okhttp3.Call localVarCall = postRestoreJobValidateBeforeCall(restoreRequestDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call postRestoreJobAsync(RestoreRequestDto restoreRequestDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postRestoreJobValidateBeforeCall(restoreRequestDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIrestorePostRestoreJobRequest {
        private final RestoreRequestDto restoreRequestDto;

        private APIrestorePostRestoreJobRequest(RestoreRequestDto restoreRequestDto) {
            this.restoreRequestDto = restoreRequestDto;
        }

        /**
         * Build call for postRestoreJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Restore operation started. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postRestoreJobCall(restoreRequestDto, _callback);
        }

        /**
         * Execute postRestoreJob request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Restore operation started. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            postRestoreJobWithHttpInfo(restoreRequestDto);
        }

        /**
         * Execute postRestoreJob request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Restore operation started. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return postRestoreJobWithHttpInfo(restoreRequestDto);
        }

        /**
         * Execute postRestoreJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Restore operation started. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return postRestoreJobAsync(restoreRequestDto, _callback);
        }
    }

    /**
     * Restore a backup.
     * 
     * @param restoreRequestDto The backup to restore. (required)
     * @return APIrestorePostRestoreJobRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIrestorePostRestoreJobRequest postRestoreJob(RestoreRequestDto restoreRequestDto) {
        return new APIrestorePostRestoreJobRequest(restoreRequestDto);
    }
}
