/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.AnnotateAssetDto;
import com.squidex.api.types.AssetDto;
import com.squidex.api.types.AssetFolderDto;
import com.squidex.api.types.AssetFolderScope;
import com.squidex.api.types.AssetFoldersDto;
import com.squidex.api.types.AssetsDto;
import java.math.BigDecimal;
import com.squidex.api.types.BulkResultDto;
import com.squidex.api.types.BulkUpdateAssetsDto;
import com.squidex.api.types.CreateAssetFolderDto;
import com.squidex.api.types.ErrorDto;
import java.io.File;
import com.squidex.api.types.ImageFormat;
import com.squidex.api.types.MoveAssetDto;
import com.squidex.api.types.MoveAssetFolderDto;
import com.squidex.api.types.QueryDto;
import com.squidex.api.types.RenameAssetFolderDto;
import com.squidex.api.types.RenameTagDto;
import com.squidex.api.types.ResizeMode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class AssetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssetContentCall(String id, Long version, Long cache, Integer download, Integer width, Integer height, Integer quality, ResizeMode mode, String bg, Float focusX, Float focusY, Boolean nofocus, Boolean auto, Boolean force, Boolean deleted, ImageFormat format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/assets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (cache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cache", cache));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (bg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bg", bg));
        }

        if (focusX != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focusX", focusX));
        }

        if (focusY != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focusY", focusY));
        }

        if (nofocus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nofocus", nofocus));
        }

        if (auto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auto", auto));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetContentValidateBeforeCall(String id, Long version, Long cache, Integer download, Integer width, Integer height, Integer quality, ResizeMode mode, String bg, Float focusX, Float focusY, Boolean nofocus, Boolean auto, Boolean force, Boolean deleted, ImageFormat format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getAssetContentCall(id, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, _callback);

    }


    private ApiResponse<File> getAssetContentWithHttpInfo(String id, Long version, Long cache, Integer download, Integer width, Integer height, Integer quality, ResizeMode mode, String bg, Float focusX, Float focusY, Boolean nofocus, Boolean auto, Boolean force, Boolean deleted, ImageFormat format) throws ApiException {
        okhttp3.Call localVarCall = getAssetContentValidateBeforeCall(id, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetContentAsync(String id, Long version, Long cache, Integer download, Integer width, Integer height, Integer quality, ResizeMode mode, String bg, Float focusX, Float focusY, Boolean nofocus, Boolean auto, Boolean force, Boolean deleted, ImageFormat format, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetContentValidateBeforeCall(id, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetContentGetAssetContentRequest {
        private final String id;
        private Long version;
        private Long cache;
        private Integer download;
        private Integer width;
        private Integer height;
        private Integer quality;
        private ResizeMode mode;
        private String bg;
        private Float focusX;
        private Float focusY;
        private Boolean nofocus;
        private Boolean auto;
        private Boolean force;
        private Boolean deleted;
        private ImageFormat format;

        private APIassetContentGetAssetContentRequest(String id) {
            this.id = id;
        }

        /**
         * Set version
         * @param version The optional version of the asset. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest version(Long version) {
            this.version = version;
            return this;
        }

        /**
         * Set cache
         * @param cache The cache duration in seconds. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest cache(Long cache) {
            this.cache = cache;
            return this;
        }

        /**
         * Set download
         * @param download Set it to 0 to prevent download. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest download(Integer download) {
            this.download = download;
            return this;
        }

        /**
         * Set width
         * @param width The target width of the asset, if it is an image. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest width(Integer width) {
            this.width = width;
            return this;
        }

        /**
         * Set height
         * @param height The target height of the asset, if it is an image. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest height(Integer height) {
            this.height = height;
            return this;
        }

        /**
         * Set quality
         * @param quality Optional image quality, it is is an jpeg image. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest quality(Integer quality) {
            this.quality = quality;
            return this;
        }

        /**
         * Set mode
         * @param mode The resize mode when the width and height is defined. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest mode(ResizeMode mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Set bg
         * @param bg Optional background color. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest bg(String bg) {
            this.bg = bg;
            return this;
        }

        /**
         * Set focusX
         * @param focusX Override the y focus point. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest focusX(Float focusX) {
            this.focusX = focusX;
            return this;
        }

        /**
         * Set focusY
         * @param focusY Override the x focus point. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest focusY(Float focusY) {
            this.focusY = focusY;
            return this;
        }

        /**
         * Set nofocus
         * @param nofocus True to ignore the asset focus point if any. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest nofocus(Boolean nofocus) {
            this.nofocus = nofocus;
            return this;
        }

        /**
         * Set auto
         * @param auto True to use auto format. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest auto(Boolean auto) {
            this.auto = auto;
            return this;
        }

        /**
         * Set force
         * @param force True to force a new resize even if it already stored. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest force(Boolean force) {
            this.force = force;
            return this;
        }

        /**
         * Set deleted
         * @param deleted Also return deleted content items. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Set format
         * @param format True to force a new resize even if it already stored. (optional)
         * @return APIassetContentGetAssetContentRequest
         */
        public APIassetContentGetAssetContentRequest format(ImageFormat format) {
            this.format = format;
            return this;
        }

        /**
         * Build call for getAssetContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetContentCall(id, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, _callback);
        }

        /**
         * Execute getAssetContent request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getAssetContentWithHttpInfo(id, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetContent request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getAssetContentWithHttpInfo(id, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format);
        }

        /**
         * Execute getAssetContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getAssetContentAsync(id, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, _callback);
        }
    }

    /**
     * Get the asset content.
     * 
     * @param id The ID of the asset. (required)
     * @return APIassetContentGetAssetContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIassetContentGetAssetContentRequest getAssetContent(String id) {
        return new APIassetContentGetAssetContentRequest(id);
    }
    private okhttp3.Call getAssetContentBySlugCall(String idOrSlug, Long version, Long cache, Integer download, Integer width, Integer height, Integer quality, ResizeMode mode, String bg, Float focusX, Float focusY, Boolean nofocus, Boolean auto, Boolean force, Boolean deleted, ImageFormat format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/assets/$app$/{idOrSlug}/"
            .replace("{" + "idOrSlug" + "}", localVarApiClient.escapeString(idOrSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (cache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cache", cache));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (bg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bg", bg));
        }

        if (focusX != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focusX", focusX));
        }

        if (focusY != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focusY", focusY));
        }

        if (nofocus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nofocus", nofocus));
        }

        if (auto != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auto", auto));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetContentBySlugValidateBeforeCall(String idOrSlug, Long version, Long cache, Integer download, Integer width, Integer height, Integer quality, ResizeMode mode, String bg, Float focusX, Float focusY, Boolean nofocus, Boolean auto, Boolean force, Boolean deleted, ImageFormat format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrSlug' is set
        if (idOrSlug == null) {
            throw new ApiException("Missing the required parameter 'idOrSlug' when calling (Async)");
        }

        return getAssetContentBySlugCall(idOrSlug, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, _callback);

    }


    private ApiResponse<File> getAssetContentBySlugWithHttpInfo(String idOrSlug, Long version, Long cache, Integer download, Integer width, Integer height, Integer quality, ResizeMode mode, String bg, Float focusX, Float focusY, Boolean nofocus, Boolean auto, Boolean force, Boolean deleted, ImageFormat format) throws ApiException {
        okhttp3.Call localVarCall = getAssetContentBySlugValidateBeforeCall(idOrSlug, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetContentBySlugAsync(String idOrSlug, Long version, Long cache, Integer download, Integer width, Integer height, Integer quality, ResizeMode mode, String bg, Float focusX, Float focusY, Boolean nofocus, Boolean auto, Boolean force, Boolean deleted, ImageFormat format, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetContentBySlugValidateBeforeCall(idOrSlug, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetContentGetAssetContentBySlugRequest {
        private final String idOrSlug;
        private Long version;
        private Long cache;
        private Integer download;
        private Integer width;
        private Integer height;
        private Integer quality;
        private ResizeMode mode;
        private String bg;
        private Float focusX;
        private Float focusY;
        private Boolean nofocus;
        private Boolean auto;
        private Boolean force;
        private Boolean deleted;
        private ImageFormat format;

        private APIassetContentGetAssetContentBySlugRequest(String idOrSlug) {
            this.idOrSlug = idOrSlug;
        }

        /**
         * Set version
         * @param version The optional version of the asset. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest version(Long version) {
            this.version = version;
            return this;
        }

        /**
         * Set cache
         * @param cache The cache duration in seconds. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest cache(Long cache) {
            this.cache = cache;
            return this;
        }

        /**
         * Set download
         * @param download Set it to 0 to prevent download. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest download(Integer download) {
            this.download = download;
            return this;
        }

        /**
         * Set width
         * @param width The target width of the asset, if it is an image. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest width(Integer width) {
            this.width = width;
            return this;
        }

        /**
         * Set height
         * @param height The target height of the asset, if it is an image. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest height(Integer height) {
            this.height = height;
            return this;
        }

        /**
         * Set quality
         * @param quality Optional image quality, it is is an jpeg image. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest quality(Integer quality) {
            this.quality = quality;
            return this;
        }

        /**
         * Set mode
         * @param mode The resize mode when the width and height is defined. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest mode(ResizeMode mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Set bg
         * @param bg Optional background color. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest bg(String bg) {
            this.bg = bg;
            return this;
        }

        /**
         * Set focusX
         * @param focusX Override the y focus point. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest focusX(Float focusX) {
            this.focusX = focusX;
            return this;
        }

        /**
         * Set focusY
         * @param focusY Override the x focus point. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest focusY(Float focusY) {
            this.focusY = focusY;
            return this;
        }

        /**
         * Set nofocus
         * @param nofocus True to ignore the asset focus point if any. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest nofocus(Boolean nofocus) {
            this.nofocus = nofocus;
            return this;
        }

        /**
         * Set auto
         * @param auto True to use auto format. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest auto(Boolean auto) {
            this.auto = auto;
            return this;
        }

        /**
         * Set force
         * @param force True to force a new resize even if it already stored. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest force(Boolean force) {
            this.force = force;
            return this;
        }

        /**
         * Set deleted
         * @param deleted Also return deleted content items. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Set format
         * @param format True to force a new resize even if it already stored. (optional)
         * @return APIassetContentGetAssetContentBySlugRequest
         */
        public APIassetContentGetAssetContentBySlugRequest format(ImageFormat format) {
            this.format = format;
            return this;
        }

        /**
         * Build call for getAssetContentBySlug
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetContentBySlugCall(idOrSlug, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, _callback);
        }

        /**
         * Execute getAssetContentBySlug request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getAssetContentBySlugWithHttpInfo(idOrSlug, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetContentBySlug request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getAssetContentBySlugWithHttpInfo(idOrSlug, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format);
        }

        /**
         * Execute getAssetContentBySlug request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getAssetContentBySlugAsync(idOrSlug, version, cache, download, width, height, quality, mode, bg, focusX, focusY, nofocus, auto, force, deleted, format, _callback);
        }
    }

    /**
     * Get the asset content.
     * 
     * @param idOrSlug The id or slug of the asset. (required)
     * @return APIassetContentGetAssetContentBySlugRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset found and content or (resized) image returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetContentGetAssetContentBySlugRequest getAssetContentBySlug(String idOrSlug) {
        return new APIassetContentGetAssetContentBySlugRequest(idOrSlug);
    }
    private okhttp3.Call deleteAssetFolderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/folders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetFolderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteAssetFolderCall(id, _callback);

    }


    private ApiResponse<Void> deleteAssetFolderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetFolderValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAssetFolderAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetFolderValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIassetFoldersDeleteAssetFolderRequest {
        private final String id;

        private APIassetFoldersDeleteAssetFolderRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteAssetFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Asset folder deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAssetFolderCall(id, _callback);
        }

        /**
         * Execute deleteAssetFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Asset folder deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAssetFolderWithHttpInfo(id);
        }

        /**
         * Execute deleteAssetFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Asset folder deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAssetFolderWithHttpInfo(id);
        }

        /**
         * Execute deleteAssetFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Asset folder deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAssetFolderAsync(id, _callback);
        }
    }

    /**
     * Delete an asset folder.
     * 
     * @param id The ID of the asset folder to delete. (required)
     * @return APIassetFoldersDeleteAssetFolderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset folder deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetFoldersDeleteAssetFolderRequest deleteAssetFolder(String id) {
        return new APIassetFoldersDeleteAssetFolderRequest(id);
    }
    private okhttp3.Call getAssetFoldersCall(String parentId, AssetFolderScope scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetFoldersValidateBeforeCall(String parentId, AssetFolderScope scope, final ApiCallback _callback) throws ApiException {
        return getAssetFoldersCall(parentId, scope, _callback);

    }


    private ApiResponse<AssetFoldersDto> getAssetFoldersWithHttpInfo(String parentId, AssetFolderScope scope) throws ApiException {
        okhttp3.Call localVarCall = getAssetFoldersValidateBeforeCall(parentId, scope, null);
        Type localVarReturnType = new TypeToken<AssetFoldersDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetFoldersAsync(String parentId, AssetFolderScope scope, final ApiCallback<AssetFoldersDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetFoldersValidateBeforeCall(parentId, scope, _callback);
        Type localVarReturnType = new TypeToken<AssetFoldersDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetFoldersGetAssetFoldersRequest {
        private String parentId;
        private AssetFolderScope scope;

        private APIassetFoldersGetAssetFoldersRequest() {
        }

        /**
         * Set parentId
         * @param parentId The optional parent folder id. (optional)
         * @return APIassetFoldersGetAssetFoldersRequest
         */
        public APIassetFoldersGetAssetFoldersRequest parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * Set scope
         * @param scope The scope of the query. (optional)
         * @return APIassetFoldersGetAssetFoldersRequest
         */
        public APIassetFoldersGetAssetFoldersRequest scope(AssetFolderScope scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Build call for getAssetFolders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folders returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetFoldersCall(parentId, scope, _callback);
        }

        /**
         * Execute getAssetFolders request
         * @return AssetFoldersDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folders returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetFoldersDto execute() throws ApiException {
            ApiResponse<AssetFoldersDto> localVarResp = getAssetFoldersWithHttpInfo(parentId, scope);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetFolders request with HTTP info returned
         * @return ApiResponse&lt;AssetFoldersDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folders returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetFoldersDto> executeWithHttpInfo() throws ApiException {
            return getAssetFoldersWithHttpInfo(parentId, scope);
        }

        /**
         * Execute getAssetFolders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folders returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetFoldersDto> _callback) throws ApiException {
            return getAssetFoldersAsync(parentId, scope, _callback);
        }
    }

    /**
     * Get asset folders.
     * Get all asset folders for the app.
     * @return APIassetFoldersGetAssetFoldersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset folders returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetFoldersGetAssetFoldersRequest getAssetFolders() {
        return new APIassetFoldersGetAssetFoldersRequest();
    }
    private okhttp3.Call postAssetFolderCall(CreateAssetFolderDto createAssetFolderDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAssetFolderDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAssetFolderValidateBeforeCall(CreateAssetFolderDto createAssetFolderDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAssetFolderDto' is set
        if (createAssetFolderDto == null) {
            throw new ApiException("Missing the required parameter 'createAssetFolderDto' when calling (Async)");
        }

        return postAssetFolderCall(createAssetFolderDto, _callback);

    }


    private ApiResponse<AssetFolderDto> postAssetFolderWithHttpInfo(CreateAssetFolderDto createAssetFolderDto) throws ApiException {
        okhttp3.Call localVarCall = postAssetFolderValidateBeforeCall(createAssetFolderDto, null);
        Type localVarReturnType = new TypeToken<AssetFolderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postAssetFolderAsync(CreateAssetFolderDto createAssetFolderDto, final ApiCallback<AssetFolderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAssetFolderValidateBeforeCall(createAssetFolderDto, _callback);
        Type localVarReturnType = new TypeToken<AssetFolderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetFoldersPostAssetFolderRequest {
        private final CreateAssetFolderDto createAssetFolderDto;

        private APIassetFoldersPostAssetFolderRequest(CreateAssetFolderDto createAssetFolderDto) {
            this.createAssetFolderDto = createAssetFolderDto;
        }

        /**
         * Build call for postAssetFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset folder created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postAssetFolderCall(createAssetFolderDto, _callback);
        }

        /**
         * Execute postAssetFolder request
         * @return AssetFolderDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset folder created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetFolderDto execute() throws ApiException {
            ApiResponse<AssetFolderDto> localVarResp = postAssetFolderWithHttpInfo(createAssetFolderDto);
            return localVarResp.getData();
        }

        /**
         * Execute postAssetFolder request with HTTP info returned
         * @return ApiResponse&lt;AssetFolderDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset folder created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetFolderDto> executeWithHttpInfo() throws ApiException {
            return postAssetFolderWithHttpInfo(createAssetFolderDto);
        }

        /**
         * Execute postAssetFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset folder created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetFolderDto> _callback) throws ApiException {
            return postAssetFolderAsync(createAssetFolderDto, _callback);
        }
    }

    /**
     * Create an asset folder.
     * 
     * @param createAssetFolderDto The asset folder object that needs to be added to the App. (required)
     * @return APIassetFoldersPostAssetFolderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Asset folder created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetFoldersPostAssetFolderRequest postAssetFolder(CreateAssetFolderDto createAssetFolderDto) {
        return new APIassetFoldersPostAssetFolderRequest(createAssetFolderDto);
    }
    private okhttp3.Call putAssetFolderCall(String id, RenameAssetFolderDto renameAssetFolderDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renameAssetFolderDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/folders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAssetFolderValidateBeforeCall(String id, RenameAssetFolderDto renameAssetFolderDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'renameAssetFolderDto' is set
        if (renameAssetFolderDto == null) {
            throw new ApiException("Missing the required parameter 'renameAssetFolderDto' when calling (Async)");
        }

        return putAssetFolderCall(id, renameAssetFolderDto, _callback);

    }


    private ApiResponse<AssetFolderDto> putAssetFolderWithHttpInfo(String id, RenameAssetFolderDto renameAssetFolderDto) throws ApiException {
        okhttp3.Call localVarCall = putAssetFolderValidateBeforeCall(id, renameAssetFolderDto, null);
        Type localVarReturnType = new TypeToken<AssetFolderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putAssetFolderAsync(String id, RenameAssetFolderDto renameAssetFolderDto, final ApiCallback<AssetFolderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAssetFolderValidateBeforeCall(id, renameAssetFolderDto, _callback);
        Type localVarReturnType = new TypeToken<AssetFolderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetFoldersPutAssetFolderRequest {
        private final String id;
        private final RenameAssetFolderDto renameAssetFolderDto;

        private APIassetFoldersPutAssetFolderRequest(String id, RenameAssetFolderDto renameAssetFolderDto) {
            this.id = id;
            this.renameAssetFolderDto = renameAssetFolderDto;
        }

        /**
         * Build call for putAssetFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folder updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putAssetFolderCall(id, renameAssetFolderDto, _callback);
        }

        /**
         * Execute putAssetFolder request
         * @return AssetFolderDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folder updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetFolderDto execute() throws ApiException {
            ApiResponse<AssetFolderDto> localVarResp = putAssetFolderWithHttpInfo(id, renameAssetFolderDto);
            return localVarResp.getData();
        }

        /**
         * Execute putAssetFolder request with HTTP info returned
         * @return ApiResponse&lt;AssetFolderDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folder updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetFolderDto> executeWithHttpInfo() throws ApiException {
            return putAssetFolderWithHttpInfo(id, renameAssetFolderDto);
        }

        /**
         * Execute putAssetFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folder updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetFolderDto> _callback) throws ApiException {
            return putAssetFolderAsync(id, renameAssetFolderDto, _callback);
        }
    }

    /**
     * Update an asset folder.
     * 
     * @param id The ID of the asset folder. (required)
     * @param renameAssetFolderDto The asset folder object that needs to updated. (required)
     * @return APIassetFoldersPutAssetFolderRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset folder updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetFoldersPutAssetFolderRequest putAssetFolder(String id, RenameAssetFolderDto renameAssetFolderDto) {
        return new APIassetFoldersPutAssetFolderRequest(id, renameAssetFolderDto);
    }
    private okhttp3.Call putAssetFolderParentCall(String id, MoveAssetFolderDto moveAssetFolderDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveAssetFolderDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/folders/{id}/parent"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAssetFolderParentValidateBeforeCall(String id, MoveAssetFolderDto moveAssetFolderDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'moveAssetFolderDto' is set
        if (moveAssetFolderDto == null) {
            throw new ApiException("Missing the required parameter 'moveAssetFolderDto' when calling (Async)");
        }

        return putAssetFolderParentCall(id, moveAssetFolderDto, _callback);

    }


    private ApiResponse<AssetFolderDto> putAssetFolderParentWithHttpInfo(String id, MoveAssetFolderDto moveAssetFolderDto) throws ApiException {
        okhttp3.Call localVarCall = putAssetFolderParentValidateBeforeCall(id, moveAssetFolderDto, null);
        Type localVarReturnType = new TypeToken<AssetFolderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putAssetFolderParentAsync(String id, MoveAssetFolderDto moveAssetFolderDto, final ApiCallback<AssetFolderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAssetFolderParentValidateBeforeCall(id, moveAssetFolderDto, _callback);
        Type localVarReturnType = new TypeToken<AssetFolderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetFoldersPutAssetFolderParentRequest {
        private final String id;
        private final MoveAssetFolderDto moveAssetFolderDto;

        private APIassetFoldersPutAssetFolderParentRequest(String id, MoveAssetFolderDto moveAssetFolderDto) {
            this.id = id;
            this.moveAssetFolderDto = moveAssetFolderDto;
        }

        /**
         * Build call for putAssetFolderParent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folder moved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putAssetFolderParentCall(id, moveAssetFolderDto, _callback);
        }

        /**
         * Execute putAssetFolderParent request
         * @return AssetFolderDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folder moved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetFolderDto execute() throws ApiException {
            ApiResponse<AssetFolderDto> localVarResp = putAssetFolderParentWithHttpInfo(id, moveAssetFolderDto);
            return localVarResp.getData();
        }

        /**
         * Execute putAssetFolderParent request with HTTP info returned
         * @return ApiResponse&lt;AssetFolderDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folder moved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetFolderDto> executeWithHttpInfo() throws ApiException {
            return putAssetFolderParentWithHttpInfo(id, moveAssetFolderDto);
        }

        /**
         * Execute putAssetFolderParent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset folder moved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetFolderDto> _callback) throws ApiException {
            return putAssetFolderParentAsync(id, moveAssetFolderDto, _callback);
        }
    }

    /**
     * Move an asset folder.
     * 
     * @param id The ID of the asset folder. (required)
     * @param moveAssetFolderDto The asset folder object that needs to updated. (required)
     * @return APIassetFoldersPutAssetFolderParentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset folder moved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset folder request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset folder or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetFoldersPutAssetFolderParentRequest putAssetFolderParent(String id, MoveAssetFolderDto moveAssetFolderDto) {
        return new APIassetFoldersPutAssetFolderParentRequest(id, moveAssetFolderDto);
    }
    private okhttp3.Call bulkUpdateAssetsCall(BulkUpdateAssetsDto bulkUpdateAssetsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkUpdateAssetsDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateAssetsValidateBeforeCall(BulkUpdateAssetsDto bulkUpdateAssetsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkUpdateAssetsDto' is set
        if (bulkUpdateAssetsDto == null) {
            throw new ApiException("Missing the required parameter 'bulkUpdateAssetsDto' when calling (Async)");
        }

        return bulkUpdateAssetsCall(bulkUpdateAssetsDto, _callback);

    }


    private ApiResponse<List<BulkResultDto>> bulkUpdateAssetsWithHttpInfo(BulkUpdateAssetsDto bulkUpdateAssetsDto) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateAssetsValidateBeforeCall(bulkUpdateAssetsDto, null);
        Type localVarReturnType = new TypeToken<List<BulkResultDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkUpdateAssetsAsync(BulkUpdateAssetsDto bulkUpdateAssetsDto, final ApiCallback<List<BulkResultDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateAssetsValidateBeforeCall(bulkUpdateAssetsDto, _callback);
        Type localVarReturnType = new TypeToken<List<BulkResultDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsBulkUpdateAssetsRequest {
        private final BulkUpdateAssetsDto bulkUpdateAssetsDto;

        private APIassetsBulkUpdateAssetsRequest(BulkUpdateAssetsDto bulkUpdateAssetsDto) {
            this.bulkUpdateAssetsDto = bulkUpdateAssetsDto;
        }

        /**
         * Build call for bulkUpdateAssets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets created, update or delete. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Assets request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkUpdateAssetsCall(bulkUpdateAssetsDto, _callback);
        }

        /**
         * Execute bulkUpdateAssets request
         * @return List&lt;BulkResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets created, update or delete. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Assets request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<BulkResultDto> execute() throws ApiException {
            ApiResponse<List<BulkResultDto>> localVarResp = bulkUpdateAssetsWithHttpInfo(bulkUpdateAssetsDto);
            return localVarResp.getData();
        }

        /**
         * Execute bulkUpdateAssets request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BulkResultDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets created, update or delete. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Assets request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BulkResultDto>> executeWithHttpInfo() throws ApiException {
            return bulkUpdateAssetsWithHttpInfo(bulkUpdateAssetsDto);
        }

        /**
         * Execute bulkUpdateAssets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets created, update or delete. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Assets request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BulkResultDto>> _callback) throws ApiException {
            return bulkUpdateAssetsAsync(bulkUpdateAssetsDto, _callback);
        }
    }

    /**
     * Bulk update assets.
     * 
     * @param bulkUpdateAssetsDto The bulk update request. (required)
     * @return APIassetsBulkUpdateAssetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assets created, update or delete. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Assets request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsBulkUpdateAssetsRequest bulkUpdateAssets(BulkUpdateAssetsDto bulkUpdateAssetsDto) {
        return new APIassetsBulkUpdateAssetsRequest(bulkUpdateAssetsDto);
    }
    private okhttp3.Call deleteAssetCall(String id, Boolean checkReferrers, Boolean permanent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkReferrers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkReferrers", checkReferrers));
        }

        if (permanent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permanent", permanent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetValidateBeforeCall(String id, Boolean checkReferrers, Boolean permanent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteAssetCall(id, checkReferrers, permanent, _callback);

    }


    private ApiResponse<Void> deleteAssetWithHttpInfo(String id, Boolean checkReferrers, Boolean permanent) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetValidateBeforeCall(id, checkReferrers, permanent, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAssetAsync(String id, Boolean checkReferrers, Boolean permanent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetValidateBeforeCall(id, checkReferrers, permanent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIassetsDeleteAssetRequest {
        private final String id;
        private Boolean checkReferrers;
        private Boolean permanent;

        private APIassetsDeleteAssetRequest(String id) {
            this.id = id;
        }

        /**
         * Set checkReferrers
         * @param checkReferrers True to check referrers of this asset. (optional)
         * @return APIassetsDeleteAssetRequest
         */
        public APIassetsDeleteAssetRequest checkReferrers(Boolean checkReferrers) {
            this.checkReferrers = checkReferrers;
            return this;
        }

        /**
         * Set permanent
         * @param permanent True to delete the asset permanently. (optional)
         * @return APIassetsDeleteAssetRequest
         */
        public APIassetsDeleteAssetRequest permanent(Boolean permanent) {
            this.permanent = permanent;
            return this;
        }

        /**
         * Build call for deleteAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Asset deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAssetCall(id, checkReferrers, permanent, _callback);
        }

        /**
         * Execute deleteAsset request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Asset deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAssetWithHttpInfo(id, checkReferrers, permanent);
        }

        /**
         * Execute deleteAsset request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Asset deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAssetWithHttpInfo(id, checkReferrers, permanent);
        }

        /**
         * Execute deleteAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Asset deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAssetAsync(id, checkReferrers, permanent, _callback);
        }
    }

    /**
     * Delete an asset.
     * 
     * @param id The ID of the asset to delete. (required)
     * @return APIassetsDeleteAssetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsDeleteAssetRequest deleteAsset(String id) {
        return new APIassetsDeleteAssetRequest(id);
    }
    private okhttp3.Call getAssetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getAssetCall(id, _callback);

    }


    private ApiResponse<AssetDto> getAssetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getAssetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetAsync(String id, final ApiCallback<AssetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsGetAssetRequest {
        private final String id;

        private APIassetsGetAssetRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for getAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetCall(id, _callback);
        }

        /**
         * Execute getAsset request
         * @return AssetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetDto execute() throws ApiException {
            ApiResponse<AssetDto> localVarResp = getAssetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetDto> executeWithHttpInfo() throws ApiException {
            return getAssetWithHttpInfo(id);
        }

        /**
         * Execute getAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset found. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetDto> _callback) throws ApiException {
            return getAssetAsync(id, _callback);
        }
    }

    /**
     * Get an asset by id.
     * 
     * @param id The ID of the asset to retrieve. (required)
     * @return APIassetsGetAssetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsGetAssetRequest getAsset(String id) {
        return new APIassetsGetAssetRequest(id);
    }
    private okhttp3.Call getAssetsCall(String parentId, String ids, String q, BigDecimal $top, BigDecimal $skip, String $orderby, String $filter, Boolean noTotal, Boolean noSlowTotal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (noTotal != null) {
            localVarHeaderParams.put("noTotal", localVarApiClient.parameterToString(noTotal));
        }

        if (noSlowTotal != null) {
            localVarHeaderParams.put("noSlowTotal", localVarApiClient.parameterToString(noSlowTotal));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetsValidateBeforeCall(String parentId, String ids, String q, BigDecimal $top, BigDecimal $skip, String $orderby, String $filter, Boolean noTotal, Boolean noSlowTotal, final ApiCallback _callback) throws ApiException {
        return getAssetsCall(parentId, ids, q, $top, $skip, $orderby, $filter, noTotal, noSlowTotal, _callback);

    }


    private ApiResponse<AssetsDto> getAssetsWithHttpInfo(String parentId, String ids, String q, BigDecimal $top, BigDecimal $skip, String $orderby, String $filter, Boolean noTotal, Boolean noSlowTotal) throws ApiException {
        okhttp3.Call localVarCall = getAssetsValidateBeforeCall(parentId, ids, q, $top, $skip, $orderby, $filter, noTotal, noSlowTotal, null);
        Type localVarReturnType = new TypeToken<AssetsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetsAsync(String parentId, String ids, String q, BigDecimal $top, BigDecimal $skip, String $orderby, String $filter, Boolean noTotal, Boolean noSlowTotal, final ApiCallback<AssetsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetsValidateBeforeCall(parentId, ids, q, $top, $skip, $orderby, $filter, noTotal, noSlowTotal, _callback);
        Type localVarReturnType = new TypeToken<AssetsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsGetAssetsRequest {
        private String parentId;
        private String ids;
        private String q;
        private BigDecimal $top;
        private BigDecimal $skip;
        private String $orderby;
        private String $filter;
        private Boolean noTotal;
        private Boolean noSlowTotal;

        private APIassetsGetAssetsRequest() {
        }

        /**
         * Set parentId
         * @param parentId The optional parent folder id. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * Set ids
         * @param ids The optional asset ids. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest ids(String ids) {
            this.ids = ids;
            return this;
        }

        /**
         * Set q
         * @param q The optional json query. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest q(String q) {
            this.q = q;
            return this;
        }

        /**
         * Set $top
         * @param $top Optional number of items to take. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest $top(BigDecimal $top) {
            this.$top = $top;
            return this;
        }

        /**
         * Set $skip
         * @param $skip Optional number of items to skip. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest $skip(BigDecimal $skip) {
            this.$skip = $skip;
            return this;
        }

        /**
         * Set $orderby
         * @param $orderby Optional OData order definition. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest $orderby(String $orderby) {
            this.$orderby = $orderby;
            return this;
        }

        /**
         * Set $filter
         * @param $filter Optional OData filter. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest $filter(String $filter) {
            this.$filter = $filter;
            return this;
        }

        /**
         * Set noTotal
         * @param noTotal Do not return the total amount. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest noTotal(Boolean noTotal) {
            this.noTotal = noTotal;
            return this;
        }

        /**
         * Set noSlowTotal
         * @param noSlowTotal Do not return the total amount, if it would be slow. (optional)
         * @return APIassetsGetAssetsRequest
         */
        public APIassetsGetAssetsRequest noSlowTotal(Boolean noSlowTotal) {
            this.noSlowTotal = noSlowTotal;
            return this;
        }

        /**
         * Build call for getAssets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetsCall(parentId, ids, q, $top, $skip, $orderby, $filter, noTotal, noSlowTotal, _callback);
        }

        /**
         * Execute getAssets request
         * @return AssetsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetsDto execute() throws ApiException {
            ApiResponse<AssetsDto> localVarResp = getAssetsWithHttpInfo(parentId, ids, q, $top, $skip, $orderby, $filter, noTotal, noSlowTotal);
            return localVarResp.getData();
        }

        /**
         * Execute getAssets request with HTTP info returned
         * @return ApiResponse&lt;AssetsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetsDto> executeWithHttpInfo() throws ApiException {
            return getAssetsWithHttpInfo(parentId, ids, q, $top, $skip, $orderby, $filter, noTotal, noSlowTotal);
        }

        /**
         * Execute getAssets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetsDto> _callback) throws ApiException {
            return getAssetsAsync(parentId, ids, q, $top, $skip, $orderby, $filter, noTotal, noSlowTotal, _callback);
        }
    }

    /**
     * Get assets.
     * Get all assets for the app.
     * @return APIassetsGetAssetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsGetAssetsRequest getAssets() {
        return new APIassetsGetAssetsRequest();
    }
    private okhttp3.Call getAssetsPostCall(QueryDto queryDto, Boolean noTotal, Boolean noSlowTotal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (noTotal != null) {
            localVarHeaderParams.put("noTotal", localVarApiClient.parameterToString(noTotal));
        }

        if (noSlowTotal != null) {
            localVarHeaderParams.put("noSlowTotal", localVarApiClient.parameterToString(noSlowTotal));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetsPostValidateBeforeCall(QueryDto queryDto, Boolean noTotal, Boolean noSlowTotal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queryDto' is set
        if (queryDto == null) {
            throw new ApiException("Missing the required parameter 'queryDto' when calling (Async)");
        }

        return getAssetsPostCall(queryDto, noTotal, noSlowTotal, _callback);

    }


    private ApiResponse<AssetsDto> getAssetsPostWithHttpInfo(QueryDto queryDto, Boolean noTotal, Boolean noSlowTotal) throws ApiException {
        okhttp3.Call localVarCall = getAssetsPostValidateBeforeCall(queryDto, noTotal, noSlowTotal, null);
        Type localVarReturnType = new TypeToken<AssetsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetsPostAsync(QueryDto queryDto, Boolean noTotal, Boolean noSlowTotal, final ApiCallback<AssetsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetsPostValidateBeforeCall(queryDto, noTotal, noSlowTotal, _callback);
        Type localVarReturnType = new TypeToken<AssetsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsGetAssetsPostRequest {
        private final QueryDto queryDto;
        private Boolean noTotal;
        private Boolean noSlowTotal;

        private APIassetsGetAssetsPostRequest(QueryDto queryDto) {
            this.queryDto = queryDto;
        }

        /**
         * Set noTotal
         * @param noTotal Do not return the total amount. (optional)
         * @return APIassetsGetAssetsPostRequest
         */
        public APIassetsGetAssetsPostRequest noTotal(Boolean noTotal) {
            this.noTotal = noTotal;
            return this;
        }

        /**
         * Set noSlowTotal
         * @param noSlowTotal Do not return the total amount, if it would be slow. (optional)
         * @return APIassetsGetAssetsPostRequest
         */
        public APIassetsGetAssetsPostRequest noSlowTotal(Boolean noSlowTotal) {
            this.noSlowTotal = noSlowTotal;
            return this;
        }

        /**
         * Build call for getAssetsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetsPostCall(queryDto, noTotal, noSlowTotal, _callback);
        }

        /**
         * Execute getAssetsPost request
         * @return AssetsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetsDto execute() throws ApiException {
            ApiResponse<AssetsDto> localVarResp = getAssetsPostWithHttpInfo(queryDto, noTotal, noSlowTotal);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetsPost request with HTTP info returned
         * @return ApiResponse&lt;AssetsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetsDto> executeWithHttpInfo() throws ApiException {
            return getAssetsPostWithHttpInfo(queryDto, noTotal, noSlowTotal);
        }

        /**
         * Execute getAssetsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetsDto> _callback) throws ApiException {
            return getAssetsPostAsync(queryDto, noTotal, noSlowTotal, _callback);
        }
    }

    /**
     * Get assets.
     * Get all assets for the app.
     * @param queryDto The required query object. (required)
     * @return APIassetsGetAssetsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assets returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsGetAssetsPostRequest getAssetsPost(QueryDto queryDto) {
        return new APIassetsGetAssetsPostRequest(queryDto);
    }
    private okhttp3.Call getTagsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTagsCall(_callback);

    }


    private ApiResponse<Map<String, Integer>> getTagsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTagsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTagsAsync(final ApiCallback<Map<String, Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsGetTagsRequest {

        private APIassetsGetTagsRequest() {
        }

        /**
         * Build call for getTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets tags returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTagsCall(_callback);
        }

        /**
         * Execute getTags request
         * @return Map&lt;String, Integer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets tags returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, Integer> execute() throws ApiException {
            ApiResponse<Map<String, Integer>> localVarResp = getTagsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTags request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, Integer&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets tags returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, Integer>> executeWithHttpInfo() throws ApiException {
            return getTagsWithHttpInfo();
        }

        /**
         * Execute getTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assets tags returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, Integer>> _callback) throws ApiException {
            return getTagsAsync(_callback);
        }
    }

    /**
     * Get assets tags.
     * Get all tags for assets.
     * @return APIassetsGetTagsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assets tags returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsGetTagsRequest getTags() {
        return new APIassetsGetTagsRequest();
    }
    private okhttp3.Call postAssetCall(String parentId, String id, Boolean duplicate, File file, String url, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ParentId", parentId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (duplicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplicate", duplicate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAssetValidateBeforeCall(String parentId, String id, Boolean duplicate, File file, String url, String name, final ApiCallback _callback) throws ApiException {
        return postAssetCall(parentId, id, duplicate, file, url, name, _callback);

    }


    private ApiResponse<AssetDto> postAssetWithHttpInfo(String parentId, String id, Boolean duplicate, File file, String url, String name) throws ApiException {
        okhttp3.Call localVarCall = postAssetValidateBeforeCall(parentId, id, duplicate, file, url, name, null);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postAssetAsync(String parentId, String id, Boolean duplicate, File file, String url, String name, final ApiCallback<AssetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAssetValidateBeforeCall(parentId, id, duplicate, file, url, name, _callback);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsPostAssetRequest {
        private String parentId;
        private String id;
        private Boolean duplicate;
        private File file;
        private String url;
        private String name;

        private APIassetsPostAssetRequest() {
        }

        /**
         * Set parentId
         * @param parentId The optional parent folder id. (optional)
         * @return APIassetsPostAssetRequest
         */
        public APIassetsPostAssetRequest parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * Set id
         * @param id The optional custom asset id. (optional)
         * @return APIassetsPostAssetRequest
         */
        public APIassetsPostAssetRequest id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Set duplicate
         * @param duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
         * @return APIassetsPostAssetRequest
         */
        public APIassetsPostAssetRequest duplicate(Boolean duplicate) {
            this.duplicate = duplicate;
            return this;
        }

        /**
         * Set file
         * @param file  (optional)
         * @return APIassetsPostAssetRequest
         */
        public APIassetsPostAssetRequest file(File file) {
            this.file = file;
            return this;
        }

        /**
         * Set url
         * @param url  (optional)
         * @return APIassetsPostAssetRequest
         */
        public APIassetsPostAssetRequest url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return APIassetsPostAssetRequest
         */
        public APIassetsPostAssetRequest name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Build call for postAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postAssetCall(parentId, id, duplicate, file, url, name, _callback);
        }

        /**
         * Execute postAsset request
         * @return AssetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetDto execute() throws ApiException {
            ApiResponse<AssetDto> localVarResp = postAssetWithHttpInfo(parentId, id, duplicate, file, url, name);
            return localVarResp.getData();
        }

        /**
         * Execute postAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetDto> executeWithHttpInfo() throws ApiException {
            return postAssetWithHttpInfo(parentId, id, duplicate, file, url, name);
        }

        /**
         * Execute postAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetDto> _callback) throws ApiException {
            return postAssetAsync(parentId, id, duplicate, file, url, name, _callback);
        }
    }

    /**
     * Upload a new asset.
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * @return APIassetsPostAssetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Asset created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsPostAssetRequest postAsset() {
        return new APIassetsPostAssetRequest();
    }
    private okhttp3.Call postUpsertAssetCall(String id, String parentId, Boolean duplicate, File file, String url, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentId", parentId));
        }

        if (duplicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplicate", duplicate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUpsertAssetValidateBeforeCall(String id, String parentId, Boolean duplicate, File file, String url, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return postUpsertAssetCall(id, parentId, duplicate, file, url, name, _callback);

    }


    private ApiResponse<AssetDto> postUpsertAssetWithHttpInfo(String id, String parentId, Boolean duplicate, File file, String url, String name) throws ApiException {
        okhttp3.Call localVarCall = postUpsertAssetValidateBeforeCall(id, parentId, duplicate, file, url, name, null);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postUpsertAssetAsync(String id, String parentId, Boolean duplicate, File file, String url, String name, final ApiCallback<AssetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUpsertAssetValidateBeforeCall(id, parentId, duplicate, file, url, name, _callback);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsPostUpsertAssetRequest {
        private final String id;
        private String parentId;
        private Boolean duplicate;
        private File file;
        private String url;
        private String name;

        private APIassetsPostUpsertAssetRequest(String id) {
            this.id = id;
        }

        /**
         * Set parentId
         * @param parentId The optional parent folder id. (optional)
         * @return APIassetsPostUpsertAssetRequest
         */
        public APIassetsPostUpsertAssetRequest parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * Set duplicate
         * @param duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
         * @return APIassetsPostUpsertAssetRequest
         */
        public APIassetsPostUpsertAssetRequest duplicate(Boolean duplicate) {
            this.duplicate = duplicate;
            return this;
        }

        /**
         * Set file
         * @param file  (optional)
         * @return APIassetsPostUpsertAssetRequest
         */
        public APIassetsPostUpsertAssetRequest file(File file) {
            this.file = file;
            return this;
        }

        /**
         * Set url
         * @param url  (optional)
         * @return APIassetsPostUpsertAssetRequest
         */
        public APIassetsPostUpsertAssetRequest url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return APIassetsPostUpsertAssetRequest
         */
        public APIassetsPostUpsertAssetRequest name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Build call for postUpsertAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset created or updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postUpsertAssetCall(id, parentId, duplicate, file, url, name, _callback);
        }

        /**
         * Execute postUpsertAsset request
         * @return AssetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset created or updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetDto execute() throws ApiException {
            ApiResponse<AssetDto> localVarResp = postUpsertAssetWithHttpInfo(id, parentId, duplicate, file, url, name);
            return localVarResp.getData();
        }

        /**
         * Execute postUpsertAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset created or updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetDto> executeWithHttpInfo() throws ApiException {
            return postUpsertAssetWithHttpInfo(id, parentId, duplicate, file, url, name);
        }

        /**
         * Execute postUpsertAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset created or updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetDto> _callback) throws ApiException {
            return postUpsertAssetAsync(id, parentId, duplicate, file, url, name, _callback);
        }
    }

    /**
     * Upsert an asset.
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * @param id The optional custom asset id. (required)
     * @return APIassetsPostUpsertAssetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset created or updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsPostUpsertAssetRequest postUpsertAsset(String id) {
        return new APIassetsPostUpsertAssetRequest(id);
    }
    private okhttp3.Call putAssetCall(String id, AnnotateAssetDto annotateAssetDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = annotateAssetDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAssetValidateBeforeCall(String id, AnnotateAssetDto annotateAssetDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'annotateAssetDto' is set
        if (annotateAssetDto == null) {
            throw new ApiException("Missing the required parameter 'annotateAssetDto' when calling (Async)");
        }

        return putAssetCall(id, annotateAssetDto, _callback);

    }


    private ApiResponse<AssetDto> putAssetWithHttpInfo(String id, AnnotateAssetDto annotateAssetDto) throws ApiException {
        okhttp3.Call localVarCall = putAssetValidateBeforeCall(id, annotateAssetDto, null);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putAssetAsync(String id, AnnotateAssetDto annotateAssetDto, final ApiCallback<AssetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAssetValidateBeforeCall(id, annotateAssetDto, _callback);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsPutAssetRequest {
        private final String id;
        private final AnnotateAssetDto annotateAssetDto;

        private APIassetsPutAssetRequest(String id, AnnotateAssetDto annotateAssetDto) {
            this.id = id;
            this.annotateAssetDto = annotateAssetDto;
        }

        /**
         * Build call for putAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putAssetCall(id, annotateAssetDto, _callback);
        }

        /**
         * Execute putAsset request
         * @return AssetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetDto execute() throws ApiException {
            ApiResponse<AssetDto> localVarResp = putAssetWithHttpInfo(id, annotateAssetDto);
            return localVarResp.getData();
        }

        /**
         * Execute putAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetDto> executeWithHttpInfo() throws ApiException {
            return putAssetWithHttpInfo(id, annotateAssetDto);
        }

        /**
         * Execute putAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetDto> _callback) throws ApiException {
            return putAssetAsync(id, annotateAssetDto, _callback);
        }
    }

    /**
     * Update an asset.
     * 
     * @param id The ID of the asset. (required)
     * @param annotateAssetDto The asset object that needs to updated. (required)
     * @return APIassetsPutAssetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsPutAssetRequest putAsset(String id, AnnotateAssetDto annotateAssetDto) {
        return new APIassetsPutAssetRequest(id, annotateAssetDto);
    }
    private okhttp3.Call putAssetContentCall(String id, File file, String url, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/{id}/content"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAssetContentValidateBeforeCall(String id, File file, String url, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return putAssetContentCall(id, file, url, name, _callback);

    }


    private ApiResponse<AssetDto> putAssetContentWithHttpInfo(String id, File file, String url, String name) throws ApiException {
        okhttp3.Call localVarCall = putAssetContentValidateBeforeCall(id, file, url, name, null);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putAssetContentAsync(String id, File file, String url, String name, final ApiCallback<AssetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAssetContentValidateBeforeCall(id, file, url, name, _callback);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsPutAssetContentRequest {
        private final String id;
        private File file;
        private String url;
        private String name;

        private APIassetsPutAssetContentRequest(String id) {
            this.id = id;
        }

        /**
         * Set file
         * @param file  (optional)
         * @return APIassetsPutAssetContentRequest
         */
        public APIassetsPutAssetContentRequest file(File file) {
            this.file = file;
            return this;
        }

        /**
         * Set url
         * @param url  (optional)
         * @return APIassetsPutAssetContentRequest
         */
        public APIassetsPutAssetContentRequest url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return APIassetsPutAssetContentRequest
         */
        public APIassetsPutAssetContentRequest name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Build call for putAssetContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putAssetContentCall(id, file, url, name, _callback);
        }

        /**
         * Execute putAssetContent request
         * @return AssetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetDto execute() throws ApiException {
            ApiResponse<AssetDto> localVarResp = putAssetContentWithHttpInfo(id, file, url, name);
            return localVarResp.getData();
        }

        /**
         * Execute putAssetContent request with HTTP info returned
         * @return ApiResponse&lt;AssetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetDto> executeWithHttpInfo() throws ApiException {
            return putAssetContentWithHttpInfo(id, file, url, name);
        }

        /**
         * Execute putAssetContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetDto> _callback) throws ApiException {
            return putAssetContentAsync(id, file, url, name, _callback);
        }
    }

    /**
     * Replace asset content.
     * Use multipart request to upload an asset.
     * @param id The ID of the asset. (required)
     * @return APIassetsPutAssetContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Asset exceeds the maximum upload size. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsPutAssetContentRequest putAssetContent(String id) {
        return new APIassetsPutAssetContentRequest(id);
    }
    private okhttp3.Call putAssetParentCall(String id, MoveAssetDto moveAssetDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveAssetDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/{id}/parent"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAssetParentValidateBeforeCall(String id, MoveAssetDto moveAssetDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'moveAssetDto' is set
        if (moveAssetDto == null) {
            throw new ApiException("Missing the required parameter 'moveAssetDto' when calling (Async)");
        }

        return putAssetParentCall(id, moveAssetDto, _callback);

    }


    private ApiResponse<AssetDto> putAssetParentWithHttpInfo(String id, MoveAssetDto moveAssetDto) throws ApiException {
        okhttp3.Call localVarCall = putAssetParentValidateBeforeCall(id, moveAssetDto, null);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putAssetParentAsync(String id, MoveAssetDto moveAssetDto, final ApiCallback<AssetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAssetParentValidateBeforeCall(id, moveAssetDto, _callback);
        Type localVarReturnType = new TypeToken<AssetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsPutAssetParentRequest {
        private final String id;
        private final MoveAssetDto moveAssetDto;

        private APIassetsPutAssetParentRequest(String id, MoveAssetDto moveAssetDto) {
            this.id = id;
            this.moveAssetDto = moveAssetDto;
        }

        /**
         * Build call for putAssetParent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset moved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putAssetParentCall(id, moveAssetDto, _callback);
        }

        /**
         * Execute putAssetParent request
         * @return AssetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset moved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetDto execute() throws ApiException {
            ApiResponse<AssetDto> localVarResp = putAssetParentWithHttpInfo(id, moveAssetDto);
            return localVarResp.getData();
        }

        /**
         * Execute putAssetParent request with HTTP info returned
         * @return ApiResponse&lt;AssetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset moved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetDto> executeWithHttpInfo() throws ApiException {
            return putAssetParentWithHttpInfo(id, moveAssetDto);
        }

        /**
         * Execute putAssetParent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset moved. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetDto> _callback) throws ApiException {
            return putAssetParentAsync(id, moveAssetDto, _callback);
        }
    }

    /**
     * Moves the asset.
     * 
     * @param id The ID of the asset. (required)
     * @param moveAssetDto The asset object that needs to updated. (required)
     * @return APIassetsPutAssetParentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset moved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsPutAssetParentRequest putAssetParent(String id, MoveAssetDto moveAssetDto) {
        return new APIassetsPutAssetParentRequest(id, moveAssetDto);
    }
    private okhttp3.Call putTagCall(String name, RenameTagDto renameTagDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renameTagDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/tags/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTagValidateBeforeCall(String name, RenameTagDto renameTagDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling (Async)");
        }

        // verify the required parameter 'renameTagDto' is set
        if (renameTagDto == null) {
            throw new ApiException("Missing the required parameter 'renameTagDto' when calling (Async)");
        }

        return putTagCall(name, renameTagDto, _callback);

    }


    private ApiResponse<Map<String, Integer>> putTagWithHttpInfo(String name, RenameTagDto renameTagDto) throws ApiException {
        okhttp3.Call localVarCall = putTagValidateBeforeCall(name, renameTagDto, null);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putTagAsync(String name, RenameTagDto renameTagDto, final ApiCallback<Map<String, Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTagValidateBeforeCall(name, renameTagDto, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIassetsPutTagRequest {
        private final String name;
        private final RenameTagDto renameTagDto;

        private APIassetsPutTagRequest(String name, RenameTagDto renameTagDto) {
            this.name = name;
            this.renameTagDto = renameTagDto;
        }

        /**
         * Build call for putTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset tag renamed and new tags returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putTagCall(name, renameTagDto, _callback);
        }

        /**
         * Execute putTag request
         * @return Map&lt;String, Integer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset tag renamed and new tags returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, Integer> execute() throws ApiException {
            ApiResponse<Map<String, Integer>> localVarResp = putTagWithHttpInfo(name, renameTagDto);
            return localVarResp.getData();
        }

        /**
         * Execute putTag request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, Integer&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset tag renamed and new tags returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, Integer>> executeWithHttpInfo() throws ApiException {
            return putTagWithHttpInfo(name, renameTagDto);
        }

        /**
         * Execute putTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset tag renamed and new tags returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, Integer>> _callback) throws ApiException {
            return putTagAsync(name, renameTagDto, _callback);
        }
    }

    /**
     * Rename an asset tag.
     * 
     * @param name The tag to return. (required)
     * @param renameTagDto The required request object. (required)
     * @return APIassetsPutTagRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset tag renamed and new tags returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIassetsPutTagRequest putTag(String name, RenameTagDto renameTagDto) {
        return new APIassetsPutTagRequest(name, renameTagDto);
    }
}
