/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.AddFieldDto;
import com.squidex.api.types.ChangeCategoryDto;
import com.squidex.api.types.ConfigureFieldRulesDto;
import com.squidex.api.types.ConfigureUIFieldsDto;
import com.squidex.api.types.CreateSchemaDto;
import com.squidex.api.types.ErrorDto;
import com.squidex.api.types.ReorderFieldsDto;
import com.squidex.api.types.SchemaDto;
import com.squidex.api.types.SchemaScriptsDto;
import com.squidex.api.types.SchemasDto;
import com.squidex.api.types.SynchronizeSchemaDto;
import com.squidex.api.types.UpdateFieldDto;
import com.squidex.api.types.UpdateSchemaDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class SchemasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchemasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteFieldCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldValidateBeforeCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteFieldCall(schema, id, _callback);

    }


    private ApiResponse<SchemaDto> deleteFieldWithHttpInfo(String schema, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldValidateBeforeCall(schema, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFieldAsync(String schema, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldValidateBeforeCall(schema, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsDeleteFieldRequest {
        private final String schema;
        private final Long id;

        private APIschemaFieldsDeleteFieldRequest(String schema, Long id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Build call for deleteField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFieldCall(schema, id, _callback);
        }

        /**
         * Execute deleteField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = deleteFieldWithHttpInfo(schema, id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return deleteFieldWithHttpInfo(schema, id);
        }

        /**
         * Execute deleteField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return deleteFieldAsync(schema, id, _callback);
        }
    }

    /**
     * Delete a schema field.
     * 
     * @param schema The name of the schema. (required)
     * @param id The ID of the field to disable. (required)
     * @return APIschemaFieldsDeleteFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsDeleteFieldRequest deleteField(String schema, Long id) {
        return new APIschemaFieldsDeleteFieldRequest(schema, id);
    }
    private okhttp3.Call deleteNestedFieldCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNestedFieldValidateBeforeCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteNestedFieldCall(schema, parentId, id, _callback);

    }


    private ApiResponse<SchemaDto> deleteNestedFieldWithHttpInfo(String schema, Long parentId, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteNestedFieldValidateBeforeCall(schema, parentId, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteNestedFieldAsync(String schema, Long parentId, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNestedFieldValidateBeforeCall(schema, parentId, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsDeleteNestedFieldRequest {
        private final String schema;
        private final Long parentId;
        private final Long id;

        private APIschemaFieldsDeleteNestedFieldRequest(String schema, Long parentId, Long id) {
            this.schema = schema;
            this.parentId = parentId;
            this.id = id;
        }

        /**
         * Build call for deleteNestedField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteNestedFieldCall(schema, parentId, id, _callback);
        }

        /**
         * Execute deleteNestedField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = deleteNestedFieldWithHttpInfo(schema, parentId, id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteNestedField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return deleteNestedFieldWithHttpInfo(schema, parentId, id);
        }

        /**
         * Execute deleteNestedField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return deleteNestedFieldAsync(schema, parentId, id, _callback);
        }
    }

    /**
     * Delete a nested field.
     * 
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param id The ID of the field to disable. (required)
     * @return APIschemaFieldsDeleteNestedFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsDeleteNestedFieldRequest deleteNestedField(String schema, Long parentId, Long id) {
        return new APIschemaFieldsDeleteNestedFieldRequest(schema, parentId, id);
    }
    private okhttp3.Call disableFieldCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{id}/disable"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableFieldValidateBeforeCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return disableFieldCall(schema, id, _callback);

    }


    private ApiResponse<SchemaDto> disableFieldWithHttpInfo(String schema, Long id) throws ApiException {
        okhttp3.Call localVarCall = disableFieldValidateBeforeCall(schema, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableFieldAsync(String schema, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableFieldValidateBeforeCall(schema, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsDisableFieldRequest {
        private final String schema;
        private final Long id;

        private APIschemaFieldsDisableFieldRequest(String schema, Long id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Build call for disableField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableFieldCall(schema, id, _callback);
        }

        /**
         * Execute disableField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = disableFieldWithHttpInfo(schema, id);
            return localVarResp.getData();
        }

        /**
         * Execute disableField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return disableFieldWithHttpInfo(schema, id);
        }

        /**
         * Execute disableField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return disableFieldAsync(schema, id, _callback);
        }
    }

    /**
     * Disable a schema field.
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @param schema The name of the schema. (required)
     * @param id The ID of the field to disable. (required)
     * @return APIschemaFieldsDisableFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsDisableFieldRequest disableField(String schema, Long id) {
        return new APIschemaFieldsDisableFieldRequest(schema, id);
    }
    private okhttp3.Call disableNestedFieldCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/disable"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableNestedFieldValidateBeforeCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return disableNestedFieldCall(schema, parentId, id, _callback);

    }


    private ApiResponse<SchemaDto> disableNestedFieldWithHttpInfo(String schema, Long parentId, Long id) throws ApiException {
        okhttp3.Call localVarCall = disableNestedFieldValidateBeforeCall(schema, parentId, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableNestedFieldAsync(String schema, Long parentId, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableNestedFieldValidateBeforeCall(schema, parentId, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsDisableNestedFieldRequest {
        private final String schema;
        private final Long parentId;
        private final Long id;

        private APIschemaFieldsDisableNestedFieldRequest(String schema, Long parentId, Long id) {
            this.schema = schema;
            this.parentId = parentId;
            this.id = id;
        }

        /**
         * Build call for disableNestedField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableNestedFieldCall(schema, parentId, id, _callback);
        }

        /**
         * Execute disableNestedField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = disableNestedFieldWithHttpInfo(schema, parentId, id);
            return localVarResp.getData();
        }

        /**
         * Execute disableNestedField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return disableNestedFieldWithHttpInfo(schema, parentId, id);
        }

        /**
         * Execute disableNestedField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return disableNestedFieldAsync(schema, parentId, id, _callback);
        }
    }

    /**
     * Disable a nested field.
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param id The ID of the field to disable. (required)
     * @return APIschemaFieldsDisableNestedFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field disabled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsDisableNestedFieldRequest disableNestedField(String schema, Long parentId, Long id) {
        return new APIschemaFieldsDisableNestedFieldRequest(schema, parentId, id);
    }
    private okhttp3.Call enableFieldCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{id}/enable"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableFieldValidateBeforeCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return enableFieldCall(schema, id, _callback);

    }


    private ApiResponse<SchemaDto> enableFieldWithHttpInfo(String schema, Long id) throws ApiException {
        okhttp3.Call localVarCall = enableFieldValidateBeforeCall(schema, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableFieldAsync(String schema, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableFieldValidateBeforeCall(schema, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsEnableFieldRequest {
        private final String schema;
        private final Long id;

        private APIschemaFieldsEnableFieldRequest(String schema, Long id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Build call for enableField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enableFieldCall(schema, id, _callback);
        }

        /**
         * Execute enableField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = enableFieldWithHttpInfo(schema, id);
            return localVarResp.getData();
        }

        /**
         * Execute enableField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return enableFieldWithHttpInfo(schema, id);
        }

        /**
         * Execute enableField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return enableFieldAsync(schema, id, _callback);
        }
    }

    /**
     * Enable a schema field.
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @param schema The name of the schema. (required)
     * @param id The ID of the field to enable. (required)
     * @return APIschemaFieldsEnableFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsEnableFieldRequest enableField(String schema, Long id) {
        return new APIschemaFieldsEnableFieldRequest(schema, id);
    }
    private okhttp3.Call enableNestedFieldCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/enable"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableNestedFieldValidateBeforeCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return enableNestedFieldCall(schema, parentId, id, _callback);

    }


    private ApiResponse<SchemaDto> enableNestedFieldWithHttpInfo(String schema, Long parentId, Long id) throws ApiException {
        okhttp3.Call localVarCall = enableNestedFieldValidateBeforeCall(schema, parentId, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableNestedFieldAsync(String schema, Long parentId, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableNestedFieldValidateBeforeCall(schema, parentId, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsEnableNestedFieldRequest {
        private final String schema;
        private final Long parentId;
        private final Long id;

        private APIschemaFieldsEnableNestedFieldRequest(String schema, Long parentId, Long id) {
            this.schema = schema;
            this.parentId = parentId;
            this.id = id;
        }

        /**
         * Build call for enableNestedField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enableNestedFieldCall(schema, parentId, id, _callback);
        }

        /**
         * Execute enableNestedField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = enableNestedFieldWithHttpInfo(schema, parentId, id);
            return localVarResp.getData();
        }

        /**
         * Execute enableNestedField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return enableNestedFieldWithHttpInfo(schema, parentId, id);
        }

        /**
         * Execute enableNestedField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return enableNestedFieldAsync(schema, parentId, id, _callback);
        }
    }

    /**
     * Enable a nested field.
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param id The ID of the field to enable. (required)
     * @return APIschemaFieldsEnableNestedFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field enabled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsEnableNestedFieldRequest enableNestedField(String schema, Long parentId, Long id) {
        return new APIschemaFieldsEnableNestedFieldRequest(schema, parentId, id);
    }
    private okhttp3.Call hideFieldCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{id}/hide"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hideFieldValidateBeforeCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return hideFieldCall(schema, id, _callback);

    }


    private ApiResponse<SchemaDto> hideFieldWithHttpInfo(String schema, Long id) throws ApiException {
        okhttp3.Call localVarCall = hideFieldValidateBeforeCall(schema, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call hideFieldAsync(String schema, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = hideFieldValidateBeforeCall(schema, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsHideFieldRequest {
        private final String schema;
        private final Long id;

        private APIschemaFieldsHideFieldRequest(String schema, Long id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Build call for hideField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return hideFieldCall(schema, id, _callback);
        }

        /**
         * Execute hideField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = hideFieldWithHttpInfo(schema, id);
            return localVarResp.getData();
        }

        /**
         * Execute hideField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return hideFieldWithHttpInfo(schema, id);
        }

        /**
         * Execute hideField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return hideFieldAsync(schema, id, _callback);
        }
    }

    /**
     * Hide a schema field.
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @param schema The name of the schema. (required)
     * @param id The ID of the field to hide. (required)
     * @return APIschemaFieldsHideFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsHideFieldRequest hideField(String schema, Long id) {
        return new APIschemaFieldsHideFieldRequest(schema, id);
    }
    private okhttp3.Call hideNestedFieldCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/hide"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hideNestedFieldValidateBeforeCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return hideNestedFieldCall(schema, parentId, id, _callback);

    }


    private ApiResponse<SchemaDto> hideNestedFieldWithHttpInfo(String schema, Long parentId, Long id) throws ApiException {
        okhttp3.Call localVarCall = hideNestedFieldValidateBeforeCall(schema, parentId, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call hideNestedFieldAsync(String schema, Long parentId, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = hideNestedFieldValidateBeforeCall(schema, parentId, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsHideNestedFieldRequest {
        private final String schema;
        private final Long parentId;
        private final Long id;

        private APIschemaFieldsHideNestedFieldRequest(String schema, Long parentId, Long id) {
            this.schema = schema;
            this.parentId = parentId;
            this.id = id;
        }

        /**
         * Build call for hideNestedField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return hideNestedFieldCall(schema, parentId, id, _callback);
        }

        /**
         * Execute hideNestedField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = hideNestedFieldWithHttpInfo(schema, parentId, id);
            return localVarResp.getData();
        }

        /**
         * Execute hideNestedField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return hideNestedFieldWithHttpInfo(schema, parentId, id);
        }

        /**
         * Execute hideNestedField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return hideNestedFieldAsync(schema, parentId, id, _callback);
        }
    }

    /**
     * Hide a nested field.
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param id The ID of the field to hide. (required)
     * @return APIschemaFieldsHideNestedFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsHideNestedFieldRequest hideNestedField(String schema, Long parentId, Long id) {
        return new APIschemaFieldsHideNestedFieldRequest(schema, parentId, id);
    }
    private okhttp3.Call lockFieldCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{id}/lock"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockFieldValidateBeforeCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return lockFieldCall(schema, id, _callback);

    }


    private ApiResponse<SchemaDto> lockFieldWithHttpInfo(String schema, Long id) throws ApiException {
        okhttp3.Call localVarCall = lockFieldValidateBeforeCall(schema, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lockFieldAsync(String schema, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockFieldValidateBeforeCall(schema, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsLockFieldRequest {
        private final String schema;
        private final Long id;

        private APIschemaFieldsLockFieldRequest(String schema, Long id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Build call for lockField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lockFieldCall(schema, id, _callback);
        }

        /**
         * Execute lockField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = lockFieldWithHttpInfo(schema, id);
            return localVarResp.getData();
        }

        /**
         * Execute lockField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return lockFieldWithHttpInfo(schema, id);
        }

        /**
         * Execute lockField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return lockFieldAsync(schema, id, _callback);
        }
    }

    /**
     * Lock a schema field.
     * A locked field cannot be updated or deleted.
     * @param schema The name of the schema. (required)
     * @param id The ID of the field to lock. (required)
     * @return APIschemaFieldsLockFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsLockFieldRequest lockField(String schema, Long id) {
        return new APIschemaFieldsLockFieldRequest(schema, id);
    }
    private okhttp3.Call lockNestedFieldCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/lock"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockNestedFieldValidateBeforeCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return lockNestedFieldCall(schema, parentId, id, _callback);

    }


    private ApiResponse<SchemaDto> lockNestedFieldWithHttpInfo(String schema, Long parentId, Long id) throws ApiException {
        okhttp3.Call localVarCall = lockNestedFieldValidateBeforeCall(schema, parentId, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lockNestedFieldAsync(String schema, Long parentId, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockNestedFieldValidateBeforeCall(schema, parentId, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsLockNestedFieldRequest {
        private final String schema;
        private final Long parentId;
        private final Long id;

        private APIschemaFieldsLockNestedFieldRequest(String schema, Long parentId, Long id) {
            this.schema = schema;
            this.parentId = parentId;
            this.id = id;
        }

        /**
         * Build call for lockNestedField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lockNestedFieldCall(schema, parentId, id, _callback);
        }

        /**
         * Execute lockNestedField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = lockNestedFieldWithHttpInfo(schema, parentId, id);
            return localVarResp.getData();
        }

        /**
         * Execute lockNestedField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return lockNestedFieldWithHttpInfo(schema, parentId, id);
        }

        /**
         * Execute lockNestedField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return lockNestedFieldAsync(schema, parentId, id, _callback);
        }
    }

    /**
     * Lock a nested field.
     * A locked field cannot be edited or deleted.
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param id The ID of the field to lock. (required)
     * @return APIschemaFieldsLockNestedFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field hidden. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Field, schema, or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsLockNestedFieldRequest lockNestedField(String schema, Long parentId, Long id) {
        return new APIschemaFieldsLockNestedFieldRequest(schema, parentId, id);
    }
    private okhttp3.Call postFieldCall(String schema, AddFieldDto addFieldDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFieldDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFieldValidateBeforeCall(String schema, AddFieldDto addFieldDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'addFieldDto' is set
        if (addFieldDto == null) {
            throw new ApiException("Missing the required parameter 'addFieldDto' when calling (Async)");
        }

        return postFieldCall(schema, addFieldDto, _callback);

    }


    private ApiResponse<SchemaDto> postFieldWithHttpInfo(String schema, AddFieldDto addFieldDto) throws ApiException {
        okhttp3.Call localVarCall = postFieldValidateBeforeCall(schema, addFieldDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postFieldAsync(String schema, AddFieldDto addFieldDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFieldValidateBeforeCall(schema, addFieldDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsPostFieldRequest {
        private final String schema;
        private final AddFieldDto addFieldDto;

        private APIschemaFieldsPostFieldRequest(String schema, AddFieldDto addFieldDto) {
            this.schema = schema;
            this.addFieldDto = addFieldDto;
        }

        /**
         * Build call for postField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postFieldCall(schema, addFieldDto, _callback);
        }

        /**
         * Execute postField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = postFieldWithHttpInfo(schema, addFieldDto);
            return localVarResp.getData();
        }

        /**
         * Execute postField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return postFieldWithHttpInfo(schema, addFieldDto);
        }

        /**
         * Execute postField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return postFieldAsync(schema, addFieldDto, _callback);
        }
    }

    /**
     * Add a schema field.
     * 
     * @param schema The name of the schema. (required)
     * @param addFieldDto The field object that needs to be added to the schema. (required)
     * @return APIschemaFieldsPostFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsPostFieldRequest postField(String schema, AddFieldDto addFieldDto) {
        return new APIschemaFieldsPostFieldRequest(schema, addFieldDto);
    }
    private okhttp3.Call postNestedFieldCall(String schema, Long parentId, AddFieldDto addFieldDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFieldDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNestedFieldValidateBeforeCall(String schema, Long parentId, AddFieldDto addFieldDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'addFieldDto' is set
        if (addFieldDto == null) {
            throw new ApiException("Missing the required parameter 'addFieldDto' when calling (Async)");
        }

        return postNestedFieldCall(schema, parentId, addFieldDto, _callback);

    }


    private ApiResponse<SchemaDto> postNestedFieldWithHttpInfo(String schema, Long parentId, AddFieldDto addFieldDto) throws ApiException {
        okhttp3.Call localVarCall = postNestedFieldValidateBeforeCall(schema, parentId, addFieldDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postNestedFieldAsync(String schema, Long parentId, AddFieldDto addFieldDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNestedFieldValidateBeforeCall(schema, parentId, addFieldDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsPostNestedFieldRequest {
        private final String schema;
        private final Long parentId;
        private final AddFieldDto addFieldDto;

        private APIschemaFieldsPostNestedFieldRequest(String schema, Long parentId, AddFieldDto addFieldDto) {
            this.schema = schema;
            this.parentId = parentId;
            this.addFieldDto = addFieldDto;
        }

        /**
         * Build call for postNestedField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postNestedFieldCall(schema, parentId, addFieldDto, _callback);
        }

        /**
         * Execute postNestedField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = postNestedFieldWithHttpInfo(schema, parentId, addFieldDto);
            return localVarResp.getData();
        }

        /**
         * Execute postNestedField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return postNestedFieldWithHttpInfo(schema, parentId, addFieldDto);
        }

        /**
         * Execute postNestedField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return postNestedFieldAsync(schema, parentId, addFieldDto, _callback);
        }
    }

    /**
     * Add a nested field.
     * 
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param addFieldDto The field object that needs to be added to the schema. (required)
     * @return APIschemaFieldsPostNestedFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Schema field created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Schema field name already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsPostNestedFieldRequest postNestedField(String schema, Long parentId, AddFieldDto addFieldDto) {
        return new APIschemaFieldsPostNestedFieldRequest(schema, parentId, addFieldDto);
    }
    private okhttp3.Call putFieldCall(String schema, Long id, UpdateFieldDto updateFieldDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFieldDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putFieldValidateBeforeCall(String schema, Long id, UpdateFieldDto updateFieldDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'updateFieldDto' is set
        if (updateFieldDto == null) {
            throw new ApiException("Missing the required parameter 'updateFieldDto' when calling (Async)");
        }

        return putFieldCall(schema, id, updateFieldDto, _callback);

    }


    private ApiResponse<SchemaDto> putFieldWithHttpInfo(String schema, Long id, UpdateFieldDto updateFieldDto) throws ApiException {
        okhttp3.Call localVarCall = putFieldValidateBeforeCall(schema, id, updateFieldDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putFieldAsync(String schema, Long id, UpdateFieldDto updateFieldDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putFieldValidateBeforeCall(schema, id, updateFieldDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsPutFieldRequest {
        private final String schema;
        private final Long id;
        private final UpdateFieldDto updateFieldDto;

        private APIschemaFieldsPutFieldRequest(String schema, Long id, UpdateFieldDto updateFieldDto) {
            this.schema = schema;
            this.id = id;
            this.updateFieldDto = updateFieldDto;
        }

        /**
         * Build call for putField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putFieldCall(schema, id, updateFieldDto, _callback);
        }

        /**
         * Execute putField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putFieldWithHttpInfo(schema, id, updateFieldDto);
            return localVarResp.getData();
        }

        /**
         * Execute putField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putFieldWithHttpInfo(schema, id, updateFieldDto);
        }

        /**
         * Execute putField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putFieldAsync(schema, id, updateFieldDto, _callback);
        }
    }

    /**
     * Update a schema field.
     * 
     * @param schema The name of the schema. (required)
     * @param id The ID of the field to update. (required)
     * @param updateFieldDto The field object that needs to be added to the schema. (required)
     * @return APIschemaFieldsPutFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsPutFieldRequest putField(String schema, Long id, UpdateFieldDto updateFieldDto) {
        return new APIschemaFieldsPutFieldRequest(schema, id, updateFieldDto);
    }
    private okhttp3.Call putNestedFieldCall(String schema, Long parentId, Long id, UpdateFieldDto updateFieldDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFieldDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putNestedFieldValidateBeforeCall(String schema, Long parentId, Long id, UpdateFieldDto updateFieldDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'updateFieldDto' is set
        if (updateFieldDto == null) {
            throw new ApiException("Missing the required parameter 'updateFieldDto' when calling (Async)");
        }

        return putNestedFieldCall(schema, parentId, id, updateFieldDto, _callback);

    }


    private ApiResponse<SchemaDto> putNestedFieldWithHttpInfo(String schema, Long parentId, Long id, UpdateFieldDto updateFieldDto) throws ApiException {
        okhttp3.Call localVarCall = putNestedFieldValidateBeforeCall(schema, parentId, id, updateFieldDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putNestedFieldAsync(String schema, Long parentId, Long id, UpdateFieldDto updateFieldDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putNestedFieldValidateBeforeCall(schema, parentId, id, updateFieldDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsPutNestedFieldRequest {
        private final String schema;
        private final Long parentId;
        private final Long id;
        private final UpdateFieldDto updateFieldDto;

        private APIschemaFieldsPutNestedFieldRequest(String schema, Long parentId, Long id, UpdateFieldDto updateFieldDto) {
            this.schema = schema;
            this.parentId = parentId;
            this.id = id;
            this.updateFieldDto = updateFieldDto;
        }

        /**
         * Build call for putNestedField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putNestedFieldCall(schema, parentId, id, updateFieldDto, _callback);
        }

        /**
         * Execute putNestedField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putNestedFieldWithHttpInfo(schema, parentId, id, updateFieldDto);
            return localVarResp.getData();
        }

        /**
         * Execute putNestedField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putNestedFieldWithHttpInfo(schema, parentId, id, updateFieldDto);
        }

        /**
         * Execute putNestedField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putNestedFieldAsync(schema, parentId, id, updateFieldDto, _callback);
        }
    }

    /**
     * Update a nested field.
     * 
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param id The ID of the field to update. (required)
     * @param updateFieldDto The field object that needs to be added to the schema. (required)
     * @return APIschemaFieldsPutNestedFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsPutNestedFieldRequest putNestedField(String schema, Long parentId, Long id, UpdateFieldDto updateFieldDto) {
        return new APIschemaFieldsPutNestedFieldRequest(schema, parentId, id, updateFieldDto);
    }
    private okhttp3.Call putNestedFieldOrderingCall(String schema, Long parentId, ReorderFieldsDto reorderFieldsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reorderFieldsDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/ordering"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putNestedFieldOrderingValidateBeforeCall(String schema, Long parentId, ReorderFieldsDto reorderFieldsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'reorderFieldsDto' is set
        if (reorderFieldsDto == null) {
            throw new ApiException("Missing the required parameter 'reorderFieldsDto' when calling (Async)");
        }

        return putNestedFieldOrderingCall(schema, parentId, reorderFieldsDto, _callback);

    }


    private ApiResponse<SchemaDto> putNestedFieldOrderingWithHttpInfo(String schema, Long parentId, ReorderFieldsDto reorderFieldsDto) throws ApiException {
        okhttp3.Call localVarCall = putNestedFieldOrderingValidateBeforeCall(schema, parentId, reorderFieldsDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putNestedFieldOrderingAsync(String schema, Long parentId, ReorderFieldsDto reorderFieldsDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putNestedFieldOrderingValidateBeforeCall(schema, parentId, reorderFieldsDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsPutNestedFieldOrderingRequest {
        private final String schema;
        private final Long parentId;
        private final ReorderFieldsDto reorderFieldsDto;

        private APIschemaFieldsPutNestedFieldOrderingRequest(String schema, Long parentId, ReorderFieldsDto reorderFieldsDto) {
            this.schema = schema;
            this.parentId = parentId;
            this.reorderFieldsDto = reorderFieldsDto;
        }

        /**
         * Build call for putNestedFieldOrdering
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putNestedFieldOrderingCall(schema, parentId, reorderFieldsDto, _callback);
        }

        /**
         * Execute putNestedFieldOrdering request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putNestedFieldOrderingWithHttpInfo(schema, parentId, reorderFieldsDto);
            return localVarResp.getData();
        }

        /**
         * Execute putNestedFieldOrdering request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putNestedFieldOrderingWithHttpInfo(schema, parentId, reorderFieldsDto);
        }

        /**
         * Execute putNestedFieldOrdering request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putNestedFieldOrderingAsync(schema, parentId, reorderFieldsDto, _callback);
        }
    }

    /**
     * Reorder all nested fields.
     * 
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param reorderFieldsDto The request that contains the field ids. (required)
     * @return APIschemaFieldsPutNestedFieldOrderingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsPutNestedFieldOrderingRequest putNestedFieldOrdering(String schema, Long parentId, ReorderFieldsDto reorderFieldsDto) {
        return new APIschemaFieldsPutNestedFieldOrderingRequest(schema, parentId, reorderFieldsDto);
    }
    private okhttp3.Call putSchemaFieldOrderingCall(String schema, ReorderFieldsDto reorderFieldsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reorderFieldsDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/ordering"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSchemaFieldOrderingValidateBeforeCall(String schema, ReorderFieldsDto reorderFieldsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'reorderFieldsDto' is set
        if (reorderFieldsDto == null) {
            throw new ApiException("Missing the required parameter 'reorderFieldsDto' when calling (Async)");
        }

        return putSchemaFieldOrderingCall(schema, reorderFieldsDto, _callback);

    }


    private ApiResponse<SchemaDto> putSchemaFieldOrderingWithHttpInfo(String schema, ReorderFieldsDto reorderFieldsDto) throws ApiException {
        okhttp3.Call localVarCall = putSchemaFieldOrderingValidateBeforeCall(schema, reorderFieldsDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putSchemaFieldOrderingAsync(String schema, ReorderFieldsDto reorderFieldsDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSchemaFieldOrderingValidateBeforeCall(schema, reorderFieldsDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsPutSchemaFieldOrderingRequest {
        private final String schema;
        private final ReorderFieldsDto reorderFieldsDto;

        private APIschemaFieldsPutSchemaFieldOrderingRequest(String schema, ReorderFieldsDto reorderFieldsDto) {
            this.schema = schema;
            this.reorderFieldsDto = reorderFieldsDto;
        }

        /**
         * Build call for putSchemaFieldOrdering
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putSchemaFieldOrderingCall(schema, reorderFieldsDto, _callback);
        }

        /**
         * Execute putSchemaFieldOrdering request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putSchemaFieldOrderingWithHttpInfo(schema, reorderFieldsDto);
            return localVarResp.getData();
        }

        /**
         * Execute putSchemaFieldOrdering request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putSchemaFieldOrderingWithHttpInfo(schema, reorderFieldsDto);
        }

        /**
         * Execute putSchemaFieldOrdering request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putSchemaFieldOrderingAsync(schema, reorderFieldsDto, _callback);
        }
    }

    /**
     * Reorder all fields.
     * 
     * @param schema The name of the schema. (required)
     * @param reorderFieldsDto The request that contains the field ids. (required)
     * @return APIschemaFieldsPutSchemaFieldOrderingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema fields reordered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsPutSchemaFieldOrderingRequest putSchemaFieldOrdering(String schema, ReorderFieldsDto reorderFieldsDto) {
        return new APIschemaFieldsPutSchemaFieldOrderingRequest(schema, reorderFieldsDto);
    }
    private okhttp3.Call putSchemaUIFieldsCall(String schema, ConfigureUIFieldsDto configureUIFieldsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configureUIFieldsDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/ui"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSchemaUIFieldsValidateBeforeCall(String schema, ConfigureUIFieldsDto configureUIFieldsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'configureUIFieldsDto' is set
        if (configureUIFieldsDto == null) {
            throw new ApiException("Missing the required parameter 'configureUIFieldsDto' when calling (Async)");
        }

        return putSchemaUIFieldsCall(schema, configureUIFieldsDto, _callback);

    }


    private ApiResponse<SchemaDto> putSchemaUIFieldsWithHttpInfo(String schema, ConfigureUIFieldsDto configureUIFieldsDto) throws ApiException {
        okhttp3.Call localVarCall = putSchemaUIFieldsValidateBeforeCall(schema, configureUIFieldsDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putSchemaUIFieldsAsync(String schema, ConfigureUIFieldsDto configureUIFieldsDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSchemaUIFieldsValidateBeforeCall(schema, configureUIFieldsDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsPutSchemaUIFieldsRequest {
        private final String schema;
        private final ConfigureUIFieldsDto configureUIFieldsDto;

        private APIschemaFieldsPutSchemaUIFieldsRequest(String schema, ConfigureUIFieldsDto configureUIFieldsDto) {
            this.schema = schema;
            this.configureUIFieldsDto = configureUIFieldsDto;
        }

        /**
         * Build call for putSchemaUIFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema UI fields defined. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putSchemaUIFieldsCall(schema, configureUIFieldsDto, _callback);
        }

        /**
         * Execute putSchemaUIFields request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema UI fields defined. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putSchemaUIFieldsWithHttpInfo(schema, configureUIFieldsDto);
            return localVarResp.getData();
        }

        /**
         * Execute putSchemaUIFields request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema UI fields defined. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putSchemaUIFieldsWithHttpInfo(schema, configureUIFieldsDto);
        }

        /**
         * Execute putSchemaUIFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema UI fields defined. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putSchemaUIFieldsAsync(schema, configureUIFieldsDto, _callback);
        }
    }

    /**
     * Configure UI fields.
     * 
     * @param schema The name of the schema. (required)
     * @param configureUIFieldsDto The request that contains the field names. (required)
     * @return APIschemaFieldsPutSchemaUIFieldsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema UI fields defined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsPutSchemaUIFieldsRequest putSchemaUIFields(String schema, ConfigureUIFieldsDto configureUIFieldsDto) {
        return new APIschemaFieldsPutSchemaUIFieldsRequest(schema, configureUIFieldsDto);
    }
    private okhttp3.Call showFieldCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{id}/show"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFieldValidateBeforeCall(String schema, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return showFieldCall(schema, id, _callback);

    }


    private ApiResponse<SchemaDto> showFieldWithHttpInfo(String schema, Long id) throws ApiException {
        okhttp3.Call localVarCall = showFieldValidateBeforeCall(schema, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showFieldAsync(String schema, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFieldValidateBeforeCall(schema, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsShowFieldRequest {
        private final String schema;
        private final Long id;

        private APIschemaFieldsShowFieldRequest(String schema, Long id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Build call for showField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showFieldCall(schema, id, _callback);
        }

        /**
         * Execute showField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = showFieldWithHttpInfo(schema, id);
            return localVarResp.getData();
        }

        /**
         * Execute showField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return showFieldWithHttpInfo(schema, id);
        }

        /**
         * Execute showField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return showFieldAsync(schema, id, _callback);
        }
    }

    /**
     * Show a schema field.
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @param schema The name of the schema. (required)
     * @param id The ID of the field to show. (required)
     * @return APIschemaFieldsShowFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsShowFieldRequest showField(String schema, Long id) {
        return new APIschemaFieldsShowFieldRequest(schema, id);
    }
    private okhttp3.Call showNestedFieldCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/show"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "parentId" + "}", localVarApiClient.escapeString(parentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNestedFieldValidateBeforeCall(String schema, Long parentId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return showNestedFieldCall(schema, parentId, id, _callback);

    }


    private ApiResponse<SchemaDto> showNestedFieldWithHttpInfo(String schema, Long parentId, Long id) throws ApiException {
        okhttp3.Call localVarCall = showNestedFieldValidateBeforeCall(schema, parentId, id, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showNestedFieldAsync(String schema, Long parentId, Long id, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNestedFieldValidateBeforeCall(schema, parentId, id, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemaFieldsShowNestedFieldRequest {
        private final String schema;
        private final Long parentId;
        private final Long id;

        private APIschemaFieldsShowNestedFieldRequest(String schema, Long parentId, Long id) {
            this.schema = schema;
            this.parentId = parentId;
            this.id = id;
        }

        /**
         * Build call for showNestedField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showNestedFieldCall(schema, parentId, id, _callback);
        }

        /**
         * Execute showNestedField request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = showNestedFieldWithHttpInfo(schema, parentId, id);
            return localVarResp.getData();
        }

        /**
         * Execute showNestedField request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return showNestedFieldWithHttpInfo(schema, parentId, id);
        }

        /**
         * Execute showNestedField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return showNestedFieldAsync(schema, parentId, id, _callback);
        }
    }

    /**
     * Show a nested field.
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @param schema The name of the schema. (required)
     * @param parentId The parent field id. (required)
     * @param id The ID of the field to show. (required)
     * @return APIschemaFieldsShowNestedFieldRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema field shown. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema field request not valid or field locked. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema, field or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemaFieldsShowNestedFieldRequest showNestedField(String schema, Long parentId, Long id) {
        return new APIschemaFieldsShowNestedFieldRequest(schema, parentId, id);
    }
    private okhttp3.Call deleteSchemaCall(String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemaValidateBeforeCall(String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        return deleteSchemaCall(schema, _callback);

    }


    private ApiResponse<Void> deleteSchemaWithHttpInfo(String schema) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemaValidateBeforeCall(schema, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSchemaAsync(String schema, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemaValidateBeforeCall(schema, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIschemasDeleteSchemaRequest {
        private final String schema;

        private APIschemasDeleteSchemaRequest(String schema) {
            this.schema = schema;
        }

        /**
         * Build call for deleteSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Schema deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemaCall(schema, _callback);
        }

        /**
         * Execute deleteSchema request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Schema deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSchemaWithHttpInfo(schema);
        }

        /**
         * Execute deleteSchema request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Schema deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSchemaWithHttpInfo(schema);
        }

        /**
         * Execute deleteSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Schema deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSchemaAsync(schema, _callback);
        }
    }

    /**
     * Delete a schema.
     * 
     * @param schema The name of the schema to delete. (required)
     * @return APIschemasDeleteSchemaRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Schema deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasDeleteSchemaRequest deleteSchema(String schema) {
        return new APIschemasDeleteSchemaRequest(schema);
    }
    private okhttp3.Call getSchemaCall(String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaValidateBeforeCall(String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        return getSchemaCall(schema, _callback);

    }


    private ApiResponse<SchemaDto> getSchemaWithHttpInfo(String schema) throws ApiException {
        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(schema, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemaAsync(String schema, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(schema, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasGetSchemaRequest {
        private final String schema;

        private APIschemasGetSchemaRequest(String schema) {
            this.schema = schema;
        }

        /**
         * Build call for getSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema found. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemaCall(schema, _callback);
        }

        /**
         * Execute getSchema request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema found. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = getSchemaWithHttpInfo(schema);
            return localVarResp.getData();
        }

        /**
         * Execute getSchema request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema found. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return getSchemaWithHttpInfo(schema);
        }

        /**
         * Execute getSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema found. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return getSchemaAsync(schema, _callback);
        }
    }

    /**
     * Get a schema by name.
     * 
     * @param schema The name of the schema to retrieve. (required)
     * @return APIschemasGetSchemaRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasGetSchemaRequest getSchema(String schema) {
        return new APIschemasGetSchemaRequest(schema);
    }
    private okhttp3.Call getSchemasCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemasValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSchemasCall(_callback);

    }


    private ApiResponse<SchemasDto> getSchemasWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSchemasValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SchemasDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemasAsync(final ApiCallback<SchemasDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemasValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SchemasDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasGetSchemasRequest {

        private APIschemasGetSchemasRequest() {
        }

        /**
         * Build call for getSchemas
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schemas returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemasCall(_callback);
        }

        /**
         * Execute getSchemas request
         * @return SchemasDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schemas returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemasDto execute() throws ApiException {
            ApiResponse<SchemasDto> localVarResp = getSchemasWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getSchemas request with HTTP info returned
         * @return ApiResponse&lt;SchemasDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schemas returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemasDto> executeWithHttpInfo() throws ApiException {
            return getSchemasWithHttpInfo();
        }

        /**
         * Execute getSchemas request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schemas returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemasDto> _callback) throws ApiException {
            return getSchemasAsync(_callback);
        }
    }

    /**
     * Get schemas.
     * 
     * @return APIschemasGetSchemasRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schemas returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasGetSchemasRequest getSchemas() {
        return new APIschemasGetSchemasRequest();
    }
    private okhttp3.Call postSchemaCall(CreateSchemaDto createSchemaDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSchemaDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSchemaValidateBeforeCall(CreateSchemaDto createSchemaDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSchemaDto' is set
        if (createSchemaDto == null) {
            throw new ApiException("Missing the required parameter 'createSchemaDto' when calling (Async)");
        }

        return postSchemaCall(createSchemaDto, _callback);

    }


    private ApiResponse<SchemaDto> postSchemaWithHttpInfo(CreateSchemaDto createSchemaDto) throws ApiException {
        okhttp3.Call localVarCall = postSchemaValidateBeforeCall(createSchemaDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postSchemaAsync(CreateSchemaDto createSchemaDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSchemaValidateBeforeCall(createSchemaDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasPostSchemaRequest {
        private final CreateSchemaDto createSchemaDto;

        private APIschemasPostSchemaRequest(CreateSchemaDto createSchemaDto) {
            this.createSchemaDto = createSchemaDto;
        }

        /**
         * Build call for postSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema name already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postSchemaCall(createSchemaDto, _callback);
        }

        /**
         * Execute postSchema request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema name already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = postSchemaWithHttpInfo(createSchemaDto);
            return localVarResp.getData();
        }

        /**
         * Execute postSchema request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema name already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return postSchemaWithHttpInfo(createSchemaDto);
        }

        /**
         * Execute postSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Schema created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Schema name already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return postSchemaAsync(createSchemaDto, _callback);
        }
    }

    /**
     * Create a new schema.
     * 
     * @param createSchemaDto The schema object that needs to be added to the app. (required)
     * @return APIschemasPostSchemaRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Schema created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Schema name already in use. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasPostSchemaRequest postSchema(CreateSchemaDto createSchemaDto) {
        return new APIschemasPostSchemaRequest(createSchemaDto);
    }
    private okhttp3.Call publishSchemaCall(String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/publish"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishSchemaValidateBeforeCall(String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        return publishSchemaCall(schema, _callback);

    }


    private ApiResponse<SchemaDto> publishSchemaWithHttpInfo(String schema) throws ApiException {
        okhttp3.Call localVarCall = publishSchemaValidateBeforeCall(schema, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call publishSchemaAsync(String schema, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishSchemaValidateBeforeCall(schema, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasPublishSchemaRequest {
        private final String schema;

        private APIschemasPublishSchemaRequest(String schema) {
            this.schema = schema;
        }

        /**
         * Build call for publishSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema published. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return publishSchemaCall(schema, _callback);
        }

        /**
         * Execute publishSchema request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema published. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = publishSchemaWithHttpInfo(schema);
            return localVarResp.getData();
        }

        /**
         * Execute publishSchema request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema published. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return publishSchemaWithHttpInfo(schema);
        }

        /**
         * Execute publishSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema published. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return publishSchemaAsync(schema, _callback);
        }
    }

    /**
     * Publish a schema.
     * 
     * @param schema The name of the schema to publish. (required)
     * @return APIschemasPublishSchemaRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema published. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasPublishSchemaRequest publishSchema(String schema) {
        return new APIschemasPublishSchemaRequest(schema);
    }
    private okhttp3.Call putCategoryCall(String schema, ChangeCategoryDto changeCategoryDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeCategoryDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/category"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCategoryValidateBeforeCall(String schema, ChangeCategoryDto changeCategoryDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'changeCategoryDto' is set
        if (changeCategoryDto == null) {
            throw new ApiException("Missing the required parameter 'changeCategoryDto' when calling (Async)");
        }

        return putCategoryCall(schema, changeCategoryDto, _callback);

    }


    private ApiResponse<SchemaDto> putCategoryWithHttpInfo(String schema, ChangeCategoryDto changeCategoryDto) throws ApiException {
        okhttp3.Call localVarCall = putCategoryValidateBeforeCall(schema, changeCategoryDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putCategoryAsync(String schema, ChangeCategoryDto changeCategoryDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCategoryValidateBeforeCall(schema, changeCategoryDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasPutCategoryRequest {
        private final String schema;
        private final ChangeCategoryDto changeCategoryDto;

        private APIschemasPutCategoryRequest(String schema, ChangeCategoryDto changeCategoryDto) {
            this.schema = schema;
            this.changeCategoryDto = changeCategoryDto;
        }

        /**
         * Build call for putCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putCategoryCall(schema, changeCategoryDto, _callback);
        }

        /**
         * Execute putCategory request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putCategoryWithHttpInfo(schema, changeCategoryDto);
            return localVarResp.getData();
        }

        /**
         * Execute putCategory request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putCategoryWithHttpInfo(schema, changeCategoryDto);
        }

        /**
         * Execute putCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putCategoryAsync(schema, changeCategoryDto, _callback);
        }
    }

    /**
     * Update a schema category.
     * 
     * @param schema The name of the schema. (required)
     * @param changeCategoryDto The schema object that needs to updated. (required)
     * @return APIschemasPutCategoryRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasPutCategoryRequest putCategory(String schema, ChangeCategoryDto changeCategoryDto) {
        return new APIschemasPutCategoryRequest(schema, changeCategoryDto);
    }
    private okhttp3.Call putPreviewUrlsCall(String schema, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/preview-urls"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPreviewUrlsValidateBeforeCall(String schema, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling (Async)");
        }

        return putPreviewUrlsCall(schema, requestBody, _callback);

    }


    private ApiResponse<SchemaDto> putPreviewUrlsWithHttpInfo(String schema, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = putPreviewUrlsValidateBeforeCall(schema, requestBody, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putPreviewUrlsAsync(String schema, Map<String, String> requestBody, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPreviewUrlsValidateBeforeCall(schema, requestBody, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasPutPreviewUrlsRequest {
        private final String schema;
        private final Map<String, String> requestBody;

        private APIschemasPutPreviewUrlsRequest(String schema, Map<String, String> requestBody) {
            this.schema = schema;
            this.requestBody = requestBody;
        }

        /**
         * Build call for putPreviewUrls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putPreviewUrlsCall(schema, requestBody, _callback);
        }

        /**
         * Execute putPreviewUrls request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putPreviewUrlsWithHttpInfo(schema, requestBody);
            return localVarResp.getData();
        }

        /**
         * Execute putPreviewUrls request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putPreviewUrlsWithHttpInfo(schema, requestBody);
        }

        /**
         * Execute putPreviewUrls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putPreviewUrlsAsync(schema, requestBody, _callback);
        }
    }

    /**
     * Update the preview urls.
     * 
     * @param schema The name of the schema. (required)
     * @param requestBody The preview urls for the schema. (required)
     * @return APIschemasPutPreviewUrlsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasPutPreviewUrlsRequest putPreviewUrls(String schema, Map<String, String> requestBody) {
        return new APIschemasPutPreviewUrlsRequest(schema, requestBody);
    }
    private okhttp3.Call putRulesCall(String schema, ConfigureFieldRulesDto configureFieldRulesDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configureFieldRulesDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/rules"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRulesValidateBeforeCall(String schema, ConfigureFieldRulesDto configureFieldRulesDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'configureFieldRulesDto' is set
        if (configureFieldRulesDto == null) {
            throw new ApiException("Missing the required parameter 'configureFieldRulesDto' when calling (Async)");
        }

        return putRulesCall(schema, configureFieldRulesDto, _callback);

    }


    private ApiResponse<SchemaDto> putRulesWithHttpInfo(String schema, ConfigureFieldRulesDto configureFieldRulesDto) throws ApiException {
        okhttp3.Call localVarCall = putRulesValidateBeforeCall(schema, configureFieldRulesDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putRulesAsync(String schema, ConfigureFieldRulesDto configureFieldRulesDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRulesValidateBeforeCall(schema, configureFieldRulesDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasPutRulesRequest {
        private final String schema;
        private final ConfigureFieldRulesDto configureFieldRulesDto;

        private APIschemasPutRulesRequest(String schema, ConfigureFieldRulesDto configureFieldRulesDto) {
            this.schema = schema;
            this.configureFieldRulesDto = configureFieldRulesDto;
        }

        /**
         * Build call for putRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putRulesCall(schema, configureFieldRulesDto, _callback);
        }

        /**
         * Execute putRules request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putRulesWithHttpInfo(schema, configureFieldRulesDto);
            return localVarResp.getData();
        }

        /**
         * Execute putRules request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putRulesWithHttpInfo(schema, configureFieldRulesDto);
        }

        /**
         * Execute putRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putRulesAsync(schema, configureFieldRulesDto, _callback);
        }
    }

    /**
     * Update the rules.
     * 
     * @param schema The name of the schema. (required)
     * @param configureFieldRulesDto The schema rules object that needs to updated. (required)
     * @return APIschemasPutRulesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasPutRulesRequest putRules(String schema, ConfigureFieldRulesDto configureFieldRulesDto) {
        return new APIschemasPutRulesRequest(schema, configureFieldRulesDto);
    }
    private okhttp3.Call putSchemaCall(String schema, UpdateSchemaDto updateSchemaDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSchemaDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSchemaValidateBeforeCall(String schema, UpdateSchemaDto updateSchemaDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'updateSchemaDto' is set
        if (updateSchemaDto == null) {
            throw new ApiException("Missing the required parameter 'updateSchemaDto' when calling (Async)");
        }

        return putSchemaCall(schema, updateSchemaDto, _callback);

    }


    private ApiResponse<SchemaDto> putSchemaWithHttpInfo(String schema, UpdateSchemaDto updateSchemaDto) throws ApiException {
        okhttp3.Call localVarCall = putSchemaValidateBeforeCall(schema, updateSchemaDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putSchemaAsync(String schema, UpdateSchemaDto updateSchemaDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSchemaValidateBeforeCall(schema, updateSchemaDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasPutSchemaRequest {
        private final String schema;
        private final UpdateSchemaDto updateSchemaDto;

        private APIschemasPutSchemaRequest(String schema, UpdateSchemaDto updateSchemaDto) {
            this.schema = schema;
            this.updateSchemaDto = updateSchemaDto;
        }

        /**
         * Build call for putSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putSchemaCall(schema, updateSchemaDto, _callback);
        }

        /**
         * Execute putSchema request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putSchemaWithHttpInfo(schema, updateSchemaDto);
            return localVarResp.getData();
        }

        /**
         * Execute putSchema request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putSchemaWithHttpInfo(schema, updateSchemaDto);
        }

        /**
         * Execute putSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putSchemaAsync(schema, updateSchemaDto, _callback);
        }
    }

    /**
     * Update a schema.
     * 
     * @param schema The name of the schema. (required)
     * @param updateSchemaDto The schema object that needs to updated. (required)
     * @return APIschemasPutSchemaRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasPutSchemaRequest putSchema(String schema, UpdateSchemaDto updateSchemaDto) {
        return new APIschemasPutSchemaRequest(schema, updateSchemaDto);
    }
    private okhttp3.Call putSchemaSyncCall(String schema, SynchronizeSchemaDto synchronizeSchemaDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = synchronizeSchemaDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/sync"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSchemaSyncValidateBeforeCall(String schema, SynchronizeSchemaDto synchronizeSchemaDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'synchronizeSchemaDto' is set
        if (synchronizeSchemaDto == null) {
            throw new ApiException("Missing the required parameter 'synchronizeSchemaDto' when calling (Async)");
        }

        return putSchemaSyncCall(schema, synchronizeSchemaDto, _callback);

    }


    private ApiResponse<SchemaDto> putSchemaSyncWithHttpInfo(String schema, SynchronizeSchemaDto synchronizeSchemaDto) throws ApiException {
        okhttp3.Call localVarCall = putSchemaSyncValidateBeforeCall(schema, synchronizeSchemaDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putSchemaSyncAsync(String schema, SynchronizeSchemaDto synchronizeSchemaDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSchemaSyncValidateBeforeCall(schema, synchronizeSchemaDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasPutSchemaSyncRequest {
        private final String schema;
        private final SynchronizeSchemaDto synchronizeSchemaDto;

        private APIschemasPutSchemaSyncRequest(String schema, SynchronizeSchemaDto synchronizeSchemaDto) {
            this.schema = schema;
            this.synchronizeSchemaDto = synchronizeSchemaDto;
        }

        /**
         * Build call for putSchemaSync
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putSchemaSyncCall(schema, synchronizeSchemaDto, _callback);
        }

        /**
         * Execute putSchemaSync request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putSchemaSyncWithHttpInfo(schema, synchronizeSchemaDto);
            return localVarResp.getData();
        }

        /**
         * Execute putSchemaSync request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putSchemaSyncWithHttpInfo(schema, synchronizeSchemaDto);
        }

        /**
         * Execute putSchemaSync request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putSchemaSyncAsync(schema, synchronizeSchemaDto, _callback);
        }
    }

    /**
     * Synchronize a schema.
     * 
     * @param schema The name of the schema. (required)
     * @param synchronizeSchemaDto The schema object that needs to updated. (required)
     * @return APIschemasPutSchemaSyncRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasPutSchemaSyncRequest putSchemaSync(String schema, SynchronizeSchemaDto synchronizeSchemaDto) {
        return new APIschemasPutSchemaSyncRequest(schema, synchronizeSchemaDto);
    }
    private okhttp3.Call putScriptsCall(String schema, SchemaScriptsDto schemaScriptsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schemaScriptsDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/scripts"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putScriptsValidateBeforeCall(String schema, SchemaScriptsDto schemaScriptsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'schemaScriptsDto' is set
        if (schemaScriptsDto == null) {
            throw new ApiException("Missing the required parameter 'schemaScriptsDto' when calling (Async)");
        }

        return putScriptsCall(schema, schemaScriptsDto, _callback);

    }


    private ApiResponse<SchemaDto> putScriptsWithHttpInfo(String schema, SchemaScriptsDto schemaScriptsDto) throws ApiException {
        okhttp3.Call localVarCall = putScriptsValidateBeforeCall(schema, schemaScriptsDto, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putScriptsAsync(String schema, SchemaScriptsDto schemaScriptsDto, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putScriptsValidateBeforeCall(schema, schemaScriptsDto, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasPutScriptsRequest {
        private final String schema;
        private final SchemaScriptsDto schemaScriptsDto;

        private APIschemasPutScriptsRequest(String schema, SchemaScriptsDto schemaScriptsDto) {
            this.schema = schema;
            this.schemaScriptsDto = schemaScriptsDto;
        }

        /**
         * Build call for putScripts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putScriptsCall(schema, schemaScriptsDto, _callback);
        }

        /**
         * Execute putScripts request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = putScriptsWithHttpInfo(schema, schemaScriptsDto);
            return localVarResp.getData();
        }

        /**
         * Execute putScripts request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return putScriptsWithHttpInfo(schema, schemaScriptsDto);
        }

        /**
         * Execute putScripts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return putScriptsAsync(schema, schemaScriptsDto, _callback);
        }
    }

    /**
     * Update the scripts.
     * 
     * @param schema The name of the schema. (required)
     * @param schemaScriptsDto The schema scripts object that needs to updated. (required)
     * @return APIschemasPutScriptsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Schema request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasPutScriptsRequest putScripts(String schema, SchemaScriptsDto schemaScriptsDto) {
        return new APIschemasPutScriptsRequest(schema, schemaScriptsDto);
    }
    private okhttp3.Call unpublishSchemaCall(String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/schemas/{schema}/unpublish"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublishSchemaValidateBeforeCall(String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        return unpublishSchemaCall(schema, _callback);

    }


    private ApiResponse<SchemaDto> unpublishSchemaWithHttpInfo(String schema) throws ApiException {
        okhttp3.Call localVarCall = unpublishSchemaValidateBeforeCall(schema, null);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unpublishSchemaAsync(String schema, final ApiCallback<SchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublishSchemaValidateBeforeCall(schema, _callback);
        Type localVarReturnType = new TypeToken<SchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIschemasUnpublishSchemaRequest {
        private final String schema;

        private APIschemasUnpublishSchemaRequest(String schema) {
            this.schema = schema;
        }

        /**
         * Build call for unpublishSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema unpublished. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unpublishSchemaCall(schema, _callback);
        }

        /**
         * Execute unpublishSchema request
         * @return SchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema unpublished. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public SchemaDto execute() throws ApiException {
            ApiResponse<SchemaDto> localVarResp = unpublishSchemaWithHttpInfo(schema);
            return localVarResp.getData();
        }

        /**
         * Execute unpublishSchema request with HTTP info returned
         * @return ApiResponse&lt;SchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema unpublished. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchemaDto> executeWithHttpInfo() throws ApiException {
            return unpublishSchemaWithHttpInfo(schema);
        }

        /**
         * Execute unpublishSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Schema unpublished. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchemaDto> _callback) throws ApiException {
            return unpublishSchemaAsync(schema, _callback);
        }
    }

    /**
     * Unpublish a schema.
     * 
     * @param schema The name of the schema to unpublish. (required)
     * @return APIschemasUnpublishSchemaRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Schema unpublished. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIschemasUnpublishSchemaRequest unpublishSchema(String schema) {
        return new APIschemasUnpublishSchemaRequest(schema);
    }
}
