/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.AssignContributorDto;
import com.squidex.api.types.AuthSchemeResponseDto;
import com.squidex.api.types.AuthSchemeValueDto;
import com.squidex.api.types.ContributorsDto;
import com.squidex.api.types.CreateTeamDto;
import com.squidex.api.types.ErrorDto;
import com.squidex.api.types.TeamDto;
import com.squidex.api.types.UpdateTeamDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteContributorCall(String team, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/contributors/{id}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContributorValidateBeforeCall(String team, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteContributorCall(team, id, _callback);

    }


    private ApiResponse<ContributorsDto> deleteContributorWithHttpInfo(String team, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteContributorValidateBeforeCall(team, id, null);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteContributorAsync(String team, String id, final ApiCallback<ContributorsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContributorValidateBeforeCall(team, id, _callback);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamContributorsDeleteContributorRequest {
        private final String team;
        private final String id;

        private APIteamContributorsDeleteContributorRequest(String team, String id) {
            this.team = team;
            this.id = id;
        }

        /**
         * Build call for deleteContributor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContributorCall(team, id, _callback);
        }

        /**
         * Execute deleteContributor request
         * @return ContributorsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContributorsDto execute() throws ApiException {
            ApiResponse<ContributorsDto> localVarResp = deleteContributorWithHttpInfo(team, id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteContributor request with HTTP info returned
         * @return ApiResponse&lt;ContributorsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContributorsDto> executeWithHttpInfo() throws ApiException {
            return deleteContributorWithHttpInfo(team, id);
        }

        /**
         * Execute deleteContributor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {
            return deleteContributorAsync(team, id, _callback);
        }
    }

    /**
     * Remove contributor.
     * 
     * @param team The ID of the team. (required)
     * @param id The ID of the contributor. (required)
     * @return APIteamContributorsDeleteContributorRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamContributorsDeleteContributorRequest deleteContributor(String team, String id) {
        return new APIteamContributorsDeleteContributorRequest(team, id);
    }
    private okhttp3.Call deleteMyselfCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/contributors/me"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMyselfValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        return deleteMyselfCall(team, _callback);

    }


    private ApiResponse<ContributorsDto> deleteMyselfWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = deleteMyselfValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteMyselfAsync(String team, final ApiCallback<ContributorsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMyselfValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamContributorsDeleteMyselfRequest {
        private final String team;

        private APIteamContributorsDeleteMyselfRequest(String team) {
            this.team = team;
        }

        /**
         * Build call for deleteMyself
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMyselfCall(team, _callback);
        }

        /**
         * Execute deleteMyself request
         * @return ContributorsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContributorsDto execute() throws ApiException {
            ApiResponse<ContributorsDto> localVarResp = deleteMyselfWithHttpInfo(team);
            return localVarResp.getData();
        }

        /**
         * Execute deleteMyself request with HTTP info returned
         * @return ApiResponse&lt;ContributorsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContributorsDto> executeWithHttpInfo() throws ApiException {
            return deleteMyselfWithHttpInfo(team);
        }

        /**
         * Execute deleteMyself request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {
            return deleteMyselfAsync(team, _callback);
        }
    }

    /**
     * Remove yourself.
     * 
     * @param team The ID of the team. (required)
     * @return APIteamContributorsDeleteMyselfRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contributor or team not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamContributorsDeleteMyselfRequest deleteMyself(String team) {
        return new APIteamContributorsDeleteMyselfRequest(team);
    }
    private okhttp3.Call getContributorsCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/contributors"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContributorsValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        return getContributorsCall(team, _callback);

    }


    private ApiResponse<ContributorsDto> getContributorsWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = getContributorsValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContributorsAsync(String team, final ApiCallback<ContributorsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContributorsValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamContributorsGetContributorsRequest {
        private final String team;

        private APIteamContributorsGetContributorsRequest(String team) {
            this.team = team;
        }

        /**
         * Build call for getContributors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContributorsCall(team, _callback);
        }

        /**
         * Execute getContributors request
         * @return ContributorsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContributorsDto execute() throws ApiException {
            ApiResponse<ContributorsDto> localVarResp = getContributorsWithHttpInfo(team);
            return localVarResp.getData();
        }

        /**
         * Execute getContributors request with HTTP info returned
         * @return ApiResponse&lt;ContributorsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContributorsDto> executeWithHttpInfo() throws ApiException {
            return getContributorsWithHttpInfo(team);
        }

        /**
         * Execute getContributors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {
            return getContributorsAsync(team, _callback);
        }
    }

    /**
     * Get team contributors.
     * 
     * @param team The ID of the team. (required)
     * @return APIteamContributorsGetContributorsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamContributorsGetContributorsRequest getContributors(String team) {
        return new APIteamContributorsGetContributorsRequest(team);
    }
    private okhttp3.Call postContributorCall(String team, AssignContributorDto assignContributorDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignContributorDto;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/contributors"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContributorValidateBeforeCall(String team, AssignContributorDto assignContributorDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        // verify the required parameter 'assignContributorDto' is set
        if (assignContributorDto == null) {
            throw new ApiException("Missing the required parameter 'assignContributorDto' when calling (Async)");
        }

        return postContributorCall(team, assignContributorDto, _callback);

    }


    private ApiResponse<ContributorsDto> postContributorWithHttpInfo(String team, AssignContributorDto assignContributorDto) throws ApiException {
        okhttp3.Call localVarCall = postContributorValidateBeforeCall(team, assignContributorDto, null);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postContributorAsync(String team, AssignContributorDto assignContributorDto, final ApiCallback<ContributorsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postContributorValidateBeforeCall(team, assignContributorDto, _callback);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamContributorsPostContributorRequest {
        private final String team;
        private final AssignContributorDto assignContributorDto;

        private APIteamContributorsPostContributorRequest(String team, AssignContributorDto assignContributorDto) {
            this.team = team;
            this.assignContributorDto = assignContributorDto;
        }

        /**
         * Build call for postContributor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Contributor assigned to team. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postContributorCall(team, assignContributorDto, _callback);
        }

        /**
         * Execute postContributor request
         * @return ContributorsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Contributor assigned to team. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContributorsDto execute() throws ApiException {
            ApiResponse<ContributorsDto> localVarResp = postContributorWithHttpInfo(team, assignContributorDto);
            return localVarResp.getData();
        }

        /**
         * Execute postContributor request with HTTP info returned
         * @return ApiResponse&lt;ContributorsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Contributor assigned to team. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContributorsDto> executeWithHttpInfo() throws ApiException {
            return postContributorWithHttpInfo(team, assignContributorDto);
        }

        /**
         * Execute postContributor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Contributor assigned to team. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {
            return postContributorAsync(team, assignContributorDto, _callback);
        }
    }

    /**
     * Assign contributor to team.
     * 
     * @param team The ID of the team. (required)
     * @param assignContributorDto Contributor object that needs to be added to the team. (required)
     * @return APIteamContributorsPostContributorRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Contributor assigned to team. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamContributorsPostContributorRequest postContributor(String team, AssignContributorDto assignContributorDto) {
        return new APIteamContributorsPostContributorRequest(team, assignContributorDto);
    }
    private okhttp3.Call deleteTeamCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeamValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        return deleteTeamCall(team, _callback);

    }


    private ApiResponse<Void> deleteTeamWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = deleteTeamValidateBeforeCall(team, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTeamAsync(String team, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeamValidateBeforeCall(team, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIteamsDeleteTeamRequest {
        private final String team;

        private APIteamsDeleteTeamRequest(String team) {
            this.team = team;
        }

        /**
         * Build call for deleteTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTeamCall(team, _callback);
        }

        /**
         * Execute deleteTeam request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTeamWithHttpInfo(team);
        }

        /**
         * Execute deleteTeam request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTeamWithHttpInfo(team);
        }

        /**
         * Execute deleteTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTeamAsync(team, _callback);
        }
    }

    /**
     * Delete the team.
     * 
     * @param team The ID of the team to delete. (required)
     * @return APIteamsDeleteTeamRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Team deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamsDeleteTeamRequest deleteTeam(String team) {
        return new APIteamsDeleteTeamRequest(team);
    }
    private okhttp3.Call getTeamCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        return getTeamCall(team, _callback);

    }


    private ApiResponse<TeamDto> getTeamWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = getTeamValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<TeamDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamAsync(String team, final ApiCallback<TeamDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<TeamDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamsGetTeamRequest {
        private final String team;

        private APIteamsGetTeamRequest(String team) {
            this.team = team;
        }

        /**
         * Build call for getTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamCall(team, _callback);
        }

        /**
         * Execute getTeam request
         * @return TeamDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public TeamDto execute() throws ApiException {
            ApiResponse<TeamDto> localVarResp = getTeamWithHttpInfo(team);
            return localVarResp.getData();
        }

        /**
         * Execute getTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamDto> executeWithHttpInfo() throws ApiException {
            return getTeamWithHttpInfo(team);
        }

        /**
         * Execute getTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamDto> _callback) throws ApiException {
            return getTeamAsync(team, _callback);
        }
    }

    /**
     * Get an team by ID.
     * 
     * @param team The ID of the team. (required)
     * @return APIteamsGetTeamRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamsGetTeamRequest getTeam(String team) {
        return new APIteamsGetTeamRequest(team);
    }
    private okhttp3.Call getTeamAuthCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/auth"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamAuthValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        return getTeamAuthCall(team, _callback);

    }


    private ApiResponse<AuthSchemeResponseDto> getTeamAuthWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = getTeamAuthValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<AuthSchemeResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamAuthAsync(String team, final ApiCallback<AuthSchemeResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamAuthValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<AuthSchemeResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamsGetTeamAuthRequest {
        private final String team;

        private APIteamsGetTeamAuthRequest(String team) {
            this.team = team;
        }

        /**
         * Build call for getTeamAuth
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamAuthCall(team, _callback);
        }

        /**
         * Execute getTeamAuth request
         * @return AuthSchemeResponseDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AuthSchemeResponseDto execute() throws ApiException {
            ApiResponse<AuthSchemeResponseDto> localVarResp = getTeamAuthWithHttpInfo(team);
            return localVarResp.getData();
        }

        /**
         * Execute getTeamAuth request with HTTP info returned
         * @return ApiResponse&lt;AuthSchemeResponseDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthSchemeResponseDto> executeWithHttpInfo() throws ApiException {
            return getTeamAuthWithHttpInfo(team);
        }

        /**
         * Execute getTeamAuth request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthSchemeResponseDto> _callback) throws ApiException {
            return getTeamAuthAsync(team, _callback);
        }
    }

    /**
     * Get the team auth settings.
     * 
     * @param team The ID of the team. (required)
     * @return APIteamsGetTeamAuthRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamsGetTeamAuthRequest getTeamAuth(String team) {
        return new APIteamsGetTeamAuthRequest(team);
    }
    private okhttp3.Call getTeamsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTeamsCall(_callback);

    }


    private ApiResponse<List<TeamDto>> getTeamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTeamsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TeamDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamsAsync(final ApiCallback<List<TeamDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TeamDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamsGetTeamsRequest {

        private APIteamsGetTeamsRequest() {
        }

        /**
         * Build call for getTeams
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamsCall(_callback);
        }

        /**
         * Execute getTeams request
         * @return List&lt;TeamDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<TeamDto> execute() throws ApiException {
            ApiResponse<List<TeamDto>> localVarResp = getTeamsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTeams request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TeamDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TeamDto>> executeWithHttpInfo() throws ApiException {
            return getTeamsWithHttpInfo();
        }

        /**
         * Execute getTeams request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TeamDto>> _callback) throws ApiException {
            return getTeamsAsync(_callback);
        }
    }

    /**
     * Get your teams.
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * @return APIteamsGetTeamsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams returned. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamsGetTeamsRequest getTeams() {
        return new APIteamsGetTeamsRequest();
    }
    private okhttp3.Call postTeamCall(CreateTeamDto createTeamDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTeamDto;

        // create path and map variables
        String localVarPath = "/api/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTeamValidateBeforeCall(CreateTeamDto createTeamDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTeamDto' is set
        if (createTeamDto == null) {
            throw new ApiException("Missing the required parameter 'createTeamDto' when calling (Async)");
        }

        return postTeamCall(createTeamDto, _callback);

    }


    private ApiResponse<TeamDto> postTeamWithHttpInfo(CreateTeamDto createTeamDto) throws ApiException {
        okhttp3.Call localVarCall = postTeamValidateBeforeCall(createTeamDto, null);
        Type localVarReturnType = new TypeToken<TeamDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postTeamAsync(CreateTeamDto createTeamDto, final ApiCallback<TeamDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTeamValidateBeforeCall(createTeamDto, _callback);
        Type localVarReturnType = new TypeToken<TeamDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamsPostTeamRequest {
        private final CreateTeamDto createTeamDto;

        private APIteamsPostTeamRequest(CreateTeamDto createTeamDto) {
            this.createTeamDto = createTeamDto;
        }

        /**
         * Build call for postTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Team created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postTeamCall(createTeamDto, _callback);
        }

        /**
         * Execute postTeam request
         * @return TeamDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Team created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public TeamDto execute() throws ApiException {
            ApiResponse<TeamDto> localVarResp = postTeamWithHttpInfo(createTeamDto);
            return localVarResp.getData();
        }

        /**
         * Execute postTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Team created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamDto> executeWithHttpInfo() throws ApiException {
            return postTeamWithHttpInfo(createTeamDto);
        }

        /**
         * Execute postTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Team created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamDto> _callback) throws ApiException {
            return postTeamAsync(createTeamDto, _callback);
        }
    }

    /**
     * Create a new team.
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * @param createTeamDto The team object that needs to be added to Squidex. (required)
     * @return APIteamsPostTeamRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamsPostTeamRequest postTeam(CreateTeamDto createTeamDto) {
        return new APIteamsPostTeamRequest(createTeamDto);
    }
    private okhttp3.Call putTeamCall(String team, UpdateTeamDto updateTeamDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTeamDto;

        // create path and map variables
        String localVarPath = "/api/teams/{team}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTeamValidateBeforeCall(String team, UpdateTeamDto updateTeamDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        // verify the required parameter 'updateTeamDto' is set
        if (updateTeamDto == null) {
            throw new ApiException("Missing the required parameter 'updateTeamDto' when calling (Async)");
        }

        return putTeamCall(team, updateTeamDto, _callback);

    }


    private ApiResponse<TeamDto> putTeamWithHttpInfo(String team, UpdateTeamDto updateTeamDto) throws ApiException {
        okhttp3.Call localVarCall = putTeamValidateBeforeCall(team, updateTeamDto, null);
        Type localVarReturnType = new TypeToken<TeamDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putTeamAsync(String team, UpdateTeamDto updateTeamDto, final ApiCallback<TeamDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTeamValidateBeforeCall(team, updateTeamDto, _callback);
        Type localVarReturnType = new TypeToken<TeamDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamsPutTeamRequest {
        private final String team;
        private final UpdateTeamDto updateTeamDto;

        private APIteamsPutTeamRequest(String team, UpdateTeamDto updateTeamDto) {
            this.team = team;
            this.updateTeamDto = updateTeamDto;
        }

        /**
         * Build call for putTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putTeamCall(team, updateTeamDto, _callback);
        }

        /**
         * Execute putTeam request
         * @return TeamDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public TeamDto execute() throws ApiException {
            ApiResponse<TeamDto> localVarResp = putTeamWithHttpInfo(team, updateTeamDto);
            return localVarResp.getData();
        }

        /**
         * Execute putTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamDto> executeWithHttpInfo() throws ApiException {
            return putTeamWithHttpInfo(team, updateTeamDto);
        }

        /**
         * Execute putTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamDto> _callback) throws ApiException {
            return putTeamAsync(team, updateTeamDto, _callback);
        }
    }

    /**
     * Update the team.
     * 
     * @param team The ID of the team to update. (required)
     * @param updateTeamDto The values to update. (required)
     * @return APIteamsPutTeamRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamsPutTeamRequest putTeam(String team, UpdateTeamDto updateTeamDto) {
        return new APIteamsPutTeamRequest(team, updateTeamDto);
    }
    private okhttp3.Call putTeamAuthCall(String team, AuthSchemeValueDto authSchemeValueDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authSchemeValueDto;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/auth"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTeamAuthValidateBeforeCall(String team, AuthSchemeValueDto authSchemeValueDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        // verify the required parameter 'authSchemeValueDto' is set
        if (authSchemeValueDto == null) {
            throw new ApiException("Missing the required parameter 'authSchemeValueDto' when calling (Async)");
        }

        return putTeamAuthCall(team, authSchemeValueDto, _callback);

    }


    private ApiResponse<AuthSchemeResponseDto> putTeamAuthWithHttpInfo(String team, AuthSchemeValueDto authSchemeValueDto) throws ApiException {
        okhttp3.Call localVarCall = putTeamAuthValidateBeforeCall(team, authSchemeValueDto, null);
        Type localVarReturnType = new TypeToken<AuthSchemeResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putTeamAuthAsync(String team, AuthSchemeValueDto authSchemeValueDto, final ApiCallback<AuthSchemeResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTeamAuthValidateBeforeCall(team, authSchemeValueDto, _callback);
        Type localVarReturnType = new TypeToken<AuthSchemeResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamsPutTeamAuthRequest {
        private final String team;
        private final AuthSchemeValueDto authSchemeValueDto;

        private APIteamsPutTeamAuthRequest(String team, AuthSchemeValueDto authSchemeValueDto) {
            this.team = team;
            this.authSchemeValueDto = authSchemeValueDto;
        }

        /**
         * Build call for putTeamAuth
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putTeamAuthCall(team, authSchemeValueDto, _callback);
        }

        /**
         * Execute putTeamAuth request
         * @return AuthSchemeResponseDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AuthSchemeResponseDto execute() throws ApiException {
            ApiResponse<AuthSchemeResponseDto> localVarResp = putTeamAuthWithHttpInfo(team, authSchemeValueDto);
            return localVarResp.getData();
        }

        /**
         * Execute putTeamAuth request with HTTP info returned
         * @return ApiResponse&lt;AuthSchemeResponseDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthSchemeResponseDto> executeWithHttpInfo() throws ApiException {
            return putTeamAuthWithHttpInfo(team, authSchemeValueDto);
        }

        /**
         * Execute putTeamAuth request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthSchemeResponseDto> _callback) throws ApiException {
            return putTeamAuthAsync(team, authSchemeValueDto, _callback);
        }
    }

    /**
     * Update the team auth.
     * 
     * @param team The ID of the team to update. (required)
     * @param authSchemeValueDto The values to update. (required)
     * @return APIteamsPutTeamAuthRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Team request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamsPutTeamAuthRequest putTeamAuth(String team, AuthSchemeValueDto authSchemeValueDto) {
        return new APIteamsPutTeamAuthRequest(team, authSchemeValueDto);
    }
}
