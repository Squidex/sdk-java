/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.AddLanguageDto;
import com.squidex.api.types.AddRoleDto;
import com.squidex.api.types.AddWorkflowDto;
import com.squidex.api.types.AppDto;
import com.squidex.api.types.AppLanguagesDto;
import com.squidex.api.types.AppSettingsDto;
import com.squidex.api.types.AssetScriptsDto;
import com.squidex.api.types.AssignContributorDto;
import com.squidex.api.types.ClientsDto;
import com.squidex.api.types.ContributorsDto;
import com.squidex.api.types.CreateAppDto;
import com.squidex.api.types.CreateClientDto;
import com.squidex.api.types.ErrorDto;
import java.io.File;
import com.squidex.api.types.RolesDto;
import com.squidex.api.types.TransferToTeamDto;
import com.squidex.api.types.UpdateAppDto;
import com.squidex.api.types.UpdateAppSettingsDto;
import com.squidex.api.types.UpdateAssetScriptsDto;
import com.squidex.api.types.UpdateClientDto;
import com.squidex.api.types.UpdateLanguageDto;
import com.squidex.api.types.UpdateRoleDto;
import com.squidex.api.types.UpdateWorkflowDto;
import com.squidex.api.types.WorkflowsDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class AppsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssetScriptsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/scripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetScriptsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAssetScriptsCall(_callback);

    }


    private ApiResponse<AssetScriptsDto> getAssetScriptsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAssetScriptsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AssetScriptsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetScriptsAsync(final ApiCallback<AssetScriptsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetScriptsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AssetScriptsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappAssetsGetAssetScriptsRequest {

        private APIappAssetsGetAssetScriptsRequest() {
        }

        /**
         * Build call for getAssetScripts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset scripts returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetScriptsCall(_callback);
        }

        /**
         * Execute getAssetScripts request
         * @return AssetScriptsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset scripts returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetScriptsDto execute() throws ApiException {
            ApiResponse<AssetScriptsDto> localVarResp = getAssetScriptsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getAssetScripts request with HTTP info returned
         * @return ApiResponse&lt;AssetScriptsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset scripts returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetScriptsDto> executeWithHttpInfo() throws ApiException {
            return getAssetScriptsWithHttpInfo();
        }

        /**
         * Execute getAssetScripts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset scripts returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetScriptsDto> _callback) throws ApiException {
            return getAssetScriptsAsync(_callback);
        }
    }

    /**
     * Get the app asset scripts.
     * 
     * @return APIappAssetsGetAssetScriptsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset scripts returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappAssetsGetAssetScriptsRequest getAssetScripts() {
        return new APIappAssetsGetAssetScriptsRequest();
    }
    private okhttp3.Call putAssetScriptsCall(UpdateAssetScriptsDto updateAssetScriptsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAssetScriptsDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/assets/scripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAssetScriptsValidateBeforeCall(UpdateAssetScriptsDto updateAssetScriptsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAssetScriptsDto' is set
        if (updateAssetScriptsDto == null) {
            throw new ApiException("Missing the required parameter 'updateAssetScriptsDto' when calling (Async)");
        }

        return putAssetScriptsCall(updateAssetScriptsDto, _callback);

    }


    private ApiResponse<AssetScriptsDto> putAssetScriptsWithHttpInfo(UpdateAssetScriptsDto updateAssetScriptsDto) throws ApiException {
        okhttp3.Call localVarCall = putAssetScriptsValidateBeforeCall(updateAssetScriptsDto, null);
        Type localVarReturnType = new TypeToken<AssetScriptsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putAssetScriptsAsync(UpdateAssetScriptsDto updateAssetScriptsDto, final ApiCallback<AssetScriptsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAssetScriptsValidateBeforeCall(updateAssetScriptsDto, _callback);
        Type localVarReturnType = new TypeToken<AssetScriptsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappAssetsPutAssetScriptsRequest {
        private final UpdateAssetScriptsDto updateAssetScriptsDto;

        private APIappAssetsPutAssetScriptsRequest(UpdateAssetScriptsDto updateAssetScriptsDto) {
            this.updateAssetScriptsDto = updateAssetScriptsDto;
        }

        /**
         * Build call for putAssetScripts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset scripts updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putAssetScriptsCall(updateAssetScriptsDto, _callback);
        }

        /**
         * Execute putAssetScripts request
         * @return AssetScriptsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset scripts updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AssetScriptsDto execute() throws ApiException {
            ApiResponse<AssetScriptsDto> localVarResp = putAssetScriptsWithHttpInfo(updateAssetScriptsDto);
            return localVarResp.getData();
        }

        /**
         * Execute putAssetScripts request with HTTP info returned
         * @return ApiResponse&lt;AssetScriptsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset scripts updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetScriptsDto> executeWithHttpInfo() throws ApiException {
            return putAssetScriptsWithHttpInfo(updateAssetScriptsDto);
        }

        /**
         * Execute putAssetScripts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Asset scripts updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetScriptsDto> _callback) throws ApiException {
            return putAssetScriptsAsync(updateAssetScriptsDto, _callback);
        }
    }

    /**
     * Update the asset scripts.
     * 
     * @param updateAssetScriptsDto The values to update. (required)
     * @return APIappAssetsPutAssetScriptsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset scripts updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Asset request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappAssetsPutAssetScriptsRequest putAssetScripts(UpdateAssetScriptsDto updateAssetScriptsDto) {
        return new APIappAssetsPutAssetScriptsRequest(updateAssetScriptsDto);
    }
    private okhttp3.Call deleteClientCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/clients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClientValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteClientCall(id, _callback);

    }


    private ApiResponse<ClientsDto> deleteClientWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteClientValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ClientsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteClientAsync(String id, final ApiCallback<ClientsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClientValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ClientsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappClientsDeleteClientRequest {
        private final String id;

        private APIappClientsDeleteClientRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteClient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Client deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteClientCall(id, _callback);
        }

        /**
         * Execute deleteClient request
         * @return ClientsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Client deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ClientsDto execute() throws ApiException {
            ApiResponse<ClientsDto> localVarResp = deleteClientWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteClient request with HTTP info returned
         * @return ApiResponse&lt;ClientsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Client deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientsDto> executeWithHttpInfo() throws ApiException {
            return deleteClientWithHttpInfo(id);
        }

        /**
         * Execute deleteClient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Client deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientsDto> _callback) throws ApiException {
            return deleteClientAsync(id, _callback);
        }
    }

    /**
     * Revoke an app client.
     * The application that uses this client credentials cannot access the API after it has been revoked.
     * @param id The ID of the client that must be deleted. (required)
     * @return APIappClientsDeleteClientRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappClientsDeleteClientRequest deleteClient(String id) {
        return new APIappClientsDeleteClientRequest(id);
    }
    private okhttp3.Call getClientsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getClientsCall(_callback);

    }


    private ApiResponse<ClientsDto> getClientsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getClientsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClientsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClientsAsync(final ApiCallback<ClientsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClientsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappClientsGetClientsRequest {

        private APIappClientsGetClientsRequest() {
        }

        /**
         * Build call for getClients
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Clients returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClientsCall(_callback);
        }

        /**
         * Execute getClients request
         * @return ClientsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Clients returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ClientsDto execute() throws ApiException {
            ApiResponse<ClientsDto> localVarResp = getClientsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getClients request with HTTP info returned
         * @return ApiResponse&lt;ClientsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Clients returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientsDto> executeWithHttpInfo() throws ApiException {
            return getClientsWithHttpInfo();
        }

        /**
         * Execute getClients request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Clients returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientsDto> _callback) throws ApiException {
            return getClientsAsync(_callback);
        }
    }

    /**
     * Get app clients.
     * Gets all configured clients for the app with the specified name.
     * @return APIappClientsGetClientsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clients returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappClientsGetClientsRequest getClients() {
        return new APIappClientsGetClientsRequest();
    }
    private okhttp3.Call postClientCall(CreateClientDto createClientDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createClientDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postClientValidateBeforeCall(CreateClientDto createClientDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createClientDto' is set
        if (createClientDto == null) {
            throw new ApiException("Missing the required parameter 'createClientDto' when calling (Async)");
        }

        return postClientCall(createClientDto, _callback);

    }


    private ApiResponse<ClientsDto> postClientWithHttpInfo(CreateClientDto createClientDto) throws ApiException {
        okhttp3.Call localVarCall = postClientValidateBeforeCall(createClientDto, null);
        Type localVarReturnType = new TypeToken<ClientsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postClientAsync(CreateClientDto createClientDto, final ApiCallback<ClientsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postClientValidateBeforeCall(createClientDto, _callback);
        Type localVarReturnType = new TypeToken<ClientsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappClientsPostClientRequest {
        private final CreateClientDto createClientDto;

        private APIappClientsPostClientRequest(CreateClientDto createClientDto) {
            this.createClientDto = createClientDto;
        }

        /**
         * Build call for postClient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Client created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postClientCall(createClientDto, _callback);
        }

        /**
         * Execute postClient request
         * @return ClientsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Client created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ClientsDto execute() throws ApiException {
            ApiResponse<ClientsDto> localVarResp = postClientWithHttpInfo(createClientDto);
            return localVarResp.getData();
        }

        /**
         * Execute postClient request with HTTP info returned
         * @return ApiResponse&lt;ClientsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Client created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientsDto> executeWithHttpInfo() throws ApiException {
            return postClientWithHttpInfo(createClientDto);
        }

        /**
         * Execute postClient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Client created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientsDto> _callback) throws ApiException {
            return postClientAsync(createClientDto, _callback);
        }
    }

    /**
     * Create a new app client.
     * Create a new client for the app with the specified name. The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.
     * @param createClientDto Client object that needs to be added to the app. (required)
     * @return APIappClientsPostClientRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Client created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappClientsPostClientRequest postClient(CreateClientDto createClientDto) {
        return new APIappClientsPostClientRequest(createClientDto);
    }
    private okhttp3.Call putClientCall(String id, UpdateClientDto updateClientDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClientDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/clients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putClientValidateBeforeCall(String id, UpdateClientDto updateClientDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'updateClientDto' is set
        if (updateClientDto == null) {
            throw new ApiException("Missing the required parameter 'updateClientDto' when calling (Async)");
        }

        return putClientCall(id, updateClientDto, _callback);

    }


    private ApiResponse<ClientsDto> putClientWithHttpInfo(String id, UpdateClientDto updateClientDto) throws ApiException {
        okhttp3.Call localVarCall = putClientValidateBeforeCall(id, updateClientDto, null);
        Type localVarReturnType = new TypeToken<ClientsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putClientAsync(String id, UpdateClientDto updateClientDto, final ApiCallback<ClientsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putClientValidateBeforeCall(id, updateClientDto, _callback);
        Type localVarReturnType = new TypeToken<ClientsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappClientsPutClientRequest {
        private final String id;
        private final UpdateClientDto updateClientDto;

        private APIappClientsPutClientRequest(String id, UpdateClientDto updateClientDto) {
            this.id = id;
            this.updateClientDto = updateClientDto;
        }

        /**
         * Build call for putClient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Client updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putClientCall(id, updateClientDto, _callback);
        }

        /**
         * Execute putClient request
         * @return ClientsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Client updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ClientsDto execute() throws ApiException {
            ApiResponse<ClientsDto> localVarResp = putClientWithHttpInfo(id, updateClientDto);
            return localVarResp.getData();
        }

        /**
         * Execute putClient request with HTTP info returned
         * @return ApiResponse&lt;ClientsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Client updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ClientsDto> executeWithHttpInfo() throws ApiException {
            return putClientWithHttpInfo(id, updateClientDto);
        }

        /**
         * Execute putClient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Client updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ClientsDto> _callback) throws ApiException {
            return putClientAsync(id, updateClientDto, _callback);
        }
    }

    /**
     * Updates an app client.
     * Only the display name can be changed, create a new client if necessary.
     * @param id The ID of the client that must be updated. (required)
     * @param updateClientDto Client object that needs to be updated. (required)
     * @return APIappClientsPutClientRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Client or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappClientsPutClientRequest putClient(String id, UpdateClientDto updateClientDto) {
        return new APIappClientsPutClientRequest(id, updateClientDto);
    }
    private okhttp3.Call deleteContributorCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/contributors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContributorValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteContributorCall(id, _callback);

    }


    private ApiResponse<ContributorsDto> deleteContributorWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteContributorValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteContributorAsync(String id, final ApiCallback<ContributorsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContributorValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappContributorsDeleteContributorRequest {
        private final String id;

        private APIappContributorsDeleteContributorRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteContributor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContributorCall(id, _callback);
        }

        /**
         * Execute deleteContributor request
         * @return ContributorsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContributorsDto execute() throws ApiException {
            ApiResponse<ContributorsDto> localVarResp = deleteContributorWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteContributor request with HTTP info returned
         * @return ApiResponse&lt;ContributorsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContributorsDto> executeWithHttpInfo() throws ApiException {
            return deleteContributorWithHttpInfo(id);
        }

        /**
         * Execute deleteContributor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {
            return deleteContributorAsync(id, _callback);
        }
    }

    /**
     * Remove contributor.
     * 
     * @param id The ID of the contributor. (required)
     * @return APIappContributorsDeleteContributorRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappContributorsDeleteContributorRequest deleteContributor(String id) {
        return new APIappContributorsDeleteContributorRequest(id);
    }
    private okhttp3.Call deleteMyselfCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/contributors/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMyselfValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteMyselfCall(_callback);

    }


    private ApiResponse<ContributorsDto> deleteMyselfWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteMyselfValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteMyselfAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMyselfValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappContributorsDeleteMyselfRequest {

        private APIappContributorsDeleteMyselfRequest() {
        }

        /**
         * Build call for deleteMyself
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMyselfCall(_callback);
        }

        /**
         * Execute deleteMyself request
         * @return ContributorsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContributorsDto execute() throws ApiException {
            ApiResponse<ContributorsDto> localVarResp = deleteMyselfWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute deleteMyself request with HTTP info returned
         * @return ApiResponse&lt;ContributorsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContributorsDto> executeWithHttpInfo() throws ApiException {
            return deleteMyselfWithHttpInfo();
        }

        /**
         * Execute deleteMyself request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {
            return deleteMyselfAsync(_callback);
        }
    }

    /**
     * Remove yourself.
     * 
     * @return APIappContributorsDeleteMyselfRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contributor removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contributor or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappContributorsDeleteMyselfRequest deleteMyself() {
        return new APIappContributorsDeleteMyselfRequest();
    }
    private okhttp3.Call getContributorsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/contributors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContributorsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getContributorsCall(_callback);

    }


    private ApiResponse<ContributorsDto> getContributorsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getContributorsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContributorsAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContributorsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappContributorsGetContributorsRequest {

        private APIappContributorsGetContributorsRequest() {
        }

        /**
         * Build call for getContributors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContributorsCall(_callback);
        }

        /**
         * Execute getContributors request
         * @return ContributorsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContributorsDto execute() throws ApiException {
            ApiResponse<ContributorsDto> localVarResp = getContributorsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getContributors request with HTTP info returned
         * @return ApiResponse&lt;ContributorsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContributorsDto> executeWithHttpInfo() throws ApiException {
            return getContributorsWithHttpInfo();
        }

        /**
         * Execute getContributors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {
            return getContributorsAsync(_callback);
        }
    }

    /**
     * Get app contributors.
     * 
     * @return APIappContributorsGetContributorsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contributors returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappContributorsGetContributorsRequest getContributors() {
        return new APIappContributorsGetContributorsRequest();
    }
    private okhttp3.Call postContributorCall(AssignContributorDto assignContributorDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignContributorDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/contributors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContributorValidateBeforeCall(AssignContributorDto assignContributorDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assignContributorDto' is set
        if (assignContributorDto == null) {
            throw new ApiException("Missing the required parameter 'assignContributorDto' when calling (Async)");
        }

        return postContributorCall(assignContributorDto, _callback);

    }


    private ApiResponse<ContributorsDto> postContributorWithHttpInfo(AssignContributorDto assignContributorDto) throws ApiException {
        okhttp3.Call localVarCall = postContributorValidateBeforeCall(assignContributorDto, null);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postContributorAsync(AssignContributorDto assignContributorDto, final ApiCallback<ContributorsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postContributorValidateBeforeCall(assignContributorDto, _callback);
        Type localVarReturnType = new TypeToken<ContributorsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappContributorsPostContributorRequest {
        private final AssignContributorDto assignContributorDto;

        private APIappContributorsPostContributorRequest(AssignContributorDto assignContributorDto) {
            this.assignContributorDto = assignContributorDto;
        }

        /**
         * Build call for postContributor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Contributor assigned to app. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postContributorCall(assignContributorDto, _callback);
        }

        /**
         * Execute postContributor request
         * @return ContributorsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Contributor assigned to app. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContributorsDto execute() throws ApiException {
            ApiResponse<ContributorsDto> localVarResp = postContributorWithHttpInfo(assignContributorDto);
            return localVarResp.getData();
        }

        /**
         * Execute postContributor request with HTTP info returned
         * @return ApiResponse&lt;ContributorsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Contributor assigned to app. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContributorsDto> executeWithHttpInfo() throws ApiException {
            return postContributorWithHttpInfo(assignContributorDto);
        }

        /**
         * Execute postContributor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Contributor assigned to app. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContributorsDto> _callback) throws ApiException {
            return postContributorAsync(assignContributorDto, _callback);
        }
    }

    /**
     * Assign contributor to app.
     * 
     * @param assignContributorDto Contributor object that needs to be added to the app. (required)
     * @return APIappContributorsPostContributorRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Contributor assigned to app. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Contributor request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappContributorsPostContributorRequest postContributor(AssignContributorDto assignContributorDto) {
        return new APIappContributorsPostContributorRequest(assignContributorDto);
    }
    private okhttp3.Call getImageCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getImageCall(_callback);

    }


    private ApiResponse<File> getImageWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getImageValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImageAsync(final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappImageGetImageRequest {

        private APIappImageGetImageRequest() {
        }

        /**
         * Build call for getImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImageCall(_callback);
        }

        /**
         * Execute getImage request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getImageWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getImage request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getImageWithHttpInfo();
        }

        /**
         * Execute getImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image found and content or (resized) image returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getImageAsync(_callback);
        }
    }

    /**
     * Get the app image.
     * 
     * @return APIappImageGetImageRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App image found and content or (resized) image returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappImageGetImageRequest getImage() {
        return new APIappImageGetImageRequest();
    }
    private okhttp3.Call deleteLanguageCall(String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/languages/{language}"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLanguageValidateBeforeCall(String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling (Async)");
        }

        return deleteLanguageCall(language, _callback);

    }


    private ApiResponse<AppLanguagesDto> deleteLanguageWithHttpInfo(String language) throws ApiException {
        okhttp3.Call localVarCall = deleteLanguageValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<AppLanguagesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteLanguageAsync(String language, final ApiCallback<AppLanguagesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLanguageValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<AppLanguagesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappLanguagesDeleteLanguageRequest {
        private final String language;

        private APIappLanguagesDeleteLanguageRequest(String language) {
            this.language = language;
        }

        /**
         * Build call for deleteLanguage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Language deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language is master language. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLanguageCall(language, _callback);
        }

        /**
         * Execute deleteLanguage request
         * @return AppLanguagesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Language deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language is master language. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppLanguagesDto execute() throws ApiException {
            ApiResponse<AppLanguagesDto> localVarResp = deleteLanguageWithHttpInfo(language);
            return localVarResp.getData();
        }

        /**
         * Execute deleteLanguage request with HTTP info returned
         * @return ApiResponse&lt;AppLanguagesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Language deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language is master language. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppLanguagesDto> executeWithHttpInfo() throws ApiException {
            return deleteLanguageWithHttpInfo(language);
        }

        /**
         * Execute deleteLanguage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Language deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language is master language. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppLanguagesDto> _callback) throws ApiException {
            return deleteLanguageAsync(language, _callback);
        }
    }

    /**
     * Deletes an app language.
     * 
     * @param language The language to delete from the app. (required)
     * @return APIappLanguagesDeleteLanguageRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Language is master language. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappLanguagesDeleteLanguageRequest deleteLanguage(String language) {
        return new APIappLanguagesDeleteLanguageRequest(language);
    }
    private okhttp3.Call getLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLanguagesCall(_callback);

    }


    private ApiResponse<AppLanguagesDto> getLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppLanguagesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLanguagesAsync(final ApiCallback<AppLanguagesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppLanguagesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappLanguagesGetLanguagesRequest {

        private APIappLanguagesGetLanguagesRequest() {
        }

        /**
         * Build call for getLanguages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Languages returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLanguagesCall(_callback);
        }

        /**
         * Execute getLanguages request
         * @return AppLanguagesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Languages returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppLanguagesDto execute() throws ApiException {
            ApiResponse<AppLanguagesDto> localVarResp = getLanguagesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getLanguages request with HTTP info returned
         * @return ApiResponse&lt;AppLanguagesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Languages returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppLanguagesDto> executeWithHttpInfo() throws ApiException {
            return getLanguagesWithHttpInfo();
        }

        /**
         * Execute getLanguages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Languages returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppLanguagesDto> _callback) throws ApiException {
            return getLanguagesAsync(_callback);
        }
    }

    /**
     * Get app languages.
     * 
     * @return APIappLanguagesGetLanguagesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Languages returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappLanguagesGetLanguagesRequest getLanguages() {
        return new APIappLanguagesGetLanguagesRequest();
    }
    private okhttp3.Call postLanguageCall(AddLanguageDto addLanguageDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addLanguageDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postLanguageValidateBeforeCall(AddLanguageDto addLanguageDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addLanguageDto' is set
        if (addLanguageDto == null) {
            throw new ApiException("Missing the required parameter 'addLanguageDto' when calling (Async)");
        }

        return postLanguageCall(addLanguageDto, _callback);

    }


    private ApiResponse<AppLanguagesDto> postLanguageWithHttpInfo(AddLanguageDto addLanguageDto) throws ApiException {
        okhttp3.Call localVarCall = postLanguageValidateBeforeCall(addLanguageDto, null);
        Type localVarReturnType = new TypeToken<AppLanguagesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postLanguageAsync(AddLanguageDto addLanguageDto, final ApiCallback<AppLanguagesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postLanguageValidateBeforeCall(addLanguageDto, _callback);
        Type localVarReturnType = new TypeToken<AppLanguagesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappLanguagesPostLanguageRequest {
        private final AddLanguageDto addLanguageDto;

        private APIappLanguagesPostLanguageRequest(AddLanguageDto addLanguageDto) {
            this.addLanguageDto = addLanguageDto;
        }

        /**
         * Build call for postLanguage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Language created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postLanguageCall(addLanguageDto, _callback);
        }

        /**
         * Execute postLanguage request
         * @return AppLanguagesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Language created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppLanguagesDto execute() throws ApiException {
            ApiResponse<AppLanguagesDto> localVarResp = postLanguageWithHttpInfo(addLanguageDto);
            return localVarResp.getData();
        }

        /**
         * Execute postLanguage request with HTTP info returned
         * @return ApiResponse&lt;AppLanguagesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Language created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppLanguagesDto> executeWithHttpInfo() throws ApiException {
            return postLanguageWithHttpInfo(addLanguageDto);
        }

        /**
         * Execute postLanguage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Language created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppLanguagesDto> _callback) throws ApiException {
            return postLanguageAsync(addLanguageDto, _callback);
        }
    }

    /**
     * Add an app language.
     * 
     * @param addLanguageDto The language to add to the app. (required)
     * @return APIappLanguagesPostLanguageRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Language created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappLanguagesPostLanguageRequest postLanguage(AddLanguageDto addLanguageDto) {
        return new APIappLanguagesPostLanguageRequest(addLanguageDto);
    }
    private okhttp3.Call putLanguageCall(String language, UpdateLanguageDto updateLanguageDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLanguageDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/languages/{language}"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putLanguageValidateBeforeCall(String language, UpdateLanguageDto updateLanguageDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling (Async)");
        }

        // verify the required parameter 'updateLanguageDto' is set
        if (updateLanguageDto == null) {
            throw new ApiException("Missing the required parameter 'updateLanguageDto' when calling (Async)");
        }

        return putLanguageCall(language, updateLanguageDto, _callback);

    }


    private ApiResponse<AppLanguagesDto> putLanguageWithHttpInfo(String language, UpdateLanguageDto updateLanguageDto) throws ApiException {
        okhttp3.Call localVarCall = putLanguageValidateBeforeCall(language, updateLanguageDto, null);
        Type localVarReturnType = new TypeToken<AppLanguagesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putLanguageAsync(String language, UpdateLanguageDto updateLanguageDto, final ApiCallback<AppLanguagesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putLanguageValidateBeforeCall(language, updateLanguageDto, _callback);
        Type localVarReturnType = new TypeToken<AppLanguagesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappLanguagesPutLanguageRequest {
        private final String language;
        private final UpdateLanguageDto updateLanguageDto;

        private APIappLanguagesPutLanguageRequest(String language, UpdateLanguageDto updateLanguageDto) {
            this.language = language;
            this.updateLanguageDto = updateLanguageDto;
        }

        /**
         * Build call for putLanguage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Language updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putLanguageCall(language, updateLanguageDto, _callback);
        }

        /**
         * Execute putLanguage request
         * @return AppLanguagesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Language updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppLanguagesDto execute() throws ApiException {
            ApiResponse<AppLanguagesDto> localVarResp = putLanguageWithHttpInfo(language, updateLanguageDto);
            return localVarResp.getData();
        }

        /**
         * Execute putLanguage request with HTTP info returned
         * @return ApiResponse&lt;AppLanguagesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Language updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppLanguagesDto> executeWithHttpInfo() throws ApiException {
            return putLanguageWithHttpInfo(language, updateLanguageDto);
        }

        /**
         * Execute putLanguage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Language updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppLanguagesDto> _callback) throws ApiException {
            return putLanguageAsync(language, updateLanguageDto, _callback);
        }
    }

    /**
     * Updates an app language.
     * 
     * @param language The language to update. (required)
     * @param updateLanguageDto The language object. (required)
     * @return APIappLanguagesPutLanguageRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Language request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Language or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappLanguagesPutLanguageRequest putLanguage(String language, UpdateLanguageDto updateLanguageDto) {
        return new APIappLanguagesPutLanguageRequest(language, updateLanguageDto);
    }
    private okhttp3.Call deleteRoleCall(String roleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/roles/{roleName}"
            .replace("{" + "roleName" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(String roleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling (Async)");
        }

        return deleteRoleCall(roleName, _callback);

    }


    private ApiResponse<RolesDto> deleteRoleWithHttpInfo(String roleName) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(roleName, null);
        Type localVarReturnType = new TypeToken<RolesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRoleAsync(String roleName, final ApiCallback<RolesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(roleName, _callback);
        Type localVarReturnType = new TypeToken<RolesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappRolesDeleteRoleRequest {
        private final String roleName;

        private APIappRolesDeleteRoleRequest(String roleName) {
            this.roleName = roleName;
        }

        /**
         * Build call for deleteRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Role deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role is in use by contributor or client or a default role. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRoleCall(roleName, _callback);
        }

        /**
         * Execute deleteRole request
         * @return RolesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Role deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role is in use by contributor or client or a default role. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public RolesDto execute() throws ApiException {
            ApiResponse<RolesDto> localVarResp = deleteRoleWithHttpInfo(roleName);
            return localVarResp.getData();
        }

        /**
         * Execute deleteRole request with HTTP info returned
         * @return ApiResponse&lt;RolesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Role deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role is in use by contributor or client or a default role. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RolesDto> executeWithHttpInfo() throws ApiException {
            return deleteRoleWithHttpInfo(roleName);
        }

        /**
         * Execute deleteRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Role deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role is in use by contributor or client or a default role. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RolesDto> _callback) throws ApiException {
            return deleteRoleAsync(roleName, _callback);
        }
    }

    /**
     * Remove role from app.
     * 
     * @param roleName The name of the role. (required)
     * @return APIappRolesDeleteRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Role is in use by contributor or client or a default role. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappRolesDeleteRoleRequest deleteRole(String roleName) {
        return new APIappRolesDeleteRoleRequest(roleName);
    }
    private okhttp3.Call getPermissionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/roles/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPermissionsCall(_callback);

    }


    private ApiResponse<List<String>> getPermissionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPermissionsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappRolesGetPermissionsRequest {

        private APIappRolesGetPermissionsRequest() {
        }

        /**
         * Build call for getPermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App permissions returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPermissionsCall(_callback);
        }

        /**
         * Execute getPermissions request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App permissions returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = getPermissionsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getPermissions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App permissions returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return getPermissionsWithHttpInfo();
        }

        /**
         * Execute getPermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App permissions returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return getPermissionsAsync(_callback);
        }
    }

    /**
     * Get app permissions.
     * 
     * @return APIappRolesGetPermissionsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App permissions returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappRolesGetPermissionsRequest getPermissions() {
        return new APIappRolesGetPermissionsRequest();
    }
    private okhttp3.Call getRolesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRolesCall(_callback);

    }


    private ApiResponse<RolesDto> getRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RolesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRolesAsync(final ApiCallback<RolesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RolesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappRolesGetRolesRequest {

        private APIappRolesGetRolesRequest() {
        }

        /**
         * Build call for getRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Roles returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRolesCall(_callback);
        }

        /**
         * Execute getRoles request
         * @return RolesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Roles returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public RolesDto execute() throws ApiException {
            ApiResponse<RolesDto> localVarResp = getRolesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getRoles request with HTTP info returned
         * @return ApiResponse&lt;RolesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Roles returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RolesDto> executeWithHttpInfo() throws ApiException {
            return getRolesWithHttpInfo();
        }

        /**
         * Execute getRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Roles returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RolesDto> _callback) throws ApiException {
            return getRolesAsync(_callback);
        }
    }

    /**
     * Get app roles.
     * 
     * @return APIappRolesGetRolesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappRolesGetRolesRequest getRoles() {
        return new APIappRolesGetRolesRequest();
    }
    private okhttp3.Call postRoleCall(AddRoleDto addRoleDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addRoleDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postRoleValidateBeforeCall(AddRoleDto addRoleDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addRoleDto' is set
        if (addRoleDto == null) {
            throw new ApiException("Missing the required parameter 'addRoleDto' when calling (Async)");
        }

        return postRoleCall(addRoleDto, _callback);

    }


    private ApiResponse<RolesDto> postRoleWithHttpInfo(AddRoleDto addRoleDto) throws ApiException {
        okhttp3.Call localVarCall = postRoleValidateBeforeCall(addRoleDto, null);
        Type localVarReturnType = new TypeToken<RolesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postRoleAsync(AddRoleDto addRoleDto, final ApiCallback<RolesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postRoleValidateBeforeCall(addRoleDto, _callback);
        Type localVarReturnType = new TypeToken<RolesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappRolesPostRoleRequest {
        private final AddRoleDto addRoleDto;

        private APIappRolesPostRoleRequest(AddRoleDto addRoleDto) {
            this.addRoleDto = addRoleDto;
        }

        /**
         * Build call for postRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Role created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postRoleCall(addRoleDto, _callback);
        }

        /**
         * Execute postRole request
         * @return RolesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Role created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public RolesDto execute() throws ApiException {
            ApiResponse<RolesDto> localVarResp = postRoleWithHttpInfo(addRoleDto);
            return localVarResp.getData();
        }

        /**
         * Execute postRole request with HTTP info returned
         * @return ApiResponse&lt;RolesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Role created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RolesDto> executeWithHttpInfo() throws ApiException {
            return postRoleWithHttpInfo(addRoleDto);
        }

        /**
         * Execute postRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Role created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RolesDto> _callback) throws ApiException {
            return postRoleAsync(addRoleDto, _callback);
        }
    }

    /**
     * Add role to app.
     * 
     * @param addRoleDto Role object that needs to be added to the app. (required)
     * @return APIappRolesPostRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappRolesPostRoleRequest postRole(AddRoleDto addRoleDto) {
        return new APIappRolesPostRoleRequest(addRoleDto);
    }
    private okhttp3.Call putRoleCall(String roleName, UpdateRoleDto updateRoleDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRoleDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/roles/{roleName}"
            .replace("{" + "roleName" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRoleValidateBeforeCall(String roleName, UpdateRoleDto updateRoleDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling (Async)");
        }

        // verify the required parameter 'updateRoleDto' is set
        if (updateRoleDto == null) {
            throw new ApiException("Missing the required parameter 'updateRoleDto' when calling (Async)");
        }

        return putRoleCall(roleName, updateRoleDto, _callback);

    }


    private ApiResponse<RolesDto> putRoleWithHttpInfo(String roleName, UpdateRoleDto updateRoleDto) throws ApiException {
        okhttp3.Call localVarCall = putRoleValidateBeforeCall(roleName, updateRoleDto, null);
        Type localVarReturnType = new TypeToken<RolesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putRoleAsync(String roleName, UpdateRoleDto updateRoleDto, final ApiCallback<RolesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRoleValidateBeforeCall(roleName, updateRoleDto, _callback);
        Type localVarReturnType = new TypeToken<RolesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappRolesPutRoleRequest {
        private final String roleName;
        private final UpdateRoleDto updateRoleDto;

        private APIappRolesPutRoleRequest(String roleName, UpdateRoleDto updateRoleDto) {
            this.roleName = roleName;
            this.updateRoleDto = updateRoleDto;
        }

        /**
         * Build call for putRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Role updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putRoleCall(roleName, updateRoleDto, _callback);
        }

        /**
         * Execute putRole request
         * @return RolesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Role updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public RolesDto execute() throws ApiException {
            ApiResponse<RolesDto> localVarResp = putRoleWithHttpInfo(roleName, updateRoleDto);
            return localVarResp.getData();
        }

        /**
         * Execute putRole request with HTTP info returned
         * @return ApiResponse&lt;RolesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Role updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RolesDto> executeWithHttpInfo() throws ApiException {
            return putRoleWithHttpInfo(roleName, updateRoleDto);
        }

        /**
         * Execute putRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Role updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RolesDto> _callback) throws ApiException {
            return putRoleAsync(roleName, updateRoleDto, _callback);
        }
    }

    /**
     * Update an app role.
     * 
     * @param roleName The name of the role to be updated. (required)
     * @param updateRoleDto Role to be updated for the app. (required)
     * @return APIappRolesPutRoleRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Role request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Role or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappRolesPutRoleRequest putRole(String roleName, UpdateRoleDto updateRoleDto) {
        return new APIappRolesPutRoleRequest(roleName, updateRoleDto);
    }
    private okhttp3.Call getSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSettingsCall(_callback);

    }


    private ApiResponse<AppSettingsDto> getSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppSettingsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(final ApiCallback<AppSettingsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppSettingsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappSettingsGetSettingsRequest {

        private APIappSettingsGetSettingsRequest() {
        }

        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App settings returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(_callback);
        }

        /**
         * Execute getSettings request
         * @return AppSettingsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App settings returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppSettingsDto execute() throws ApiException {
            ApiResponse<AppSettingsDto> localVarResp = getSettingsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;AppSettingsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App settings returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppSettingsDto> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo();
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App settings returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppSettingsDto> _callback) throws ApiException {
            return getSettingsAsync(_callback);
        }
    }

    /**
     * Get the app settings.
     * 
     * @return APIappSettingsGetSettingsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App settings returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappSettingsGetSettingsRequest getSettings() {
        return new APIappSettingsGetSettingsRequest();
    }
    private okhttp3.Call putSettingsCall(UpdateAppSettingsDto updateAppSettingsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAppSettingsDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSettingsValidateBeforeCall(UpdateAppSettingsDto updateAppSettingsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAppSettingsDto' is set
        if (updateAppSettingsDto == null) {
            throw new ApiException("Missing the required parameter 'updateAppSettingsDto' when calling (Async)");
        }

        return putSettingsCall(updateAppSettingsDto, _callback);

    }


    private ApiResponse<AppSettingsDto> putSettingsWithHttpInfo(UpdateAppSettingsDto updateAppSettingsDto) throws ApiException {
        okhttp3.Call localVarCall = putSettingsValidateBeforeCall(updateAppSettingsDto, null);
        Type localVarReturnType = new TypeToken<AppSettingsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putSettingsAsync(UpdateAppSettingsDto updateAppSettingsDto, final ApiCallback<AppSettingsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSettingsValidateBeforeCall(updateAppSettingsDto, _callback);
        Type localVarReturnType = new TypeToken<AppSettingsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappSettingsPutSettingsRequest {
        private final UpdateAppSettingsDto updateAppSettingsDto;

        private APIappSettingsPutSettingsRequest(UpdateAppSettingsDto updateAppSettingsDto) {
            this.updateAppSettingsDto = updateAppSettingsDto;
        }

        /**
         * Build call for putSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putSettingsCall(updateAppSettingsDto, _callback);
        }

        /**
         * Execute putSettings request
         * @return AppSettingsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppSettingsDto execute() throws ApiException {
            ApiResponse<AppSettingsDto> localVarResp = putSettingsWithHttpInfo(updateAppSettingsDto);
            return localVarResp.getData();
        }

        /**
         * Execute putSettings request with HTTP info returned
         * @return ApiResponse&lt;AppSettingsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppSettingsDto> executeWithHttpInfo() throws ApiException {
            return putSettingsWithHttpInfo(updateAppSettingsDto);
        }

        /**
         * Execute putSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppSettingsDto> _callback) throws ApiException {
            return putSettingsAsync(updateAppSettingsDto, _callback);
        }
    }

    /**
     * Update the settings.
     * 
     * @param updateAppSettingsDto The values to update. (required)
     * @return APIappSettingsPutSettingsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappSettingsPutSettingsRequest putSettings(UpdateAppSettingsDto updateAppSettingsDto) {
        return new APIappSettingsPutSettingsRequest(updateAppSettingsDto);
    }
    private okhttp3.Call deleteWorkflowCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/workflows/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkflowValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteWorkflowCall(id, _callback);

    }


    private ApiResponse<WorkflowsDto> deleteWorkflowWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkflowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkflowsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteWorkflowAsync(String id, final ApiCallback<WorkflowsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkflowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappWorkflowsDeleteWorkflowRequest {
        private final String id;

        private APIappWorkflowsDeleteWorkflowRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkflowCall(id, _callback);
        }

        /**
         * Execute deleteWorkflow request
         * @return WorkflowsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowsDto execute() throws ApiException {
            ApiResponse<WorkflowsDto> localVarResp = deleteWorkflowWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowsDto> executeWithHttpInfo() throws ApiException {
            return deleteWorkflowWithHttpInfo(id);
        }

        /**
         * Execute deleteWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowsDto> _callback) throws ApiException {
            return deleteWorkflowAsync(id, _callback);
        }
    }

    /**
     * Delete a workflow.
     * 
     * @param id The ID of the workflow to update. (required)
     * @return APIappWorkflowsDeleteWorkflowRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workflow deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappWorkflowsDeleteWorkflowRequest deleteWorkflow(String id) {
        return new APIappWorkflowsDeleteWorkflowRequest(id);
    }
    private okhttp3.Call getWorkflowsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/workflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkflowsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWorkflowsCall(_callback);

    }


    private ApiResponse<WorkflowsDto> getWorkflowsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWorkflowsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WorkflowsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkflowsAsync(final ApiCallback<WorkflowsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkflowsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WorkflowsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappWorkflowsGetWorkflowsRequest {

        private APIappWorkflowsGetWorkflowsRequest() {
        }

        /**
         * Build call for getWorkflows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflows returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkflowsCall(_callback);
        }

        /**
         * Execute getWorkflows request
         * @return WorkflowsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflows returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowsDto execute() throws ApiException {
            ApiResponse<WorkflowsDto> localVarResp = getWorkflowsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getWorkflows request with HTTP info returned
         * @return ApiResponse&lt;WorkflowsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflows returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowsDto> executeWithHttpInfo() throws ApiException {
            return getWorkflowsWithHttpInfo();
        }

        /**
         * Execute getWorkflows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflows returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowsDto> _callback) throws ApiException {
            return getWorkflowsAsync(_callback);
        }
    }

    /**
     * Get app workflow.
     * 
     * @return APIappWorkflowsGetWorkflowsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workflows returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappWorkflowsGetWorkflowsRequest getWorkflows() {
        return new APIappWorkflowsGetWorkflowsRequest();
    }
    private okhttp3.Call postWorkflowCall(AddWorkflowDto addWorkflowDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addWorkflowDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/workflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWorkflowValidateBeforeCall(AddWorkflowDto addWorkflowDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addWorkflowDto' is set
        if (addWorkflowDto == null) {
            throw new ApiException("Missing the required parameter 'addWorkflowDto' when calling (Async)");
        }

        return postWorkflowCall(addWorkflowDto, _callback);

    }


    private ApiResponse<WorkflowsDto> postWorkflowWithHttpInfo(AddWorkflowDto addWorkflowDto) throws ApiException {
        okhttp3.Call localVarCall = postWorkflowValidateBeforeCall(addWorkflowDto, null);
        Type localVarReturnType = new TypeToken<WorkflowsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postWorkflowAsync(AddWorkflowDto addWorkflowDto, final ApiCallback<WorkflowsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWorkflowValidateBeforeCall(addWorkflowDto, _callback);
        Type localVarReturnType = new TypeToken<WorkflowsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappWorkflowsPostWorkflowRequest {
        private final AddWorkflowDto addWorkflowDto;

        private APIappWorkflowsPostWorkflowRequest(AddWorkflowDto addWorkflowDto) {
            this.addWorkflowDto = addWorkflowDto;
        }

        /**
         * Build call for postWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postWorkflowCall(addWorkflowDto, _callback);
        }

        /**
         * Execute postWorkflow request
         * @return WorkflowsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowsDto execute() throws ApiException {
            ApiResponse<WorkflowsDto> localVarResp = postWorkflowWithHttpInfo(addWorkflowDto);
            return localVarResp.getData();
        }

        /**
         * Execute postWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowsDto> executeWithHttpInfo() throws ApiException {
            return postWorkflowWithHttpInfo(addWorkflowDto);
        }

        /**
         * Execute postWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowsDto> _callback) throws ApiException {
            return postWorkflowAsync(addWorkflowDto, _callback);
        }
    }

    /**
     * Create a workflow.
     * 
     * @param addWorkflowDto The new workflow. (required)
     * @return APIappWorkflowsPostWorkflowRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workflow created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappWorkflowsPostWorkflowRequest postWorkflow(AddWorkflowDto addWorkflowDto) {
        return new APIappWorkflowsPostWorkflowRequest(addWorkflowDto);
    }
    private okhttp3.Call putWorkflowCall(String id, UpdateWorkflowDto updateWorkflowDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorkflowDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/workflows/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putWorkflowValidateBeforeCall(String id, UpdateWorkflowDto updateWorkflowDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'updateWorkflowDto' is set
        if (updateWorkflowDto == null) {
            throw new ApiException("Missing the required parameter 'updateWorkflowDto' when calling (Async)");
        }

        return putWorkflowCall(id, updateWorkflowDto, _callback);

    }


    private ApiResponse<WorkflowsDto> putWorkflowWithHttpInfo(String id, UpdateWorkflowDto updateWorkflowDto) throws ApiException {
        okhttp3.Call localVarCall = putWorkflowValidateBeforeCall(id, updateWorkflowDto, null);
        Type localVarReturnType = new TypeToken<WorkflowsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putWorkflowAsync(String id, UpdateWorkflowDto updateWorkflowDto, final ApiCallback<WorkflowsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putWorkflowValidateBeforeCall(id, updateWorkflowDto, _callback);
        Type localVarReturnType = new TypeToken<WorkflowsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappWorkflowsPutWorkflowRequest {
        private final String id;
        private final UpdateWorkflowDto updateWorkflowDto;

        private APIappWorkflowsPutWorkflowRequest(String id, UpdateWorkflowDto updateWorkflowDto) {
            this.id = id;
            this.updateWorkflowDto = updateWorkflowDto;
        }

        /**
         * Build call for putWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putWorkflowCall(id, updateWorkflowDto, _callback);
        }

        /**
         * Execute putWorkflow request
         * @return WorkflowsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowsDto execute() throws ApiException {
            ApiResponse<WorkflowsDto> localVarResp = putWorkflowWithHttpInfo(id, updateWorkflowDto);
            return localVarResp.getData();
        }

        /**
         * Execute putWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowsDto> executeWithHttpInfo() throws ApiException {
            return putWorkflowWithHttpInfo(id, updateWorkflowDto);
        }

        /**
         * Execute putWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workflow updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowsDto> _callback) throws ApiException {
            return putWorkflowAsync(id, updateWorkflowDto, _callback);
        }
    }

    /**
     * Update a workflow.
     * 
     * @param id The ID of the workflow to update. (required)
     * @param updateWorkflowDto The new workflow. (required)
     * @return APIappWorkflowsPutWorkflowRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workflow updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Workflow request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappWorkflowsPutWorkflowRequest putWorkflow(String id, UpdateWorkflowDto updateWorkflowDto) {
        return new APIappWorkflowsPutWorkflowRequest(id, updateWorkflowDto);
    }
    private okhttp3.Call deleteAppCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAppCall(_callback);

    }


    private ApiResponse<Void> deleteAppWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAppValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAppAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIappsDeleteAppRequest {

        private APIappsDeleteAppRequest() {
        }

        /**
         * Build call for deleteApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> App deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAppCall(_callback);
        }

        /**
         * Execute deleteApp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> App deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAppWithHttpInfo();
        }

        /**
         * Execute deleteApp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> App deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAppWithHttpInfo();
        }

        /**
         * Execute deleteApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> App deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAppAsync(_callback);
        }
    }

    /**
     * Delete the app.
     * 
     * @return APIappsDeleteAppRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> App deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsDeleteAppRequest deleteApp() {
        return new APIappsDeleteAppRequest();
    }
    private okhttp3.Call deleteImageCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteImageCall(_callback);

    }


    private ApiResponse<AppDto> deleteImageWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteImageValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteImageAsync(final ApiCallback<AppDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappsDeleteImageRequest {

        private APIappsDeleteImageRequest() {
        }

        /**
         * Build call for deleteImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteImageCall(_callback);
        }

        /**
         * Execute deleteImage request
         * @return AppDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppDto execute() throws ApiException {
            ApiResponse<AppDto> localVarResp = deleteImageWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute deleteImage request with HTTP info returned
         * @return ApiResponse&lt;AppDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppDto> executeWithHttpInfo() throws ApiException {
            return deleteImageWithHttpInfo();
        }

        /**
         * Execute deleteImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image removed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppDto> _callback) throws ApiException {
            return deleteImageAsync(_callback);
        }
    }

    /**
     * Remove the app image.
     * 
     * @return APIappsDeleteImageRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App image removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsDeleteImageRequest deleteImage() {
        return new APIappsDeleteImageRequest();
    }
    private okhttp3.Call getAppCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAppCall(_callback);

    }


    private ApiResponse<AppDto> getAppWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAppValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAppAsync(final ApiCallback<AppDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappsGetAppRequest {

        private APIappsGetAppRequest() {
        }

        /**
         * Build call for getApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAppCall(_callback);
        }

        /**
         * Execute getApp request
         * @return AppDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppDto execute() throws ApiException {
            ApiResponse<AppDto> localVarResp = getAppWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getApp request with HTTP info returned
         * @return ApiResponse&lt;AppDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppDto> executeWithHttpInfo() throws ApiException {
            return getAppWithHttpInfo();
        }

        /**
         * Execute getApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppDto> _callback) throws ApiException {
            return getAppAsync(_callback);
        }
    }

    /**
     * Get an app by name.
     * 
     * @return APIappsGetAppRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsGetAppRequest getApp() {
        return new APIappsGetAppRequest();
    }
    private okhttp3.Call getAppsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAppsCall(_callback);

    }


    private ApiResponse<List<AppDto>> getAppsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAppsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AppDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAppsAsync(final ApiCallback<List<AppDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AppDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappsGetAppsRequest {

        private APIappsGetAppsRequest() {
        }

        /**
         * Build call for getApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAppsCall(_callback);
        }

        /**
         * Execute getApps request
         * @return List&lt;AppDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<AppDto> execute() throws ApiException {
            ApiResponse<List<AppDto>> localVarResp = getAppsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getApps request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AppDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AppDto>> executeWithHttpInfo() throws ApiException {
            return getAppsWithHttpInfo();
        }

        /**
         * Execute getApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AppDto>> _callback) throws ApiException {
            return getAppsAsync(_callback);
        }
    }

    /**
     * Get your apps.
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * @return APIappsGetAppsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsGetAppsRequest getApps() {
        return new APIappsGetAppsRequest();
    }
    private okhttp3.Call getTeamAppsCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/apps"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamAppsValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        return getTeamAppsCall(team, _callback);

    }


    private ApiResponse<List<AppDto>> getTeamAppsWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = getTeamAppsValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<List<AppDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamAppsAsync(String team, final ApiCallback<List<AppDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamAppsValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<List<AppDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappsGetTeamAppsRequest {
        private final String team;

        private APIappsGetTeamAppsRequest(String team) {
            this.team = team;
        }

        /**
         * Build call for getTeamApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamAppsCall(team, _callback);
        }

        /**
         * Execute getTeamApps request
         * @return List&lt;AppDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<AppDto> execute() throws ApiException {
            ApiResponse<List<AppDto>> localVarResp = getTeamAppsWithHttpInfo(team);
            return localVarResp.getData();
        }

        /**
         * Execute getTeamApps request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AppDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AppDto>> executeWithHttpInfo() throws ApiException {
            return getTeamAppsWithHttpInfo(team);
        }

        /**
         * Execute getTeamApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AppDto>> _callback) throws ApiException {
            return getTeamAppsAsync(team, _callback);
        }
    }

    /**
     * Get team apps.
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * @param team The ID of the team. (required)
     * @return APIappsGetTeamAppsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Apps returned. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsGetTeamAppsRequest getTeamApps(String team) {
        return new APIappsGetTeamAppsRequest(team);
    }
    private okhttp3.Call postAppCall(CreateAppDto createAppDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppDto;

        // create path and map variables
        String localVarPath = "/api/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAppValidateBeforeCall(CreateAppDto createAppDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAppDto' is set
        if (createAppDto == null) {
            throw new ApiException("Missing the required parameter 'createAppDto' when calling (Async)");
        }

        return postAppCall(createAppDto, _callback);

    }


    private ApiResponse<AppDto> postAppWithHttpInfo(CreateAppDto createAppDto) throws ApiException {
        okhttp3.Call localVarCall = postAppValidateBeforeCall(createAppDto, null);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postAppAsync(CreateAppDto createAppDto, final ApiCallback<AppDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAppValidateBeforeCall(createAppDto, _callback);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappsPostAppRequest {
        private final CreateAppDto createAppDto;

        private APIappsPostAppRequest(CreateAppDto createAppDto) {
            this.createAppDto = createAppDto;
        }

        /**
         * Build call for postApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> App created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> App name is already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postAppCall(createAppDto, _callback);
        }

        /**
         * Execute postApp request
         * @return AppDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> App created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> App name is already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppDto execute() throws ApiException {
            ApiResponse<AppDto> localVarResp = postAppWithHttpInfo(createAppDto);
            return localVarResp.getData();
        }

        /**
         * Execute postApp request with HTTP info returned
         * @return ApiResponse&lt;AppDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> App created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> App name is already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppDto> executeWithHttpInfo() throws ApiException {
            return postAppWithHttpInfo(createAppDto);
        }

        /**
         * Execute postApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> App created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> App name is already in use. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppDto> _callback) throws ApiException {
            return postAppAsync(createAppDto, _callback);
        }
    }

    /**
     * Create a new app.
     * You can only create an app when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new app automatically.
     * @param createAppDto The app object that needs to be added to Squidex. (required)
     * @return APIappsPostAppRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> App created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> App name is already in use. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsPostAppRequest postApp(CreateAppDto createAppDto) {
        return new APIappsPostAppRequest(createAppDto);
    }
    private okhttp3.Call putAppCall(UpdateAppDto updateAppDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAppDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAppValidateBeforeCall(UpdateAppDto updateAppDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAppDto' is set
        if (updateAppDto == null) {
            throw new ApiException("Missing the required parameter 'updateAppDto' when calling (Async)");
        }

        return putAppCall(updateAppDto, _callback);

    }


    private ApiResponse<AppDto> putAppWithHttpInfo(UpdateAppDto updateAppDto) throws ApiException {
        okhttp3.Call localVarCall = putAppValidateBeforeCall(updateAppDto, null);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putAppAsync(UpdateAppDto updateAppDto, final ApiCallback<AppDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAppValidateBeforeCall(updateAppDto, _callback);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappsPutAppRequest {
        private final UpdateAppDto updateAppDto;

        private APIappsPutAppRequest(UpdateAppDto updateAppDto) {
            this.updateAppDto = updateAppDto;
        }

        /**
         * Build call for putApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putAppCall(updateAppDto, _callback);
        }

        /**
         * Execute putApp request
         * @return AppDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppDto execute() throws ApiException {
            ApiResponse<AppDto> localVarResp = putAppWithHttpInfo(updateAppDto);
            return localVarResp.getData();
        }

        /**
         * Execute putApp request with HTTP info returned
         * @return ApiResponse&lt;AppDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppDto> executeWithHttpInfo() throws ApiException {
            return putAppWithHttpInfo(updateAppDto);
        }

        /**
         * Execute putApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppDto> _callback) throws ApiException {
            return putAppAsync(updateAppDto, _callback);
        }
    }

    /**
     * Update the app.
     * 
     * @param updateAppDto The values to update. (required)
     * @return APIappsPutAppRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsPutAppRequest putApp(UpdateAppDto updateAppDto) {
        return new APIappsPutAppRequest(updateAppDto);
    }
    private okhttp3.Call putAppTeamCall(TransferToTeamDto transferToTeamDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferToTeamDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/team";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAppTeamValidateBeforeCall(TransferToTeamDto transferToTeamDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferToTeamDto' is set
        if (transferToTeamDto == null) {
            throw new ApiException("Missing the required parameter 'transferToTeamDto' when calling (Async)");
        }

        return putAppTeamCall(transferToTeamDto, _callback);

    }


    private ApiResponse<AppDto> putAppTeamWithHttpInfo(TransferToTeamDto transferToTeamDto) throws ApiException {
        okhttp3.Call localVarCall = putAppTeamValidateBeforeCall(transferToTeamDto, null);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putAppTeamAsync(TransferToTeamDto transferToTeamDto, final ApiCallback<AppDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAppTeamValidateBeforeCall(transferToTeamDto, _callback);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappsPutAppTeamRequest {
        private final TransferToTeamDto transferToTeamDto;

        private APIappsPutAppTeamRequest(TransferToTeamDto transferToTeamDto) {
            this.transferToTeamDto = transferToTeamDto;
        }

        /**
         * Build call for putAppTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App transferred. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putAppTeamCall(transferToTeamDto, _callback);
        }

        /**
         * Execute putAppTeam request
         * @return AppDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App transferred. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppDto execute() throws ApiException {
            ApiResponse<AppDto> localVarResp = putAppTeamWithHttpInfo(transferToTeamDto);
            return localVarResp.getData();
        }

        /**
         * Execute putAppTeam request with HTTP info returned
         * @return ApiResponse&lt;AppDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App transferred. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppDto> executeWithHttpInfo() throws ApiException {
            return putAppTeamWithHttpInfo(transferToTeamDto);
        }

        /**
         * Execute putAppTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App transferred. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppDto> _callback) throws ApiException {
            return putAppTeamAsync(transferToTeamDto, _callback);
        }
    }

    /**
     * Transfer the app.
     * 
     * @param transferToTeamDto The team information. (required)
     * @return APIappsPutAppTeamRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App transferred. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsPutAppTeamRequest putAppTeam(TransferToTeamDto transferToTeamDto) {
        return new APIappsPutAppTeamRequest(transferToTeamDto);
    }
    private okhttp3.Call uploadImageCall(File file, String url, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadImageValidateBeforeCall(File file, String url, String name, final ApiCallback _callback) throws ApiException {
        return uploadImageCall(file, url, name, _callback);

    }


    private ApiResponse<AppDto> uploadImageWithHttpInfo(File file, String url, String name) throws ApiException {
        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(file, url, name, null);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadImageAsync(File file, String url, String name, final ApiCallback<AppDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(file, url, name, _callback);
        Type localVarReturnType = new TypeToken<AppDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappsUploadImageRequest {
        private File file;
        private String url;
        private String name;

        private APIappsUploadImageRequest() {
        }

        /**
         * Set file
         * @param file  (optional)
         * @return APIappsUploadImageRequest
         */
        public APIappsUploadImageRequest file(File file) {
            this.file = file;
            return this;
        }

        /**
         * Set url
         * @param url  (optional)
         * @return APIappsUploadImageRequest
         */
        public APIappsUploadImageRequest url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return APIappsUploadImageRequest
         */
        public APIappsUploadImageRequest name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Build call for uploadImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadImageCall(file, url, name, _callback);
        }

        /**
         * Execute uploadImage request
         * @return AppDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public AppDto execute() throws ApiException {
            ApiResponse<AppDto> localVarResp = uploadImageWithHttpInfo(file, url, name);
            return localVarResp.getData();
        }

        /**
         * Execute uploadImage request with HTTP info returned
         * @return ApiResponse&lt;AppDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppDto> executeWithHttpInfo() throws ApiException {
            return uploadImageWithHttpInfo(file, url, name);
        }

        /**
         * Execute uploadImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App image uploaded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppDto> _callback) throws ApiException {
            return uploadImageAsync(file, url, name, _callback);
        }
    }

    /**
     * Upload the app image.
     * 
     * @return APIappsUploadImageRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App image uploaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> App request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappsUploadImageRequest uploadImage() {
        return new APIappsUploadImageRequest();
    }
}
