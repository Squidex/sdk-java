/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.ChangePlanDto;
import com.squidex.api.types.ErrorDto;
import com.squidex.api.types.PlanChangedDto;
import com.squidex.api.types.PlansDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class PlansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPlansCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlansValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPlansCall(_callback);

    }


    private ApiResponse<PlansDto> getPlansWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPlansValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PlansDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlansAsync(final ApiCallback<PlansDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlansValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PlansDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappPlansGetPlansRequest {

        private APIappPlansGetPlansRequest() {
        }

        /**
         * Build call for getPlans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App plan information returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlansCall(_callback);
        }

        /**
         * Execute getPlans request
         * @return PlansDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App plan information returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public PlansDto execute() throws ApiException {
            ApiResponse<PlansDto> localVarResp = getPlansWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getPlans request with HTTP info returned
         * @return ApiResponse&lt;PlansDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App plan information returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlansDto> executeWithHttpInfo() throws ApiException {
            return getPlansWithHttpInfo();
        }

        /**
         * Execute getPlans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> App plan information returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlansDto> _callback) throws ApiException {
            return getPlansAsync(_callback);
        }
    }

    /**
     * Get app plan information.
     * 
     * @return APIappPlansGetPlansRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> App plan information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappPlansGetPlansRequest getPlans() {
        return new APIappPlansGetPlansRequest();
    }
    private okhttp3.Call putPlanCall(ChangePlanDto changePlanDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePlanDto;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPlanValidateBeforeCall(ChangePlanDto changePlanDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changePlanDto' is set
        if (changePlanDto == null) {
            throw new ApiException("Missing the required parameter 'changePlanDto' when calling (Async)");
        }

        return putPlanCall(changePlanDto, _callback);

    }


    private ApiResponse<PlanChangedDto> putPlanWithHttpInfo(ChangePlanDto changePlanDto) throws ApiException {
        okhttp3.Call localVarCall = putPlanValidateBeforeCall(changePlanDto, null);
        Type localVarReturnType = new TypeToken<PlanChangedDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putPlanAsync(ChangePlanDto changePlanDto, final ApiCallback<PlanChangedDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPlanValidateBeforeCall(changePlanDto, _callback);
        Type localVarReturnType = new TypeToken<PlanChangedDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIappPlansPutPlanRequest {
        private final ChangePlanDto changePlanDto;

        private APIappPlansPutPlanRequest(ChangePlanDto changePlanDto) {
            this.changePlanDto = changePlanDto;
        }

        /**
         * Build call for putPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Plan not owned by user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putPlanCall(changePlanDto, _callback);
        }

        /**
         * Execute putPlan request
         * @return PlanChangedDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Plan not owned by user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public PlanChangedDto execute() throws ApiException {
            ApiResponse<PlanChangedDto> localVarResp = putPlanWithHttpInfo(changePlanDto);
            return localVarResp.getData();
        }

        /**
         * Execute putPlan request with HTTP info returned
         * @return ApiResponse&lt;PlanChangedDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Plan not owned by user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlanChangedDto> executeWithHttpInfo() throws ApiException {
            return putPlanWithHttpInfo(changePlanDto);
        }

        /**
         * Execute putPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Plan not owned by user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlanChangedDto> _callback) throws ApiException {
            return putPlanAsync(changePlanDto, _callback);
        }
    }

    /**
     * Change the app plan.
     * 
     * @param changePlanDto Plan object that needs to be changed. (required)
     * @return APIappPlansPutPlanRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Plan not owned by user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIappPlansPutPlanRequest putPlan(ChangePlanDto changePlanDto) {
        return new APIappPlansPutPlanRequest(changePlanDto);
    }
    private okhttp3.Call getTeamPlansCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/plans"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamPlansValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        return getTeamPlansCall(team, _callback);

    }


    private ApiResponse<PlansDto> getTeamPlansWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = getTeamPlansValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<PlansDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamPlansAsync(String team, final ApiCallback<PlansDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamPlansValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<PlansDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamPlansGetTeamPlansRequest {
        private final String team;

        private APIteamPlansGetTeamPlansRequest(String team) {
            this.team = team;
        }

        /**
         * Build call for getTeamPlans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team plan information returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamPlansCall(team, _callback);
        }

        /**
         * Execute getTeamPlans request
         * @return PlansDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team plan information returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public PlansDto execute() throws ApiException {
            ApiResponse<PlansDto> localVarResp = getTeamPlansWithHttpInfo(team);
            return localVarResp.getData();
        }

        /**
         * Execute getTeamPlans request with HTTP info returned
         * @return ApiResponse&lt;PlansDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team plan information returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlansDto> executeWithHttpInfo() throws ApiException {
            return getTeamPlansWithHttpInfo(team);
        }

        /**
         * Execute getTeamPlans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Team plan information returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlansDto> _callback) throws ApiException {
            return getTeamPlansAsync(team, _callback);
        }
    }

    /**
     * Get team plan information.
     * 
     * @param team The name of the team. (required)
     * @return APIteamPlansGetTeamPlansRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team plan information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamPlansGetTeamPlansRequest getTeamPlans(String team) {
        return new APIteamPlansGetTeamPlansRequest(team);
    }
    private okhttp3.Call putTeamPlanCall(String team, ChangePlanDto changePlanDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePlanDto;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/plan"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTeamPlanValidateBeforeCall(String team, ChangePlanDto changePlanDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        // verify the required parameter 'changePlanDto' is set
        if (changePlanDto == null) {
            throw new ApiException("Missing the required parameter 'changePlanDto' when calling (Async)");
        }

        return putTeamPlanCall(team, changePlanDto, _callback);

    }


    private ApiResponse<PlanChangedDto> putTeamPlanWithHttpInfo(String team, ChangePlanDto changePlanDto) throws ApiException {
        okhttp3.Call localVarCall = putTeamPlanValidateBeforeCall(team, changePlanDto, null);
        Type localVarReturnType = new TypeToken<PlanChangedDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putTeamPlanAsync(String team, ChangePlanDto changePlanDto, final ApiCallback<PlanChangedDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTeamPlanValidateBeforeCall(team, changePlanDto, _callback);
        Type localVarReturnType = new TypeToken<PlanChangedDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIteamPlansPutTeamPlanRequest {
        private final String team;
        private final ChangePlanDto changePlanDto;

        private APIteamPlansPutTeamPlanRequest(String team, ChangePlanDto changePlanDto) {
            this.team = team;
            this.changePlanDto = changePlanDto;
        }

        /**
         * Build call for putTeamPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putTeamPlanCall(team, changePlanDto, _callback);
        }

        /**
         * Execute putTeamPlan request
         * @return PlanChangedDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public PlanChangedDto execute() throws ApiException {
            ApiResponse<PlanChangedDto> localVarResp = putTeamPlanWithHttpInfo(team, changePlanDto);
            return localVarResp.getData();
        }

        /**
         * Execute putTeamPlan request with HTTP info returned
         * @return ApiResponse&lt;PlanChangedDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlanChangedDto> executeWithHttpInfo() throws ApiException {
            return putTeamPlanWithHttpInfo(team, changePlanDto);
        }

        /**
         * Execute putTeamPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlanChangedDto> _callback) throws ApiException {
            return putTeamPlanAsync(team, changePlanDto, _callback);
        }
    }

    /**
     * Change the team plan.
     * 
     * @param team The name of the team. (required)
     * @param changePlanDto Plan object that needs to be changed. (required)
     * @return APIteamPlansPutTeamPlanRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plan changed or redirect url returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIteamPlansPutTeamPlanRequest putTeamPlan(String team, ChangePlanDto changePlanDto) {
        return new APIteamPlansPutTeamPlanRequest(team, changePlanDto);
    }
}
