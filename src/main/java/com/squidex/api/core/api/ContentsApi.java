/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.AllContentsByPostDto;
import java.math.BigDecimal;
import com.squidex.api.types.BulkResultDto;
import com.squidex.api.types.BulkUpdateContentsDto;
import com.squidex.api.types.ChangeStatusDto;
import com.squidex.api.types.ContentDto;
import com.squidex.api.types.ContentsDto;
import com.squidex.api.types.ErrorDto;
import java.io.File;
import com.squidex.api.types.ImportContentsDto;
import java.time.OffsetDateTime;
import com.squidex.api.types.QueryDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class ContentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkUpdateContentsCall(String schema, BulkUpdateContentsDto bulkUpdateContentsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkUpdateContentsDto;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/bulk"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateContentsValidateBeforeCall(String schema, BulkUpdateContentsDto bulkUpdateContentsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'bulkUpdateContentsDto' is set
        if (bulkUpdateContentsDto == null) {
            throw new ApiException("Missing the required parameter 'bulkUpdateContentsDto' when calling (Async)");
        }

        return bulkUpdateContentsCall(schema, bulkUpdateContentsDto, _callback);

    }


    private ApiResponse<List<BulkResultDto>> bulkUpdateContentsWithHttpInfo(String schema, BulkUpdateContentsDto bulkUpdateContentsDto) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateContentsValidateBeforeCall(schema, bulkUpdateContentsDto, null);
        Type localVarReturnType = new TypeToken<List<BulkResultDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkUpdateContentsAsync(String schema, BulkUpdateContentsDto bulkUpdateContentsDto, final ApiCallback<List<BulkResultDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateContentsValidateBeforeCall(schema, bulkUpdateContentsDto, _callback);
        Type localVarReturnType = new TypeToken<List<BulkResultDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsBulkUpdateContentsRequest {
        private final String schema;
        private final BulkUpdateContentsDto bulkUpdateContentsDto;

        private APIcontentsBulkUpdateContentsRequest(String schema, BulkUpdateContentsDto bulkUpdateContentsDto) {
            this.schema = schema;
            this.bulkUpdateContentsDto = bulkUpdateContentsDto;
        }

        /**
         * Build call for bulkUpdateContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkUpdateContentsCall(schema, bulkUpdateContentsDto, _callback);
        }

        /**
         * Execute bulkUpdateContents request
         * @return List&lt;BulkResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<BulkResultDto> execute() throws ApiException {
            ApiResponse<List<BulkResultDto>> localVarResp = bulkUpdateContentsWithHttpInfo(schema, bulkUpdateContentsDto);
            return localVarResp.getData();
        }

        /**
         * Execute bulkUpdateContents request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BulkResultDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BulkResultDto>> executeWithHttpInfo() throws ApiException {
            return bulkUpdateContentsWithHttpInfo(schema, bulkUpdateContentsDto);
        }

        /**
         * Execute bulkUpdateContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BulkResultDto>> _callback) throws ApiException {
            return bulkUpdateContentsAsync(schema, bulkUpdateContentsDto, _callback);
        }
    }

    /**
     * Bulk update content items.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param bulkUpdateContentsDto The bulk update request. (required)
     * @return APIcontentsBulkUpdateContentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsBulkUpdateContentsRequest bulkUpdateContents(String schema, BulkUpdateContentsDto bulkUpdateContentsDto) {
        return new APIcontentsBulkUpdateContentsRequest(schema, bulkUpdateContentsDto);
    }
    private okhttp3.Call createDraftCall(String schema, String id, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/draft"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDraftValidateBeforeCall(String schema, String id, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return createDraftCall(schema, id, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> createDraftWithHttpInfo(String schema, String id, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = createDraftValidateBeforeCall(schema, id, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDraftAsync(String schema, String id, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDraftValidateBeforeCall(schema, id, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsCreateDraftRequest {
        private final String schema;
        private final String id;
        private Boolean unpublished;
        private String languages;

        private APIcontentsCreateDraftRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsCreateDraftRequest
         */
        public APIcontentsCreateDraftRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsCreateDraftRequest
         */
        public APIcontentsCreateDraftRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for createDraft
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content draft created. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createDraftCall(schema, id, unpublished, languages, _callback);
        }

        /**
         * Execute createDraft request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content draft created. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = createDraftWithHttpInfo(schema, id, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute createDraft request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content draft created. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return createDraftWithHttpInfo(schema, id, unpublished, languages);
        }

        /**
         * Execute createDraft request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content draft created. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return createDraftAsync(schema, id, unpublished, languages, _callback);
        }
    }

    /**
     * Create a new draft version.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to create the draft for. (required)
     * @return APIcontentsCreateDraftRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content draft created. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsCreateDraftRequest createDraft(String schema, String id) {
        return new APIcontentsCreateDraftRequest(schema, id);
    }
    private okhttp3.Call deleteContentCall(String schema, String id, Boolean checkReferrers, Boolean permanent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkReferrers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkReferrers", checkReferrers));
        }

        if (permanent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permanent", permanent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContentValidateBeforeCall(String schema, String id, Boolean checkReferrers, Boolean permanent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteContentCall(schema, id, checkReferrers, permanent, _callback);

    }


    private ApiResponse<Void> deleteContentWithHttpInfo(String schema, String id, Boolean checkReferrers, Boolean permanent) throws ApiException {
        okhttp3.Call localVarCall = deleteContentValidateBeforeCall(schema, id, checkReferrers, permanent, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteContentAsync(String schema, String id, Boolean checkReferrers, Boolean permanent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContentValidateBeforeCall(schema, id, checkReferrers, permanent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcontentsDeleteContentRequest {
        private final String schema;
        private final String id;
        private Boolean checkReferrers;
        private Boolean permanent;

        private APIcontentsDeleteContentRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Set checkReferrers
         * @param checkReferrers True to check referrers of this content. (optional)
         * @return APIcontentsDeleteContentRequest
         */
        public APIcontentsDeleteContentRequest checkReferrers(Boolean checkReferrers) {
            this.checkReferrers = checkReferrers;
            return this;
        }

        /**
         * Set permanent
         * @param permanent True to delete the content permanently. (optional)
         * @return APIcontentsDeleteContentRequest
         */
        public APIcontentsDeleteContentRequest permanent(Boolean permanent) {
            this.permanent = permanent;
            return this;
        }

        /**
         * Build call for deleteContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Content deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content cannot be deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContentCall(schema, id, checkReferrers, permanent, _callback);
        }

        /**
         * Execute deleteContent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Content deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content cannot be deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteContentWithHttpInfo(schema, id, checkReferrers, permanent);
        }

        /**
         * Execute deleteContent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Content deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content cannot be deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteContentWithHttpInfo(schema, id, checkReferrers, permanent);
        }

        /**
         * Execute deleteContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Content deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content cannot be deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteContentAsync(schema, id, checkReferrers, permanent, _callback);
        }
    }

    /**
     * Delete a content item.
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to delete. (required)
     * @return APIcontentsDeleteContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Content deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content cannot be deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsDeleteContentRequest deleteContent(String schema, String id) {
        return new APIcontentsDeleteContentRequest(schema, id);
    }
    private okhttp3.Call deleteContentStatusCall(String schema, String id, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/status"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContentStatusValidateBeforeCall(String schema, String id, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteContentStatusCall(schema, id, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> deleteContentStatusWithHttpInfo(String schema, String id, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = deleteContentStatusValidateBeforeCall(schema, id, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteContentStatusAsync(String schema, String id, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContentStatusValidateBeforeCall(schema, id, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsDeleteContentStatusRequest {
        private final String schema;
        private final String id;
        private Boolean unpublished;
        private String languages;

        private APIcontentsDeleteContentStatusRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsDeleteContentStatusRequest
         */
        public APIcontentsDeleteContentStatusRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsDeleteContentStatusRequest
         */
        public APIcontentsDeleteContentStatusRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for deleteContentStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content status change cancelled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContentStatusCall(schema, id, unpublished, languages, _callback);
        }

        /**
         * Execute deleteContentStatus request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content status change cancelled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = deleteContentStatusWithHttpInfo(schema, id, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute deleteContentStatus request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content status change cancelled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return deleteContentStatusWithHttpInfo(schema, id, unpublished, languages);
        }

        /**
         * Execute deleteContentStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content status change cancelled. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return deleteContentStatusAsync(schema, id, unpublished, languages, _callback);
        }
    }

    /**
     * Cancel status change of a content item.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to cancel. (required)
     * @return APIcontentsDeleteContentStatusRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content status change cancelled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsDeleteContentStatusRequest deleteContentStatus(String schema, String id) {
        return new APIcontentsDeleteContentStatusRequest(schema, id);
    }
    private okhttp3.Call deleteVersionCall(String schema, String id, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/draft"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVersionValidateBeforeCall(String schema, String id, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return deleteVersionCall(schema, id, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> deleteVersionWithHttpInfo(String schema, String id, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = deleteVersionValidateBeforeCall(schema, id, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteVersionAsync(String schema, String id, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVersionValidateBeforeCall(schema, id, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsDeleteVersionRequest {
        private final String schema;
        private final String id;
        private Boolean unpublished;
        private String languages;

        private APIcontentsDeleteVersionRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsDeleteVersionRequest
         */
        public APIcontentsDeleteVersionRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsDeleteVersionRequest
         */
        public APIcontentsDeleteVersionRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for deleteVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content draft deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteVersionCall(schema, id, unpublished, languages, _callback);
        }

        /**
         * Execute deleteVersion request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content draft deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = deleteVersionWithHttpInfo(schema, id, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute deleteVersion request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content draft deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return deleteVersionWithHttpInfo(schema, id, unpublished, languages);
        }

        /**
         * Execute deleteVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content draft deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return deleteVersionAsync(schema, id, unpublished, languages, _callback);
        }
    }

    /**
     * Delete the draft version.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to delete the draft from. (required)
     * @return APIcontentsDeleteVersionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content draft deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsDeleteVersionRequest deleteVersion(String schema, String id) {
        return new APIcontentsDeleteVersionRequest(schema, id);
    }
    private okhttp3.Call getContentCall(String schema, String id, Long version, String fields, Boolean flatten, String languages, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (fields != null) {
            localVarHeaderParams.put("X-Fields", localVarApiClient.parameterToString(fields));
        }

        if (flatten != null) {
            localVarHeaderParams.put("X-Flatten", localVarApiClient.parameterToString(flatten));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentValidateBeforeCall(String schema, String id, Long version, String fields, Boolean flatten, String languages, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getContentCall(schema, id, version, fields, flatten, languages, unpublished, _callback);

    }


    private ApiResponse<ContentDto> getContentWithHttpInfo(String schema, String id, Long version, String fields, Boolean flatten, String languages, Boolean unpublished) throws ApiException {
        okhttp3.Call localVarCall = getContentValidateBeforeCall(schema, id, version, fields, flatten, languages, unpublished, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentAsync(String schema, String id, Long version, String fields, Boolean flatten, String languages, Boolean unpublished, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentValidateBeforeCall(schema, id, version, fields, flatten, languages, unpublished, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsGetContentRequest {
        private final String schema;
        private final String id;
        private Long version;
        private String fields;
        private Boolean flatten;
        private String languages;
        private Boolean unpublished;

        private APIcontentsGetContentRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Set version
         * @param version The optional version. (optional, default to -2)
         * @return APIcontentsGetContentRequest
         */
        public APIcontentsGetContentRequest version(Long version) {
            this.version = version;
            return this;
        }

        /**
         * Set fields
         * @param fields The list of content fields (comma-separated). (optional)
         * @return APIcontentsGetContentRequest
         */
        public APIcontentsGetContentRequest fields(String fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Set flatten
         * @param flatten Provide the data as flat object. (optional)
         * @return APIcontentsGetContentRequest
         */
        public APIcontentsGetContentRequest flatten(Boolean flatten) {
            this.flatten = flatten;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsGetContentRequest
         */
        public APIcontentsGetContentRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsGetContentRequest
         */
        public APIcontentsGetContentRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Build call for getContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentCall(schema, id, version, fields, flatten, languages, unpublished, _callback);
        }

        /**
         * Execute getContent request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = getContentWithHttpInfo(schema, id, version, fields, flatten, languages, unpublished);
            return localVarResp.getData();
        }

        /**
         * Execute getContent request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return getContentWithHttpInfo(schema, id, version, fields, flatten, languages, unpublished);
        }

        /**
         * Execute getContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return getContentAsync(schema, id, version, fields, flatten, languages, unpublished, _callback);
        }
    }

    /**
     * Get a content item.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content to fetch. (required)
     * @return APIcontentsGetContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsGetContentRequest getContent(String schema, String id) {
        return new APIcontentsGetContentRequest(schema, id);
    }
    private okhttp3.Call getContentValidityCall(String schema, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/validity"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentValidityValidateBeforeCall(String schema, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getContentValidityCall(schema, id, _callback);

    }


    private ApiResponse<Void> getContentValidityWithHttpInfo(String schema, String id) throws ApiException {
        okhttp3.Call localVarCall = getContentValidityValidateBeforeCall(schema, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getContentValidityAsync(String schema, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentValidityValidateBeforeCall(schema, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcontentsGetContentValidityRequest {
        private final String schema;
        private final String id;

        private APIcontentsGetContentValidityRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Build call for getContentValidity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Content is valid. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentValidityCall(schema, id, _callback);
        }

        /**
         * Execute getContentValidity request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Content is valid. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getContentValidityWithHttpInfo(schema, id);
        }

        /**
         * Execute getContentValidity request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Content is valid. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getContentValidityWithHttpInfo(schema, id);
        }

        /**
         * Execute getContentValidity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Content is valid. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getContentValidityAsync(schema, id, _callback);
        }
    }

    /**
     * Get a content item validity.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content to fetch. (required)
     * @return APIcontentsGetContentValidityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Content is valid. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsGetContentValidityRequest getContentValidity(String schema, String id) {
        return new APIcontentsGetContentValidityRequest(schema, id);
    }
    private okhttp3.Call getContentVersionCall(String schema, String id, Integer version, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/{version}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentVersionValidateBeforeCall(String schema, String id, Integer version, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling (Async)");
        }

        return getContentVersionCall(schema, id, version, unpublished, languages, _callback);

    }


    private ApiResponse<File> getContentVersionWithHttpInfo(String schema, String id, Integer version, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = getContentVersionValidateBeforeCall(schema, id, version, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentVersionAsync(String schema, String id, Integer version, Boolean unpublished, String languages, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentVersionValidateBeforeCall(schema, id, version, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsGetContentVersionRequest {
        private final String schema;
        private final String id;
        private final Integer version;
        private Boolean unpublished;
        private String languages;

        private APIcontentsGetContentVersionRequest(String schema, String id, Integer version) {
            this.schema = schema;
            this.id = id;
            this.version = version;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsGetContentVersionRequest
         */
        public APIcontentsGetContentVersionRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsGetContentVersionRequest
         */
        public APIcontentsGetContentVersionRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for getContentVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content version returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentVersionCall(schema, id, version, unpublished, languages, _callback);
        }

        /**
         * Execute getContentVersion request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content version returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getContentVersionWithHttpInfo(schema, id, version, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute getContentVersion request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content version returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getContentVersionWithHttpInfo(schema, id, version, unpublished, languages);
        }

        /**
         * Execute getContentVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content version returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getContentVersionAsync(schema, id, version, unpublished, languages, _callback);
        }
    }

    /**
     * Get a content by version.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content to fetch. (required)
     * @param version The version fo the content to fetch. (required)
     * @return APIcontentsGetContentVersionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content version returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIcontentsGetContentVersionRequest getContentVersion(String schema, String id, Integer version) {
        return new APIcontentsGetContentVersionRequest(schema, id, version);
    }
    private okhttp3.Call getContentsCall(String schema, String ids, String q, String $search, BigDecimal $top, BigDecimal $skip, String $orderby, String $filter, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if ($search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$search", $search));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (fields != null) {
            localVarHeaderParams.put("X-Fields", localVarApiClient.parameterToString(fields));
        }

        if (flatten != null) {
            localVarHeaderParams.put("X-Flatten", localVarApiClient.parameterToString(flatten));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        if (noSlowTotal != null) {
            localVarHeaderParams.put("X-NoSlowTotal", localVarApiClient.parameterToString(noSlowTotal));
        }

        if (noTotal != null) {
            localVarHeaderParams.put("X-NoTotal", localVarApiClient.parameterToString(noTotal));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentsValidateBeforeCall(String schema, String ids, String q, String $search, BigDecimal $top, BigDecimal $skip, String $orderby, String $filter, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        return getContentsCall(schema, ids, q, $search, $top, $skip, $orderby, $filter, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);

    }


    private ApiResponse<ContentsDto> getContentsWithHttpInfo(String schema, String ids, String q, String $search, BigDecimal $top, BigDecimal $skip, String $orderby, String $filter, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished) throws ApiException {
        okhttp3.Call localVarCall = getContentsValidateBeforeCall(schema, ids, q, $search, $top, $skip, $orderby, $filter, fields, flatten, languages, noSlowTotal, noTotal, unpublished, null);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentsAsync(String schema, String ids, String q, String $search, BigDecimal $top, BigDecimal $skip, String $orderby, String $filter, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback<ContentsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentsValidateBeforeCall(schema, ids, q, $search, $top, $skip, $orderby, $filter, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsGetContentsRequest {
        private final String schema;
        private String ids;
        private String q;
        private String $search;
        private BigDecimal $top;
        private BigDecimal $skip;
        private String $orderby;
        private String $filter;
        private String fields;
        private Boolean flatten;
        private String languages;
        private Boolean noSlowTotal;
        private Boolean noTotal;
        private Boolean unpublished;

        private APIcontentsGetContentsRequest(String schema) {
            this.schema = schema;
        }

        /**
         * Set ids
         * @param ids The optional ids of the content to fetch. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest ids(String ids) {
            this.ids = ids;
            return this;
        }

        /**
         * Set q
         * @param q The optional json query. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest q(String q) {
            this.q = q;
            return this;
        }

        /**
         * Set $search
         * @param $search Optional number of items to skip. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest $search(String $search) {
            this.$search = $search;
            return this;
        }

        /**
         * Set $top
         * @param $top Optional number of items to take. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest $top(BigDecimal $top) {
            this.$top = $top;
            return this;
        }

        /**
         * Set $skip
         * @param $skip Optional number of items to skip. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest $skip(BigDecimal $skip) {
            this.$skip = $skip;
            return this;
        }

        /**
         * Set $orderby
         * @param $orderby Optional OData order definition. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest $orderby(String $orderby) {
            this.$orderby = $orderby;
            return this;
        }

        /**
         * Set $filter
         * @param $filter Optional OData filter. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest $filter(String $filter) {
            this.$filter = $filter;
            return this;
        }

        /**
         * Set fields
         * @param fields The list of content fields (comma-separated). (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest fields(String fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Set flatten
         * @param flatten Provide the data as flat object. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest flatten(Boolean flatten) {
            this.flatten = flatten;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Set noSlowTotal
         * @param noSlowTotal Do not return the total amount, if it would be slow. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest noSlowTotal(Boolean noSlowTotal) {
            this.noSlowTotal = noSlowTotal;
            return this;
        }

        /**
         * Set noTotal
         * @param noTotal Do not return the total amount. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest noTotal(Boolean noTotal) {
            this.noTotal = noTotal;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsGetContentsRequest
         */
        public APIcontentsGetContentsRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Build call for getContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentsCall(schema, ids, q, $search, $top, $skip, $orderby, $filter, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        }

        /**
         * Execute getContents request
         * @return ContentsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentsDto execute() throws ApiException {
            ApiResponse<ContentsDto> localVarResp = getContentsWithHttpInfo(schema, ids, q, $search, $top, $skip, $orderby, $filter, fields, flatten, languages, noSlowTotal, noTotal, unpublished);
            return localVarResp.getData();
        }

        /**
         * Execute getContents request with HTTP info returned
         * @return ApiResponse&lt;ContentsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentsDto> executeWithHttpInfo() throws ApiException {
            return getContentsWithHttpInfo(schema, ids, q, $search, $top, $skip, $orderby, $filter, fields, flatten, languages, noSlowTotal, noTotal, unpublished);
        }

        /**
         * Execute getContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentsDto> _callback) throws ApiException {
            return getContentsAsync(schema, ids, q, $search, $top, $skip, $orderby, $filter, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        }
    }

    /**
     * Queries contents.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @return APIcontentsGetContentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsGetContentsRequest getContents(String schema) {
        return new APIcontentsGetContentsRequest(schema);
    }
    private okhttp3.Call getContentsPostCall(String schema, QueryDto queryDto, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryDto;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/query"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarHeaderParams.put("X-Fields", localVarApiClient.parameterToString(fields));
        }

        if (flatten != null) {
            localVarHeaderParams.put("X-Flatten", localVarApiClient.parameterToString(flatten));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        if (noSlowTotal != null) {
            localVarHeaderParams.put("X-NoSlowTotal", localVarApiClient.parameterToString(noSlowTotal));
        }

        if (noTotal != null) {
            localVarHeaderParams.put("X-NoTotal", localVarApiClient.parameterToString(noTotal));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentsPostValidateBeforeCall(String schema, QueryDto queryDto, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'queryDto' is set
        if (queryDto == null) {
            throw new ApiException("Missing the required parameter 'queryDto' when calling (Async)");
        }

        return getContentsPostCall(schema, queryDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);

    }


    private ApiResponse<ContentsDto> getContentsPostWithHttpInfo(String schema, QueryDto queryDto, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished) throws ApiException {
        okhttp3.Call localVarCall = getContentsPostValidateBeforeCall(schema, queryDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, null);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentsPostAsync(String schema, QueryDto queryDto, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback<ContentsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentsPostValidateBeforeCall(schema, queryDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsGetContentsPostRequest {
        private final String schema;
        private final QueryDto queryDto;
        private String fields;
        private Boolean flatten;
        private String languages;
        private Boolean noSlowTotal;
        private Boolean noTotal;
        private Boolean unpublished;

        private APIcontentsGetContentsPostRequest(String schema, QueryDto queryDto) {
            this.schema = schema;
            this.queryDto = queryDto;
        }

        /**
         * Set fields
         * @param fields The list of content fields (comma-separated). (optional)
         * @return APIcontentsGetContentsPostRequest
         */
        public APIcontentsGetContentsPostRequest fields(String fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Set flatten
         * @param flatten Provide the data as flat object. (optional)
         * @return APIcontentsGetContentsPostRequest
         */
        public APIcontentsGetContentsPostRequest flatten(Boolean flatten) {
            this.flatten = flatten;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsGetContentsPostRequest
         */
        public APIcontentsGetContentsPostRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Set noSlowTotal
         * @param noSlowTotal Do not return the total amount, if it would be slow. (optional)
         * @return APIcontentsGetContentsPostRequest
         */
        public APIcontentsGetContentsPostRequest noSlowTotal(Boolean noSlowTotal) {
            this.noSlowTotal = noSlowTotal;
            return this;
        }

        /**
         * Set noTotal
         * @param noTotal Do not return the total amount. (optional)
         * @return APIcontentsGetContentsPostRequest
         */
        public APIcontentsGetContentsPostRequest noTotal(Boolean noTotal) {
            this.noTotal = noTotal;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsGetContentsPostRequest
         */
        public APIcontentsGetContentsPostRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Build call for getContentsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentsPostCall(schema, queryDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        }

        /**
         * Execute getContentsPost request
         * @return ContentsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentsDto execute() throws ApiException {
            ApiResponse<ContentsDto> localVarResp = getContentsPostWithHttpInfo(schema, queryDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished);
            return localVarResp.getData();
        }

        /**
         * Execute getContentsPost request with HTTP info returned
         * @return ApiResponse&lt;ContentsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentsDto> executeWithHttpInfo() throws ApiException {
            return getContentsPostWithHttpInfo(schema, queryDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished);
        }

        /**
         * Execute getContentsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentsDto> _callback) throws ApiException {
            return getContentsPostAsync(schema, queryDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        }
    }

    /**
     * Queries contents.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param queryDto The required query object. (required)
     * @return APIcontentsGetContentsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsGetContentsPostRequest getContentsPost(String schema, QueryDto queryDto) {
        return new APIcontentsGetContentsPostRequest(schema, queryDto);
    }
    private okhttp3.Call getReferencesCall(String schema, String id, String q, String fields, Boolean flatten, String languages, Boolean unpublished, Boolean noSlowTotal, Boolean noTotal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/references"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (fields != null) {
            localVarHeaderParams.put("X-Fields", localVarApiClient.parameterToString(fields));
        }

        if (flatten != null) {
            localVarHeaderParams.put("X-Flatten", localVarApiClient.parameterToString(flatten));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (noSlowTotal != null) {
            localVarHeaderParams.put("X-NoSlowTotal", localVarApiClient.parameterToString(noSlowTotal));
        }

        if (noTotal != null) {
            localVarHeaderParams.put("X-NoTotal", localVarApiClient.parameterToString(noTotal));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReferencesValidateBeforeCall(String schema, String id, String q, String fields, Boolean flatten, String languages, Boolean unpublished, Boolean noSlowTotal, Boolean noTotal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getReferencesCall(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, _callback);

    }


    private ApiResponse<ContentsDto> getReferencesWithHttpInfo(String schema, String id, String q, String fields, Boolean flatten, String languages, Boolean unpublished, Boolean noSlowTotal, Boolean noTotal) throws ApiException {
        okhttp3.Call localVarCall = getReferencesValidateBeforeCall(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, null);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReferencesAsync(String schema, String id, String q, String fields, Boolean flatten, String languages, Boolean unpublished, Boolean noSlowTotal, Boolean noTotal, final ApiCallback<ContentsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReferencesValidateBeforeCall(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, _callback);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsGetReferencesRequest {
        private final String schema;
        private final String id;
        private String q;
        private String fields;
        private Boolean flatten;
        private String languages;
        private Boolean unpublished;
        private Boolean noSlowTotal;
        private Boolean noTotal;

        private APIcontentsGetReferencesRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Set q
         * @param q The optional json query. (optional)
         * @return APIcontentsGetReferencesRequest
         */
        public APIcontentsGetReferencesRequest q(String q) {
            this.q = q;
            return this;
        }

        /**
         * Set fields
         * @param fields The list of content fields (comma-separated). (optional)
         * @return APIcontentsGetReferencesRequest
         */
        public APIcontentsGetReferencesRequest fields(String fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Set flatten
         * @param flatten Provide the data as flat object. (optional)
         * @return APIcontentsGetReferencesRequest
         */
        public APIcontentsGetReferencesRequest flatten(Boolean flatten) {
            this.flatten = flatten;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsGetReferencesRequest
         */
        public APIcontentsGetReferencesRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsGetReferencesRequest
         */
        public APIcontentsGetReferencesRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set noSlowTotal
         * @param noSlowTotal Do not return the total amount, if it would be slow. (optional)
         * @return APIcontentsGetReferencesRequest
         */
        public APIcontentsGetReferencesRequest noSlowTotal(Boolean noSlowTotal) {
            this.noSlowTotal = noSlowTotal;
            return this;
        }

        /**
         * Set noTotal
         * @param noTotal Do not return the total amount. (optional)
         * @return APIcontentsGetReferencesRequest
         */
        public APIcontentsGetReferencesRequest noTotal(Boolean noTotal) {
            this.noTotal = noTotal;
            return this;
        }

        /**
         * Build call for getReferences
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReferencesCall(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, _callback);
        }

        /**
         * Execute getReferences request
         * @return ContentsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentsDto execute() throws ApiException {
            ApiResponse<ContentsDto> localVarResp = getReferencesWithHttpInfo(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal);
            return localVarResp.getData();
        }

        /**
         * Execute getReferences request with HTTP info returned
         * @return ApiResponse&lt;ContentsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentsDto> executeWithHttpInfo() throws ApiException {
            return getReferencesWithHttpInfo(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal);
        }

        /**
         * Execute getReferences request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentsDto> _callback) throws ApiException {
            return getReferencesAsync(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, _callback);
        }
    }

    /**
     * Get all references of a content.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content to fetch. (required)
     * @return APIcontentsGetReferencesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsGetReferencesRequest getReferences(String schema, String id) {
        return new APIcontentsGetReferencesRequest(schema, id);
    }
    private okhttp3.Call getReferencingCall(String schema, String id, String q, String fields, Boolean flatten, String languages, Boolean unpublished, Boolean noSlowTotal, Boolean noTotal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/referencing"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (fields != null) {
            localVarHeaderParams.put("X-Fields", localVarApiClient.parameterToString(fields));
        }

        if (flatten != null) {
            localVarHeaderParams.put("X-Flatten", localVarApiClient.parameterToString(flatten));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (noSlowTotal != null) {
            localVarHeaderParams.put("X-NoSlowTotal", localVarApiClient.parameterToString(noSlowTotal));
        }

        if (noTotal != null) {
            localVarHeaderParams.put("X-NoTotal", localVarApiClient.parameterToString(noTotal));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReferencingValidateBeforeCall(String schema, String id, String q, String fields, Boolean flatten, String languages, Boolean unpublished, Boolean noSlowTotal, Boolean noTotal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return getReferencingCall(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, _callback);

    }


    private ApiResponse<ContentsDto> getReferencingWithHttpInfo(String schema, String id, String q, String fields, Boolean flatten, String languages, Boolean unpublished, Boolean noSlowTotal, Boolean noTotal) throws ApiException {
        okhttp3.Call localVarCall = getReferencingValidateBeforeCall(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, null);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReferencingAsync(String schema, String id, String q, String fields, Boolean flatten, String languages, Boolean unpublished, Boolean noSlowTotal, Boolean noTotal, final ApiCallback<ContentsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReferencingValidateBeforeCall(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, _callback);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsGetReferencingRequest {
        private final String schema;
        private final String id;
        private String q;
        private String fields;
        private Boolean flatten;
        private String languages;
        private Boolean unpublished;
        private Boolean noSlowTotal;
        private Boolean noTotal;

        private APIcontentsGetReferencingRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Set q
         * @param q The optional json query. (optional)
         * @return APIcontentsGetReferencingRequest
         */
        public APIcontentsGetReferencingRequest q(String q) {
            this.q = q;
            return this;
        }

        /**
         * Set fields
         * @param fields The list of content fields (comma-separated). (optional)
         * @return APIcontentsGetReferencingRequest
         */
        public APIcontentsGetReferencingRequest fields(String fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Set flatten
         * @param flatten Provide the data as flat object. (optional)
         * @return APIcontentsGetReferencingRequest
         */
        public APIcontentsGetReferencingRequest flatten(Boolean flatten) {
            this.flatten = flatten;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsGetReferencingRequest
         */
        public APIcontentsGetReferencingRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsGetReferencingRequest
         */
        public APIcontentsGetReferencingRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set noSlowTotal
         * @param noSlowTotal Do not return the total amount, if it would be slow. (optional)
         * @return APIcontentsGetReferencingRequest
         */
        public APIcontentsGetReferencingRequest noSlowTotal(Boolean noSlowTotal) {
            this.noSlowTotal = noSlowTotal;
            return this;
        }

        /**
         * Set noTotal
         * @param noTotal Do not return the total amount. (optional)
         * @return APIcontentsGetReferencingRequest
         */
        public APIcontentsGetReferencingRequest noTotal(Boolean noTotal) {
            this.noTotal = noTotal;
            return this;
        }

        /**
         * Build call for getReferencing
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReferencingCall(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, _callback);
        }

        /**
         * Execute getReferencing request
         * @return ContentsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentsDto execute() throws ApiException {
            ApiResponse<ContentsDto> localVarResp = getReferencingWithHttpInfo(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal);
            return localVarResp.getData();
        }

        /**
         * Execute getReferencing request with HTTP info returned
         * @return ApiResponse&lt;ContentsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentsDto> executeWithHttpInfo() throws ApiException {
            return getReferencingWithHttpInfo(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal);
        }

        /**
         * Execute getReferencing request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentsDto> _callback) throws ApiException {
            return getReferencingAsync(schema, id, q, fields, flatten, languages, unpublished, noSlowTotal, noTotal, _callback);
        }
    }

    /**
     * Get a referencing contents of a content item.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content to fetch. (required)
     * @return APIcontentsGetReferencingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsGetReferencingRequest getReferencing(String schema, String id) {
        return new APIcontentsGetReferencingRequest(schema, id);
    }
    private okhttp3.Call patchContentCall(String schema, String id, Map<String, Map<String, Object>> requestBody, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchContentValidateBeforeCall(String schema, String id, Map<String, Map<String, Object>> requestBody, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling (Async)");
        }

        return patchContentCall(schema, id, requestBody, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> patchContentWithHttpInfo(String schema, String id, Map<String, Map<String, Object>> requestBody, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = patchContentValidateBeforeCall(schema, id, requestBody, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchContentAsync(String schema, String id, Map<String, Map<String, Object>> requestBody, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchContentValidateBeforeCall(schema, id, requestBody, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsPatchContentRequest {
        private final String schema;
        private final String id;
        private final Map<String, Map<String, Object>> requestBody;
        private Boolean unpublished;
        private String languages;

        private APIcontentsPatchContentRequest(String schema, String id, Map<String, Map<String, Object>> requestBody) {
            this.schema = schema;
            this.id = id;
            this.requestBody = requestBody;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsPatchContentRequest
         */
        public APIcontentsPatchContentRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsPatchContentRequest
         */
        public APIcontentsPatchContentRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for patchContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content patched. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return patchContentCall(schema, id, requestBody, unpublished, languages, _callback);
        }

        /**
         * Execute patchContent request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content patched. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = patchContentWithHttpInfo(schema, id, requestBody, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute patchContent request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content patched. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return patchContentWithHttpInfo(schema, id, requestBody, unpublished, languages);
        }

        /**
         * Execute patchContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content patched. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return patchContentAsync(schema, id, requestBody, unpublished, languages, _callback);
        }
    }

    /**
     * Patchs a content item.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to patch. (required)
     * @param requestBody The patch for the content item. (required)
     * @return APIcontentsPatchContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content patched. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsPatchContentRequest patchContent(String schema, String id, Map<String, Map<String, Object>> requestBody) {
        return new APIcontentsPatchContentRequest(schema, id, requestBody);
    }
    private okhttp3.Call postContentCall(String schema, Map<String, Map<String, Object>> requestBody, String status, String id, Boolean publish, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (publish != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publish", publish));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContentValidateBeforeCall(String schema, Map<String, Map<String, Object>> requestBody, String status, String id, Boolean publish, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling (Async)");
        }

        return postContentCall(schema, requestBody, status, id, publish, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> postContentWithHttpInfo(String schema, Map<String, Map<String, Object>> requestBody, String status, String id, Boolean publish, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = postContentValidateBeforeCall(schema, requestBody, status, id, publish, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postContentAsync(String schema, Map<String, Map<String, Object>> requestBody, String status, String id, Boolean publish, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postContentValidateBeforeCall(schema, requestBody, status, id, publish, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsPostContentRequest {
        private final String schema;
        private final Map<String, Map<String, Object>> requestBody;
        private String status;
        private String id;
        private Boolean publish;
        private Boolean unpublished;
        private String languages;

        private APIcontentsPostContentRequest(String schema, Map<String, Map<String, Object>> requestBody) {
            this.schema = schema;
            this.requestBody = requestBody;
        }

        /**
         * Set status
         * @param status The initial status. (optional)
         * @return APIcontentsPostContentRequest
         */
        public APIcontentsPostContentRequest status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Set id
         * @param id The optional custom content id. (optional)
         * @return APIcontentsPostContentRequest
         */
        public APIcontentsPostContentRequest id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Set publish
         * @param publish True to automatically publish the content. (optional)
         * @return APIcontentsPostContentRequest
         */
        public APIcontentsPostContentRequest publish(Boolean publish) {
            this.publish = publish;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsPostContentRequest
         */
        public APIcontentsPostContentRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsPostContentRequest
         */
        public APIcontentsPostContentRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for postContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Content created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postContentCall(schema, requestBody, status, id, publish, unpublished, languages, _callback);
        }

        /**
         * Execute postContent request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Content created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = postContentWithHttpInfo(schema, requestBody, status, id, publish, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute postContent request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Content created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return postContentWithHttpInfo(schema, requestBody, status, id, publish, unpublished, languages);
        }

        /**
         * Execute postContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Content created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return postContentAsync(schema, requestBody, status, id, publish, unpublished, languages, _callback);
        }
    }

    /**
     * Create a content item.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param requestBody The full data for the content item. (required)
     * @return APIcontentsPostContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Content created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsPostContentRequest postContent(String schema, Map<String, Map<String, Object>> requestBody) {
        return new APIcontentsPostContentRequest(schema, requestBody);
    }
    private okhttp3.Call postContentsCall(String schema, ImportContentsDto importContentsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importContentsDto;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/import"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContentsValidateBeforeCall(String schema, ImportContentsDto importContentsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'importContentsDto' is set
        if (importContentsDto == null) {
            throw new ApiException("Missing the required parameter 'importContentsDto' when calling (Async)");
        }

        return postContentsCall(schema, importContentsDto, _callback);

    }


    private ApiResponse<List<BulkResultDto>> postContentsWithHttpInfo(String schema, ImportContentsDto importContentsDto) throws ApiException {
        okhttp3.Call localVarCall = postContentsValidateBeforeCall(schema, importContentsDto, null);
        Type localVarReturnType = new TypeToken<List<BulkResultDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postContentsAsync(String schema, ImportContentsDto importContentsDto, final ApiCallback<List<BulkResultDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = postContentsValidateBeforeCall(schema, importContentsDto, _callback);
        Type localVarReturnType = new TypeToken<List<BulkResultDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsPostContentsRequest {
        private final String schema;
        private final ImportContentsDto importContentsDto;

        private APIcontentsPostContentsRequest(String schema, ImportContentsDto importContentsDto) {
            this.schema = schema;
            this.importContentsDto = importContentsDto;
        }

        /**
         * Build call for postContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postContentsCall(schema, importContentsDto, _callback);
        }

        /**
         * Execute postContents request
         * @return List&lt;BulkResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public List<BulkResultDto> execute() throws ApiException {
            ApiResponse<List<BulkResultDto>> localVarResp = postContentsWithHttpInfo(schema, importContentsDto);
            return localVarResp.getData();
        }

        /**
         * Execute postContents request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BulkResultDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<List<BulkResultDto>> executeWithHttpInfo() throws ApiException {
            return postContentsWithHttpInfo(schema, importContentsDto);
        }

        /**
         * Execute postContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<List<BulkResultDto>> _callback) throws ApiException {
            return postContentsAsync(schema, importContentsDto, _callback);
        }
    }

    /**
     * Import content items.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param importContentsDto The import request. (required)
     * @return APIcontentsPostContentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIcontentsPostContentsRequest postContents(String schema, ImportContentsDto importContentsDto) {
        return new APIcontentsPostContentsRequest(schema, importContentsDto);
    }
    private okhttp3.Call postUpsertContentCall(String schema, String id, Map<String, Map<String, Object>> requestBody, String status, Boolean patch, Boolean enrichDefaults, Boolean publish, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (patch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("patch", patch));
        }

        if (enrichDefaults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enrichDefaults", enrichDefaults));
        }

        if (publish != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publish", publish));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUpsertContentValidateBeforeCall(String schema, String id, Map<String, Map<String, Object>> requestBody, String status, Boolean patch, Boolean enrichDefaults, Boolean publish, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling (Async)");
        }

        return postUpsertContentCall(schema, id, requestBody, status, patch, enrichDefaults, publish, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> postUpsertContentWithHttpInfo(String schema, String id, Map<String, Map<String, Object>> requestBody, String status, Boolean patch, Boolean enrichDefaults, Boolean publish, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = postUpsertContentValidateBeforeCall(schema, id, requestBody, status, patch, enrichDefaults, publish, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postUpsertContentAsync(String schema, String id, Map<String, Map<String, Object>> requestBody, String status, Boolean patch, Boolean enrichDefaults, Boolean publish, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUpsertContentValidateBeforeCall(schema, id, requestBody, status, patch, enrichDefaults, publish, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsPostUpsertContentRequest {
        private final String schema;
        private final String id;
        private final Map<String, Map<String, Object>> requestBody;
        private String status;
        private Boolean patch;
        private Boolean enrichDefaults;
        private Boolean publish;
        private Boolean unpublished;
        private String languages;

        private APIcontentsPostUpsertContentRequest(String schema, String id, Map<String, Map<String, Object>> requestBody) {
            this.schema = schema;
            this.id = id;
            this.requestBody = requestBody;
        }

        /**
         * Set status
         * @param status The initial status. (optional)
         * @return APIcontentsPostUpsertContentRequest
         */
        public APIcontentsPostUpsertContentRequest status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Set patch
         * @param patch Makes the update as patch. (optional)
         * @return APIcontentsPostUpsertContentRequest
         */
        public APIcontentsPostUpsertContentRequest patch(Boolean patch) {
            this.patch = patch;
            return this;
        }

        /**
         * Set enrichDefaults
         * @param enrichDefaults Enrich the content with defaults. (optional)
         * @return APIcontentsPostUpsertContentRequest
         */
        public APIcontentsPostUpsertContentRequest enrichDefaults(Boolean enrichDefaults) {
            this.enrichDefaults = enrichDefaults;
            return this;
        }

        /**
         * Set publish
         * @param publish True to automatically publish the content. (optional)
         * @return APIcontentsPostUpsertContentRequest
         */
        public APIcontentsPostUpsertContentRequest publish(Boolean publish) {
            this.publish = publish;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsPostUpsertContentRequest
         */
        public APIcontentsPostUpsertContentRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsPostUpsertContentRequest
         */
        public APIcontentsPostUpsertContentRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for postUpsertContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content created or updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postUpsertContentCall(schema, id, requestBody, status, patch, enrichDefaults, publish, unpublished, languages, _callback);
        }

        /**
         * Execute postUpsertContent request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content created or updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = postUpsertContentWithHttpInfo(schema, id, requestBody, status, patch, enrichDefaults, publish, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute postUpsertContent request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content created or updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return postUpsertContentWithHttpInfo(schema, id, requestBody, status, patch, enrichDefaults, publish, unpublished, languages);
        }

        /**
         * Execute postUpsertContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content created or updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return postUpsertContentAsync(schema, id, requestBody, status, patch, enrichDefaults, publish, unpublished, languages, _callback);
        }
    }

    /**
     * Upsert a content item.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to update. (required)
     * @param requestBody The full data for the content item. (required)
     * @return APIcontentsPostUpsertContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content created or updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsPostUpsertContentRequest postUpsertContent(String schema, String id, Map<String, Map<String, Object>> requestBody) {
        return new APIcontentsPostUpsertContentRequest(schema, id, requestBody);
    }
    private okhttp3.Call putContentCall(String schema, String id, Map<String, Map<String, Object>> requestBody, Boolean enrichDefaults, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enrichDefaults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enrichDefaults", enrichDefaults));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putContentValidateBeforeCall(String schema, String id, Map<String, Map<String, Object>> requestBody, Boolean enrichDefaults, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling (Async)");
        }

        return putContentCall(schema, id, requestBody, enrichDefaults, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> putContentWithHttpInfo(String schema, String id, Map<String, Map<String, Object>> requestBody, Boolean enrichDefaults, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = putContentValidateBeforeCall(schema, id, requestBody, enrichDefaults, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putContentAsync(String schema, String id, Map<String, Map<String, Object>> requestBody, Boolean enrichDefaults, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putContentValidateBeforeCall(schema, id, requestBody, enrichDefaults, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsPutContentRequest {
        private final String schema;
        private final String id;
        private final Map<String, Map<String, Object>> requestBody;
        private Boolean enrichDefaults;
        private Boolean unpublished;
        private String languages;

        private APIcontentsPutContentRequest(String schema, String id, Map<String, Map<String, Object>> requestBody) {
            this.schema = schema;
            this.id = id;
            this.requestBody = requestBody;
        }

        /**
         * Set enrichDefaults
         * @param enrichDefaults Enrich the content with defaults. (optional)
         * @return APIcontentsPutContentRequest
         */
        public APIcontentsPutContentRequest enrichDefaults(Boolean enrichDefaults) {
            this.enrichDefaults = enrichDefaults;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsPutContentRequest
         */
        public APIcontentsPutContentRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsPutContentRequest
         */
        public APIcontentsPutContentRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for putContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putContentCall(schema, id, requestBody, enrichDefaults, unpublished, languages, _callback);
        }

        /**
         * Execute putContent request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = putContentWithHttpInfo(schema, id, requestBody, enrichDefaults, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute putContent request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return putContentWithHttpInfo(schema, id, requestBody, enrichDefaults, unpublished, languages);
        }

        /**
         * Execute putContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return putContentAsync(schema, id, requestBody, enrichDefaults, unpublished, languages, _callback);
        }
    }

    /**
     * Update a content item.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to update. (required)
     * @param requestBody The full data for the content item. (required)
     * @return APIcontentsPutContentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsPutContentRequest putContent(String schema, String id, Map<String, Map<String, Object>> requestBody) {
        return new APIcontentsPutContentRequest(schema, id, requestBody);
    }
    private okhttp3.Call putContentDefaultsCall(String schema, String id, Boolean enrichRequiredFields, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/defaults"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enrichRequiredFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enrichRequiredFields", enrichRequiredFields));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putContentDefaultsValidateBeforeCall(String schema, String id, Boolean enrichRequiredFields, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        return putContentDefaultsCall(schema, id, enrichRequiredFields, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> putContentDefaultsWithHttpInfo(String schema, String id, Boolean enrichRequiredFields, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = putContentDefaultsValidateBeforeCall(schema, id, enrichRequiredFields, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putContentDefaultsAsync(String schema, String id, Boolean enrichRequiredFields, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putContentDefaultsValidateBeforeCall(schema, id, enrichRequiredFields, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsPutContentDefaultsRequest {
        private final String schema;
        private final String id;
        private Boolean enrichRequiredFields;
        private Boolean unpublished;
        private String languages;

        private APIcontentsPutContentDefaultsRequest(String schema, String id) {
            this.schema = schema;
            this.id = id;
        }

        /**
         * Set enrichRequiredFields
         * @param enrichRequiredFields True, to also enrich required fields. Default: false.              (optional)
         * @return APIcontentsPutContentDefaultsRequest
         */
        public APIcontentsPutContentDefaultsRequest enrichRequiredFields(Boolean enrichRequiredFields) {
            this.enrichRequiredFields = enrichRequiredFields;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsPutContentDefaultsRequest
         */
        public APIcontentsPutContentDefaultsRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsPutContentDefaultsRequest
         */
        public APIcontentsPutContentDefaultsRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for putContentDefaults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putContentDefaultsCall(schema, id, enrichRequiredFields, unpublished, languages, _callback);
        }

        /**
         * Execute putContentDefaults request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = putContentDefaultsWithHttpInfo(schema, id, enrichRequiredFields, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute putContentDefaults request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return putContentDefaultsWithHttpInfo(schema, id, enrichRequiredFields, unpublished, languages);
        }

        /**
         * Execute putContentDefaults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return putContentDefaultsAsync(schema, id, enrichRequiredFields, unpublished, languages, _callback);
        }
    }

    /**
     * Enrich a content item with defaults.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to update. (required)
     * @return APIcontentsPutContentDefaultsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content references, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsPutContentDefaultsRequest putContentDefaults(String schema, String id) {
        return new APIcontentsPutContentDefaultsRequest(schema, id);
    }
    private okhttp3.Call putContentStatusCall(String schema, String id, ChangeStatusDto changeStatusDto, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeStatusDto;

        // create path and map variables
        String localVarPath = "/api/content/$app$/{schema}/{id}/status"
            .replace("{" + "schema" + "}", localVarApiClient.escapeString(schema.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putContentStatusValidateBeforeCall(String schema, String id, ChangeStatusDto changeStatusDto, Boolean unpublished, String languages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling (Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling (Async)");
        }

        // verify the required parameter 'changeStatusDto' is set
        if (changeStatusDto == null) {
            throw new ApiException("Missing the required parameter 'changeStatusDto' when calling (Async)");
        }

        return putContentStatusCall(schema, id, changeStatusDto, unpublished, languages, _callback);

    }


    private ApiResponse<ContentDto> putContentStatusWithHttpInfo(String schema, String id, ChangeStatusDto changeStatusDto, Boolean unpublished, String languages) throws ApiException {
        okhttp3.Call localVarCall = putContentStatusValidateBeforeCall(schema, id, changeStatusDto, unpublished, languages, null);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putContentStatusAsync(String schema, String id, ChangeStatusDto changeStatusDto, Boolean unpublished, String languages, final ApiCallback<ContentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = putContentStatusValidateBeforeCall(schema, id, changeStatusDto, unpublished, languages, _callback);
        Type localVarReturnType = new TypeToken<ContentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsPutContentStatusRequest {
        private final String schema;
        private final String id;
        private final ChangeStatusDto changeStatusDto;
        private Boolean unpublished;
        private String languages;

        private APIcontentsPutContentStatusRequest(String schema, String id, ChangeStatusDto changeStatusDto) {
            this.schema = schema;
            this.id = id;
            this.changeStatusDto = changeStatusDto;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsPutContentStatusRequest
         */
        public APIcontentsPutContentStatusRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsPutContentStatusRequest
         */
        public APIcontentsPutContentStatusRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Build call for putContentStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content status changed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putContentStatusCall(schema, id, changeStatusDto, unpublished, languages, _callback);
        }

        /**
         * Execute putContentStatus request
         * @return ContentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content status changed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentDto execute() throws ApiException {
            ApiResponse<ContentDto> localVarResp = putContentStatusWithHttpInfo(schema, id, changeStatusDto, unpublished, languages);
            return localVarResp.getData();
        }

        /**
         * Execute putContentStatus request with HTTP info returned
         * @return ApiResponse&lt;ContentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content status changed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentDto> executeWithHttpInfo() throws ApiException {
            return putContentStatusWithHttpInfo(schema, id, changeStatusDto, unpublished, languages);
        }

        /**
         * Execute putContentStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Content status changed. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentDto> _callback) throws ApiException {
            return putContentStatusAsync(schema, id, changeStatusDto, unpublished, languages, _callback);
        }
    }

    /**
     * Change status of a content item.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param schema The name of the schema. (required)
     * @param id The ID of the content item to change. (required)
     * @param changeStatusDto The status request. (required)
     * @return APIcontentsPutContentStatusRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content status changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Content request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Content, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsPutContentStatusRequest putContentStatus(String schema, String id, ChangeStatusDto changeStatusDto) {
        return new APIcontentsPutContentStatusRequest(schema, id, changeStatusDto);
    }
    private okhttp3.Call bulkUpdateAllContentsCall(BulkUpdateContentsDto bulkUpdateContentsDto, String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkUpdateContentsDto;

        // create path and map variables
        String localVarPath = "/api/content/$app$/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schema != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema", schema));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateAllContentsValidateBeforeCall(BulkUpdateContentsDto bulkUpdateContentsDto, String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkUpdateContentsDto' is set
        if (bulkUpdateContentsDto == null) {
            throw new ApiException("Missing the required parameter 'bulkUpdateContentsDto' when calling (Async)");
        }

        return bulkUpdateAllContentsCall(bulkUpdateContentsDto, schema, _callback);

    }


    private ApiResponse<List<BulkResultDto>> bulkUpdateAllContentsWithHttpInfo(BulkUpdateContentsDto bulkUpdateContentsDto, String schema) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateAllContentsValidateBeforeCall(bulkUpdateContentsDto, schema, null);
        Type localVarReturnType = new TypeToken<List<BulkResultDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkUpdateAllContentsAsync(BulkUpdateContentsDto bulkUpdateContentsDto, String schema, final ApiCallback<List<BulkResultDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateAllContentsValidateBeforeCall(bulkUpdateContentsDto, schema, _callback);
        Type localVarReturnType = new TypeToken<List<BulkResultDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsSharedBulkUpdateAllContentsRequest {
        private final BulkUpdateContentsDto bulkUpdateContentsDto;
        private String schema;

        private APIcontentsSharedBulkUpdateAllContentsRequest(BulkUpdateContentsDto bulkUpdateContentsDto) {
            this.bulkUpdateContentsDto = bulkUpdateContentsDto;
        }

        /**
         * Set schema
         * @param schema The name of the schema. (optional)
         * @return APIcontentsSharedBulkUpdateAllContentsRequest
         */
        public APIcontentsSharedBulkUpdateAllContentsRequest schema(String schema) {
            this.schema = schema;
            return this;
        }

        /**
         * Build call for bulkUpdateAllContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkUpdateAllContentsCall(bulkUpdateContentsDto, schema, _callback);
        }

        /**
         * Execute bulkUpdateAllContents request
         * @return List&lt;BulkResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<BulkResultDto> execute() throws ApiException {
            ApiResponse<List<BulkResultDto>> localVarResp = bulkUpdateAllContentsWithHttpInfo(bulkUpdateContentsDto, schema);
            return localVarResp.getData();
        }

        /**
         * Execute bulkUpdateAllContents request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BulkResultDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BulkResultDto>> executeWithHttpInfo() throws ApiException {
            return bulkUpdateAllContentsWithHttpInfo(bulkUpdateContentsDto, schema);
        }

        /**
         * Execute bulkUpdateAllContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BulkResultDto>> _callback) throws ApiException {
            return bulkUpdateAllContentsAsync(bulkUpdateContentsDto, schema, _callback);
        }
    }

    /**
     * Bulk update content items.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param bulkUpdateContentsDto The bulk update request. (required)
     * @return APIcontentsSharedBulkUpdateAllContentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Contents request not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contents references, schema or app not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsSharedBulkUpdateAllContentsRequest bulkUpdateAllContents(BulkUpdateContentsDto bulkUpdateContentsDto) {
        return new APIcontentsSharedBulkUpdateAllContentsRequest(bulkUpdateContentsDto);
    }
    private okhttp3.Call getAllContentsCall(String ids, OffsetDateTime scheduleFrom, OffsetDateTime scheduleTo, String referencing, String references, String q, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (scheduleFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleFrom", scheduleFrom));
        }

        if (scheduleTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheduleTo", scheduleTo));
        }

        if (referencing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referencing", referencing));
        }

        if (references != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("references", references));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (fields != null) {
            localVarHeaderParams.put("X-Fields", localVarApiClient.parameterToString(fields));
        }

        if (flatten != null) {
            localVarHeaderParams.put("X-Flatten", localVarApiClient.parameterToString(flatten));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        if (noSlowTotal != null) {
            localVarHeaderParams.put("X-NoSlowTotal", localVarApiClient.parameterToString(noSlowTotal));
        }

        if (noTotal != null) {
            localVarHeaderParams.put("X-NoTotal", localVarApiClient.parameterToString(noTotal));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllContentsValidateBeforeCall(String ids, OffsetDateTime scheduleFrom, OffsetDateTime scheduleTo, String referencing, String references, String q, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        return getAllContentsCall(ids, scheduleFrom, scheduleTo, referencing, references, q, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);

    }


    private ApiResponse<ContentsDto> getAllContentsWithHttpInfo(String ids, OffsetDateTime scheduleFrom, OffsetDateTime scheduleTo, String referencing, String references, String q, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished) throws ApiException {
        okhttp3.Call localVarCall = getAllContentsValidateBeforeCall(ids, scheduleFrom, scheduleTo, referencing, references, q, fields, flatten, languages, noSlowTotal, noTotal, unpublished, null);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllContentsAsync(String ids, OffsetDateTime scheduleFrom, OffsetDateTime scheduleTo, String referencing, String references, String q, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback<ContentsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllContentsValidateBeforeCall(ids, scheduleFrom, scheduleTo, referencing, references, q, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsSharedGetAllContentsRequest {
        private String ids;
        private OffsetDateTime scheduleFrom;
        private OffsetDateTime scheduleTo;
        private String referencing;
        private String references;
        private String q;
        private String fields;
        private Boolean flatten;
        private String languages;
        private Boolean noSlowTotal;
        private Boolean noTotal;
        private Boolean unpublished;

        private APIcontentsSharedGetAllContentsRequest() {
        }

        /**
         * Set ids
         * @param ids The list of ids to query. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest ids(String ids) {
            this.ids = ids;
            return this;
        }

        /**
         * Set scheduleFrom
         * @param scheduleFrom The start of the schedule. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest scheduleFrom(OffsetDateTime scheduleFrom) {
            this.scheduleFrom = scheduleFrom;
            return this;
        }

        /**
         * Set scheduleTo
         * @param scheduleTo The end of the schedule. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest scheduleTo(OffsetDateTime scheduleTo) {
            this.scheduleTo = scheduleTo;
            return this;
        }

        /**
         * Set referencing
         * @param referencing The ID of the referencing content item. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest referencing(String referencing) {
            this.referencing = referencing;
            return this;
        }

        /**
         * Set references
         * @param references The ID of the reference content item. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest references(String references) {
            this.references = references;
            return this;
        }

        /**
         * Set q
         * @param q The optional json query. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest q(String q) {
            this.q = q;
            return this;
        }

        /**
         * Set fields
         * @param fields The list of content fields (comma-separated). (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest fields(String fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Set flatten
         * @param flatten Provide the data as flat object. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest flatten(Boolean flatten) {
            this.flatten = flatten;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Set noSlowTotal
         * @param noSlowTotal Do not return the total amount, if it would be slow. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest noSlowTotal(Boolean noSlowTotal) {
            this.noSlowTotal = noSlowTotal;
            return this;
        }

        /**
         * Set noTotal
         * @param noTotal Do not return the total amount. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest noTotal(Boolean noTotal) {
            this.noTotal = noTotal;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsSharedGetAllContentsRequest
         */
        public APIcontentsSharedGetAllContentsRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Build call for getAllContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllContentsCall(ids, scheduleFrom, scheduleTo, referencing, references, q, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        }

        /**
         * Execute getAllContents request
         * @return ContentsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentsDto execute() throws ApiException {
            ApiResponse<ContentsDto> localVarResp = getAllContentsWithHttpInfo(ids, scheduleFrom, scheduleTo, referencing, references, q, fields, flatten, languages, noSlowTotal, noTotal, unpublished);
            return localVarResp.getData();
        }

        /**
         * Execute getAllContents request with HTTP info returned
         * @return ApiResponse&lt;ContentsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentsDto> executeWithHttpInfo() throws ApiException {
            return getAllContentsWithHttpInfo(ids, scheduleFrom, scheduleTo, referencing, references, q, fields, flatten, languages, noSlowTotal, noTotal, unpublished);
        }

        /**
         * Execute getAllContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentsDto> _callback) throws ApiException {
            return getAllContentsAsync(ids, scheduleFrom, scheduleTo, referencing, references, q, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        }
    }

    /**
     * Queries contents.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @return APIcontentsSharedGetAllContentsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsSharedGetAllContentsRequest getAllContents() {
        return new APIcontentsSharedGetAllContentsRequest();
    }
    private okhttp3.Call getAllContentsPostCall(AllContentsByPostDto allContentsByPostDto, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = allContentsByPostDto;

        // create path and map variables
        String localVarPath = "/api/content/$app$";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarHeaderParams.put("X-Fields", localVarApiClient.parameterToString(fields));
        }

        if (flatten != null) {
            localVarHeaderParams.put("X-Flatten", localVarApiClient.parameterToString(flatten));
        }

        if (languages != null) {
            localVarHeaderParams.put("X-Languages", localVarApiClient.parameterToString(languages));
        }

        if (noSlowTotal != null) {
            localVarHeaderParams.put("X-NoSlowTotal", localVarApiClient.parameterToString(noSlowTotal));
        }

        if (noTotal != null) {
            localVarHeaderParams.put("X-NoTotal", localVarApiClient.parameterToString(noTotal));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllContentsPostValidateBeforeCall(AllContentsByPostDto allContentsByPostDto, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'allContentsByPostDto' is set
        if (allContentsByPostDto == null) {
            throw new ApiException("Missing the required parameter 'allContentsByPostDto' when calling (Async)");
        }

        return getAllContentsPostCall(allContentsByPostDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);

    }


    private ApiResponse<ContentsDto> getAllContentsPostWithHttpInfo(AllContentsByPostDto allContentsByPostDto, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished) throws ApiException {
        okhttp3.Call localVarCall = getAllContentsPostValidateBeforeCall(allContentsByPostDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, null);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllContentsPostAsync(AllContentsByPostDto allContentsByPostDto, String fields, Boolean flatten, String languages, Boolean noSlowTotal, Boolean noTotal, Boolean unpublished, final ApiCallback<ContentsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllContentsPostValidateBeforeCall(allContentsByPostDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        Type localVarReturnType = new TypeToken<ContentsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsSharedGetAllContentsPostRequest {
        private final AllContentsByPostDto allContentsByPostDto;
        private String fields;
        private Boolean flatten;
        private String languages;
        private Boolean noSlowTotal;
        private Boolean noTotal;
        private Boolean unpublished;

        private APIcontentsSharedGetAllContentsPostRequest(AllContentsByPostDto allContentsByPostDto) {
            this.allContentsByPostDto = allContentsByPostDto;
        }

        /**
         * Set fields
         * @param fields The list of content fields (comma-separated). (optional)
         * @return APIcontentsSharedGetAllContentsPostRequest
         */
        public APIcontentsSharedGetAllContentsPostRequest fields(String fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Set flatten
         * @param flatten Provide the data as flat object. (optional)
         * @return APIcontentsSharedGetAllContentsPostRequest
         */
        public APIcontentsSharedGetAllContentsPostRequest flatten(Boolean flatten) {
            this.flatten = flatten;
            return this;
        }

        /**
         * Set languages
         * @param languages The list of languages to resolve (comma-separated). (optional)
         * @return APIcontentsSharedGetAllContentsPostRequest
         */
        public APIcontentsSharedGetAllContentsPostRequest languages(String languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Set noSlowTotal
         * @param noSlowTotal Do not return the total amount, if it would be slow. (optional)
         * @return APIcontentsSharedGetAllContentsPostRequest
         */
        public APIcontentsSharedGetAllContentsPostRequest noSlowTotal(Boolean noSlowTotal) {
            this.noSlowTotal = noSlowTotal;
            return this;
        }

        /**
         * Set noTotal
         * @param noTotal Do not return the total amount. (optional)
         * @return APIcontentsSharedGetAllContentsPostRequest
         */
        public APIcontentsSharedGetAllContentsPostRequest noTotal(Boolean noTotal) {
            this.noTotal = noTotal;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsSharedGetAllContentsPostRequest
         */
        public APIcontentsSharedGetAllContentsPostRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Build call for getAllContentsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllContentsPostCall(allContentsByPostDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        }

        /**
         * Execute getAllContentsPost request
         * @return ContentsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ContentsDto execute() throws ApiException {
            ApiResponse<ContentsDto> localVarResp = getAllContentsPostWithHttpInfo(allContentsByPostDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished);
            return localVarResp.getData();
        }

        /**
         * Execute getAllContentsPost request with HTTP info returned
         * @return ApiResponse&lt;ContentsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentsDto> executeWithHttpInfo() throws ApiException {
            return getAllContentsPostWithHttpInfo(allContentsByPostDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished);
        }

        /**
         * Execute getAllContentsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentsDto> _callback) throws ApiException {
            return getAllContentsPostAsync(allContentsByPostDto, fields, flatten, languages, noSlowTotal, noTotal, unpublished, _callback);
        }
    }

    /**
     * Queries contents.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @param allContentsByPostDto The required query object. (required)
     * @return APIcontentsSharedGetAllContentsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsSharedGetAllContentsPostRequest getAllContentsPost(AllContentsByPostDto allContentsByPostDto) {
        return new APIcontentsSharedGetAllContentsPostRequest(allContentsByPostDto);
    }
    private okhttp3.Call getGraphQLCall(String theQueryString, String variables, String operationName, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/graphql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (theQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("The query string", theQueryString));
        }

        if (variables != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variables", variables));
        }

        if (operationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operationName", operationName));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGraphQLValidateBeforeCall(String theQueryString, String variables, String operationName, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        return getGraphQLCall(theQueryString, variables, operationName, unpublished, _callback);

    }


    private ApiResponse<Object> getGraphQLWithHttpInfo(String theQueryString, String variables, String operationName, Boolean unpublished) throws ApiException {
        okhttp3.Call localVarCall = getGraphQLValidateBeforeCall(theQueryString, variables, operationName, unpublished, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGraphQLAsync(String theQueryString, String variables, String operationName, Boolean unpublished, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGraphQLValidateBeforeCall(theQueryString, variables, operationName, unpublished, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsSharedGetGraphQLRequest {
        private String theQueryString;
        private String variables;
        private String operationName;
        private Boolean unpublished;

        private APIcontentsSharedGetGraphQLRequest() {
        }

        /**
         * Set theQueryString
         * @param theQueryString The optional version of the asset. (optional)
         * @return APIcontentsSharedGetGraphQLRequest
         */
        public APIcontentsSharedGetGraphQLRequest theQueryString(String theQueryString) {
            this.theQueryString = theQueryString;
            return this;
        }

        /**
         * Set variables
         * @param variables The optional operation variables. (optional)
         * @return APIcontentsSharedGetGraphQLRequest
         */
        public APIcontentsSharedGetGraphQLRequest variables(String variables) {
            this.variables = variables;
            return this;
        }

        /**
         * Set operationName
         * @param operationName The optional operation name. (optional)
         * @return APIcontentsSharedGetGraphQLRequest
         */
        public APIcontentsSharedGetGraphQLRequest operationName(String operationName) {
            this.operationName = operationName;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsSharedGetGraphQLRequest
         */
        public APIcontentsSharedGetGraphQLRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Build call for getGraphQL
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGraphQLCall(theQueryString, variables, operationName, unpublished, _callback);
        }

        /**
         * Execute getGraphQL request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getGraphQLWithHttpInfo(theQueryString, variables, operationName, unpublished);
            return localVarResp.getData();
        }

        /**
         * Execute getGraphQL request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getGraphQLWithHttpInfo(theQueryString, variables, operationName, unpublished);
        }

        /**
         * Execute getGraphQL request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getGraphQLAsync(theQueryString, variables, operationName, unpublished, _callback);
        }
    }

    /**
     * GraphQL endpoint.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @return APIcontentsSharedGetGraphQLRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsSharedGetGraphQLRequest getGraphQL() {
        return new APIcontentsSharedGetGraphQLRequest();
    }
    private okhttp3.Call getGraphQLBatchCall(String theQueryString, String variables, String operationName, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/content/$app$/graphql/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (theQueryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("The query string", theQueryString));
        }

        if (variables != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variables", variables));
        }

        if (operationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operationName", operationName));
        }

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGraphQLBatchValidateBeforeCall(String theQueryString, String variables, String operationName, Boolean unpublished, final ApiCallback _callback) throws ApiException {
        return getGraphQLBatchCall(theQueryString, variables, operationName, unpublished, _callback);

    }


    private ApiResponse<Object> getGraphQLBatchWithHttpInfo(String theQueryString, String variables, String operationName, Boolean unpublished) throws ApiException {
        okhttp3.Call localVarCall = getGraphQLBatchValidateBeforeCall(theQueryString, variables, operationName, unpublished, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGraphQLBatchAsync(String theQueryString, String variables, String operationName, Boolean unpublished, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGraphQLBatchValidateBeforeCall(theQueryString, variables, operationName, unpublished, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsSharedGetGraphQLBatchRequest {
        private String theQueryString;
        private String variables;
        private String operationName;
        private Boolean unpublished;

        private APIcontentsSharedGetGraphQLBatchRequest() {
        }

        /**
         * Set theQueryString
         * @param theQueryString The optional version of the asset. (optional)
         * @return APIcontentsSharedGetGraphQLBatchRequest
         */
        public APIcontentsSharedGetGraphQLBatchRequest theQueryString(String theQueryString) {
            this.theQueryString = theQueryString;
            return this;
        }

        /**
         * Set variables
         * @param variables The optional operation variables. (optional)
         * @return APIcontentsSharedGetGraphQLBatchRequest
         */
        public APIcontentsSharedGetGraphQLBatchRequest variables(String variables) {
            this.variables = variables;
            return this;
        }

        /**
         * Set operationName
         * @param operationName The optional operation name. (optional)
         * @return APIcontentsSharedGetGraphQLBatchRequest
         */
        public APIcontentsSharedGetGraphQLBatchRequest operationName(String operationName) {
            this.operationName = operationName;
            return this;
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsSharedGetGraphQLBatchRequest
         */
        public APIcontentsSharedGetGraphQLBatchRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Build call for getGraphQLBatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGraphQLBatchCall(theQueryString, variables, operationName, unpublished, _callback);
        }

        /**
         * Execute getGraphQLBatch request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getGraphQLBatchWithHttpInfo(theQueryString, variables, operationName, unpublished);
            return localVarResp.getData();
        }

        /**
         * Execute getGraphQLBatch request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getGraphQLBatchWithHttpInfo(theQueryString, variables, operationName, unpublished);
        }

        /**
         * Execute getGraphQLBatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getGraphQLBatchAsync(theQueryString, variables, operationName, unpublished, _callback);
        }
    }

    /**
     * GraphQL batch endpoint.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @return APIcontentsSharedGetGraphQLBatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsSharedGetGraphQLBatchRequest getGraphQLBatch() {
        return new APIcontentsSharedGetGraphQLBatchRequest();
    }
    private okhttp3.Call postGraphQLCall(Boolean unpublished, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/content/$app$/graphql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postGraphQLValidateBeforeCall(Boolean unpublished, Object body, final ApiCallback _callback) throws ApiException {
        return postGraphQLCall(unpublished, body, _callback);

    }


    private ApiResponse<Object> postGraphQLWithHttpInfo(Boolean unpublished, Object body) throws ApiException {
        okhttp3.Call localVarCall = postGraphQLValidateBeforeCall(unpublished, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postGraphQLAsync(Boolean unpublished, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postGraphQLValidateBeforeCall(unpublished, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsSharedPostGraphQLRequest {
        private Boolean unpublished;
        private Object body;

        private APIcontentsSharedPostGraphQLRequest() {
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsSharedPostGraphQLRequest
         */
        public APIcontentsSharedPostGraphQLRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set body
         * @param body The graphql request. (optional)
         * @return APIcontentsSharedPostGraphQLRequest
         */
        public APIcontentsSharedPostGraphQLRequest body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for postGraphQL
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postGraphQLCall(unpublished, body, _callback);
        }

        /**
         * Execute postGraphQL request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = postGraphQLWithHttpInfo(unpublished, body);
            return localVarResp.getData();
        }

        /**
         * Execute postGraphQL request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return postGraphQLWithHttpInfo(unpublished, body);
        }

        /**
         * Execute postGraphQL request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return postGraphQLAsync(unpublished, body, _callback);
        }
    }

    /**
     * GraphQL endpoint.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @return APIcontentsSharedPostGraphQLRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsSharedPostGraphQLRequest postGraphQL() {
        return new APIcontentsSharedPostGraphQLRequest();
    }
    private okhttp3.Call postGraphQLBatchCall(Boolean unpublished, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/content/$app$/graphql/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unpublished != null) {
            localVarHeaderParams.put("X-Unpublished", localVarApiClient.parameterToString(unpublished));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postGraphQLBatchValidateBeforeCall(Boolean unpublished, Object body, final ApiCallback _callback) throws ApiException {
        return postGraphQLBatchCall(unpublished, body, _callback);

    }


    private ApiResponse<Object> postGraphQLBatchWithHttpInfo(Boolean unpublished, Object body) throws ApiException {
        okhttp3.Call localVarCall = postGraphQLBatchValidateBeforeCall(unpublished, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postGraphQLBatchAsync(Boolean unpublished, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postGraphQLBatchValidateBeforeCall(unpublished, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcontentsSharedPostGraphQLBatchRequest {
        private Boolean unpublished;
        private Object body;

        private APIcontentsSharedPostGraphQLBatchRequest() {
        }

        /**
         * Set unpublished
         * @param unpublished Return unpublished content items. (optional)
         * @return APIcontentsSharedPostGraphQLBatchRequest
         */
        public APIcontentsSharedPostGraphQLBatchRequest unpublished(Boolean unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        /**
         * Set body
         * @param body The graphql request. (optional)
         * @return APIcontentsSharedPostGraphQLBatchRequest
         */
        public APIcontentsSharedPostGraphQLBatchRequest body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for postGraphQLBatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return postGraphQLBatchCall(unpublished, body, _callback);
        }

        /**
         * Execute postGraphQLBatch request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = postGraphQLBatchWithHttpInfo(unpublished, body);
            return localVarResp.getData();
        }

        /**
         * Execute postGraphQLBatch request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return postGraphQLBatchWithHttpInfo(unpublished, body);
        }

        /**
         * Execute postGraphQLBatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return postGraphQLBatchAsync(unpublished, body, _callback);
        }
    }

    /**
     * GraphQL batch endpoint.
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @return APIcontentsSharedPostGraphQLBatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contents returned or mutated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcontentsSharedPostGraphQLBatchRequest postGraphQLBatch() {
        return new APIcontentsSharedPostGraphQLBatchRequest();
    }
}
