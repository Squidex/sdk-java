/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.core.api;

import com.squidex.api.core.ApiCallback;
import com.squidex.api.core.ApiClient;
import com.squidex.api.core.ApiException;
import com.squidex.api.core.ApiResponse;
import com.squidex.api.core.Configuration;
import com.squidex.api.core.Pair;
import com.squidex.api.core.ProgressRequestBody;
import com.squidex.api.core.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.squidex.api.types.CallsUsageDtoDto;
import com.squidex.api.types.CurrentStorageDto;
import com.squidex.api.types.ErrorDto;
import java.time.LocalDate;
import com.squidex.api.types.LogDownloadDto;
import com.squidex.api.types.StorageUsagePerDateDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@SuppressWarnings("ALL")
public class StatisticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCurrentStorageSizeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/usages/storage/today";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentStorageSizeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentStorageSizeCall(_callback);

    }


    private ApiResponse<CurrentStorageDto> getCurrentStorageSizeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentStorageSizeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CurrentStorageDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentStorageSizeAsync(final ApiCallback<CurrentStorageDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentStorageSizeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CurrentStorageDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIusagesGetCurrentStorageSizeRequest {

        private APIusagesGetCurrentStorageSizeRequest() {
        }

        /**
         * Build call for getCurrentStorageSize
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentStorageSizeCall(_callback);
        }

        /**
         * Execute getCurrentStorageSize request
         * @return CurrentStorageDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CurrentStorageDto execute() throws ApiException {
            ApiResponse<CurrentStorageDto> localVarResp = getCurrentStorageSizeWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getCurrentStorageSize request with HTTP info returned
         * @return ApiResponse&lt;CurrentStorageDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrentStorageDto> executeWithHttpInfo() throws ApiException {
            return getCurrentStorageSizeWithHttpInfo();
        }

        /**
         * Execute getCurrentStorageSize request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrentStorageDto> _callback) throws ApiException {
            return getCurrentStorageSizeAsync(_callback);
        }
    }

    /**
     * Get total asset size for app.
     * 
     * @return APIusagesGetCurrentStorageSizeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIusagesGetCurrentStorageSizeRequest getCurrentStorageSize() {
        return new APIusagesGetCurrentStorageSizeRequest();
    }
    private okhttp3.Call getLogCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/usages/log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLogCall(_callback);

    }


    private ApiResponse<LogDownloadDto> getLogWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLogValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LogDownloadDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLogAsync(final ApiCallback<LogDownloadDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LogDownloadDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIusagesGetLogRequest {

        private APIusagesGetLogRequest() {
        }

        /**
         * Build call for getLog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Usage tracking results returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLogCall(_callback);
        }

        /**
         * Execute getLog request
         * @return LogDownloadDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Usage tracking results returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public LogDownloadDto execute() throws ApiException {
            ApiResponse<LogDownloadDto> localVarResp = getLogWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getLog request with HTTP info returned
         * @return ApiResponse&lt;LogDownloadDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Usage tracking results returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogDownloadDto> executeWithHttpInfo() throws ApiException {
            return getLogWithHttpInfo();
        }

        /**
         * Execute getLog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Usage tracking results returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogDownloadDto> _callback) throws ApiException {
            return getLogAsync(_callback);
        }
    }

    /**
     * Get api calls as log file.
     * 
     * @return APIusagesGetLogRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage tracking results returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIusagesGetLogRequest getLog() {
        return new APIusagesGetLogRequest();
    }
    private okhttp3.Call getStorageSizesCall(LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/usages/storage/{fromDate}/{toDate}"
            .replace("{" + "fromDate" + "}", localVarApiClient.escapeString(fromDate.toString()))
            .replace("{" + "toDate" + "}", localVarApiClient.escapeString(toDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStorageSizesValidateBeforeCall(LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling (Async)");
        }

        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling (Async)");
        }

        return getStorageSizesCall(fromDate, toDate, _callback);

    }


    private ApiResponse<List<StorageUsagePerDateDto>> getStorageSizesWithHttpInfo(LocalDate fromDate, LocalDate toDate) throws ApiException {
        okhttp3.Call localVarCall = getStorageSizesValidateBeforeCall(fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<List<StorageUsagePerDateDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStorageSizesAsync(LocalDate fromDate, LocalDate toDate, final ApiCallback<List<StorageUsagePerDateDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStorageSizesValidateBeforeCall(fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<List<StorageUsagePerDateDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIusagesGetStorageSizesRequest {
        private final LocalDate fromDate;
        private final LocalDate toDate;

        private APIusagesGetStorageSizesRequest(LocalDate fromDate, LocalDate toDate) {
            this.fromDate = fromDate;
            this.toDate = toDate;
        }

        /**
         * Build call for getStorageSizes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStorageSizesCall(fromDate, toDate, _callback);
        }

        /**
         * Execute getStorageSizes request
         * @return List&lt;StorageUsagePerDateDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<StorageUsagePerDateDto> execute() throws ApiException {
            ApiResponse<List<StorageUsagePerDateDto>> localVarResp = getStorageSizesWithHttpInfo(fromDate, toDate);
            return localVarResp.getData();
        }

        /**
         * Execute getStorageSizes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;StorageUsagePerDateDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<StorageUsagePerDateDto>> executeWithHttpInfo() throws ApiException {
            return getStorageSizesWithHttpInfo(fromDate, toDate);
        }

        /**
         * Execute getStorageSizes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<StorageUsagePerDateDto>> _callback) throws ApiException {
            return getStorageSizesAsync(fromDate, toDate, _callback);
        }
    }

    /**
     * Get asset usage by date for app.
     * 
     * @param fromDate The from date. (required)
     * @param toDate The to date. (required)
     * @return APIusagesGetStorageSizesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIusagesGetStorageSizesRequest getStorageSizes(LocalDate fromDate, LocalDate toDate) {
        return new APIusagesGetStorageSizesRequest(fromDate, toDate);
    }
    private okhttp3.Call getStorageSizesForTeamCall(String team, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/usages/storage/{fromDate}/{toDate}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "fromDate" + "}", localVarApiClient.escapeString(fromDate.toString()))
            .replace("{" + "toDate" + "}", localVarApiClient.escapeString(toDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStorageSizesForTeamValidateBeforeCall(String team, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling (Async)");
        }

        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling (Async)");
        }

        return getStorageSizesForTeamCall(team, fromDate, toDate, _callback);

    }


    private ApiResponse<List<StorageUsagePerDateDto>> getStorageSizesForTeamWithHttpInfo(String team, LocalDate fromDate, LocalDate toDate) throws ApiException {
        okhttp3.Call localVarCall = getStorageSizesForTeamValidateBeforeCall(team, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<List<StorageUsagePerDateDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStorageSizesForTeamAsync(String team, LocalDate fromDate, LocalDate toDate, final ApiCallback<List<StorageUsagePerDateDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStorageSizesForTeamValidateBeforeCall(team, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<List<StorageUsagePerDateDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIusagesGetStorageSizesForTeamRequest {
        private final String team;
        private final LocalDate fromDate;
        private final LocalDate toDate;

        private APIusagesGetStorageSizesForTeamRequest(String team, LocalDate fromDate, LocalDate toDate) {
            this.team = team;
            this.fromDate = fromDate;
            this.toDate = toDate;
        }

        /**
         * Build call for getStorageSizesForTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStorageSizesForTeamCall(team, fromDate, toDate, _callback);
        }

        /**
         * Execute getStorageSizesForTeam request
         * @return List&lt;StorageUsagePerDateDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public List<StorageUsagePerDateDto> execute() throws ApiException {
            ApiResponse<List<StorageUsagePerDateDto>> localVarResp = getStorageSizesForTeamWithHttpInfo(team, fromDate, toDate);
            return localVarResp.getData();
        }

        /**
         * Execute getStorageSizesForTeam request with HTTP info returned
         * @return ApiResponse&lt;List&lt;StorageUsagePerDateDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<StorageUsagePerDateDto>> executeWithHttpInfo() throws ApiException {
            return getStorageSizesForTeamWithHttpInfo(team, fromDate, toDate);
        }

        /**
         * Execute getStorageSizesForTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<StorageUsagePerDateDto>> _callback) throws ApiException {
            return getStorageSizesForTeamAsync(team, fromDate, toDate, _callback);
        }
    }

    /**
     * Get asset usage by date for team.
     * 
     * @param team The ID of the team. (required)
     * @param fromDate The from date. (required)
     * @param toDate The to date. (required)
     * @return APIusagesGetStorageSizesForTeamRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIusagesGetStorageSizesForTeamRequest getStorageSizesForTeam(String team, LocalDate fromDate, LocalDate toDate) {
        return new APIusagesGetStorageSizesForTeamRequest(team, fromDate, toDate);
    }
    private okhttp3.Call getTeamCurrentStorageSizeForTeamCall(String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/usages/storage/today"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamCurrentStorageSizeForTeamValidateBeforeCall(String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        return getTeamCurrentStorageSizeForTeamCall(team, _callback);

    }


    private ApiResponse<CurrentStorageDto> getTeamCurrentStorageSizeForTeamWithHttpInfo(String team) throws ApiException {
        okhttp3.Call localVarCall = getTeamCurrentStorageSizeForTeamValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<CurrentStorageDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamCurrentStorageSizeForTeamAsync(String team, final ApiCallback<CurrentStorageDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamCurrentStorageSizeForTeamValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<CurrentStorageDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIusagesGetTeamCurrentStorageSizeForTeamRequest {
        private final String team;

        private APIusagesGetTeamCurrentStorageSizeForTeamRequest(String team) {
            this.team = team;
        }

        /**
         * Build call for getTeamCurrentStorageSizeForTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamCurrentStorageSizeForTeamCall(team, _callback);
        }

        /**
         * Execute getTeamCurrentStorageSizeForTeam request
         * @return CurrentStorageDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CurrentStorageDto execute() throws ApiException {
            ApiResponse<CurrentStorageDto> localVarResp = getTeamCurrentStorageSizeForTeamWithHttpInfo(team);
            return localVarResp.getData();
        }

        /**
         * Execute getTeamCurrentStorageSizeForTeam request with HTTP info returned
         * @return ApiResponse&lt;CurrentStorageDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CurrentStorageDto> executeWithHttpInfo() throws ApiException {
            return getTeamCurrentStorageSizeForTeamWithHttpInfo(team);
        }

        /**
         * Execute getTeamCurrentStorageSizeForTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CurrentStorageDto> _callback) throws ApiException {
            return getTeamCurrentStorageSizeForTeamAsync(team, _callback);
        }
    }

    /**
     * Get total asset size for team.
     * 
     * @param team The ID of the team. (required)
     * @return APIusagesGetTeamCurrentStorageSizeForTeamRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage usage returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIusagesGetTeamCurrentStorageSizeForTeamRequest getTeamCurrentStorageSizeForTeam(String team) {
        return new APIusagesGetTeamCurrentStorageSizeForTeamRequest(team);
    }
    private okhttp3.Call getUsagesCall(LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/apps/$app$/usages/calls/{fromDate}/{toDate}"
            .replace("{" + "fromDate" + "}", localVarApiClient.escapeString(fromDate.toString()))
            .replace("{" + "toDate" + "}", localVarApiClient.escapeString(toDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsagesValidateBeforeCall(LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling (Async)");
        }

        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling (Async)");
        }

        return getUsagesCall(fromDate, toDate, _callback);

    }


    private ApiResponse<CallsUsageDtoDto> getUsagesWithHttpInfo(LocalDate fromDate, LocalDate toDate) throws ApiException {
        okhttp3.Call localVarCall = getUsagesValidateBeforeCall(fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<CallsUsageDtoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUsagesAsync(LocalDate fromDate, LocalDate toDate, final ApiCallback<CallsUsageDtoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsagesValidateBeforeCall(fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<CallsUsageDtoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIusagesGetUsagesRequest {
        private final LocalDate fromDate;
        private final LocalDate toDate;

        private APIusagesGetUsagesRequest(LocalDate fromDate, LocalDate toDate) {
            this.fromDate = fromDate;
            this.toDate = toDate;
        }

        /**
         * Build call for getUsages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUsagesCall(fromDate, toDate, _callback);
        }

        /**
         * Execute getUsages request
         * @return CallsUsageDtoDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CallsUsageDtoDto execute() throws ApiException {
            ApiResponse<CallsUsageDtoDto> localVarResp = getUsagesWithHttpInfo(fromDate, toDate);
            return localVarResp.getData();
        }

        /**
         * Execute getUsages request with HTTP info returned
         * @return ApiResponse&lt;CallsUsageDtoDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsUsageDtoDto> executeWithHttpInfo() throws ApiException {
            return getUsagesWithHttpInfo(fromDate, toDate);
        }

        /**
         * Execute getUsages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsUsageDtoDto> _callback) throws ApiException {
            return getUsagesAsync(fromDate, toDate, _callback);
        }
    }

    /**
     * Get api calls in date range for app.
     * 
     * @param fromDate The from date. (required)
     * @param toDate The to date. (required)
     * @return APIusagesGetUsagesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> App not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIusagesGetUsagesRequest getUsages(LocalDate fromDate, LocalDate toDate) {
        return new APIusagesGetUsagesRequest(fromDate, toDate);
    }
    private okhttp3.Call getUsagesForTeamCall(String team, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/teams/{team}/usages/calls/{fromDate}/{toDate}"
            .replace("{" + "team" + "}", localVarApiClient.escapeString(team.toString()))
            .replace("{" + "fromDate" + "}", localVarApiClient.escapeString(fromDate.toString()))
            .replace("{" + "toDate" + "}", localVarApiClient.escapeString(toDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsagesForTeamValidateBeforeCall(String team, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling (Async)");
        }

        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling (Async)");
        }

        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling (Async)");
        }

        return getUsagesForTeamCall(team, fromDate, toDate, _callback);

    }


    private ApiResponse<CallsUsageDtoDto> getUsagesForTeamWithHttpInfo(String team, LocalDate fromDate, LocalDate toDate) throws ApiException {
        okhttp3.Call localVarCall = getUsagesForTeamValidateBeforeCall(team, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<CallsUsageDtoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUsagesForTeamAsync(String team, LocalDate fromDate, LocalDate toDate, final ApiCallback<CallsUsageDtoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsagesForTeamValidateBeforeCall(team, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<CallsUsageDtoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIusagesGetUsagesForTeamRequest {
        private final String team;
        private final LocalDate fromDate;
        private final LocalDate toDate;

        private APIusagesGetUsagesForTeamRequest(String team, LocalDate fromDate, LocalDate toDate) {
            this.team = team;
            this.fromDate = fromDate;
            this.toDate = toDate;
        }

        /**
         * Build call for getUsagesForTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUsagesForTeamCall(team, fromDate, toDate, _callback);
        }

        /**
         * Execute getUsagesForTeam request
         * @return CallsUsageDtoDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public CallsUsageDtoDto execute() throws ApiException {
            ApiResponse<CallsUsageDtoDto> localVarResp = getUsagesForTeamWithHttpInfo(team, fromDate, toDate);
            return localVarResp.getData();
        }

        /**
         * Execute getUsagesForTeam request with HTTP info returned
         * @return ApiResponse&lt;CallsUsageDtoDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsUsageDtoDto> executeWithHttpInfo() throws ApiException {
            return getUsagesForTeamWithHttpInfo(team, fromDate, toDate);
        }

        /**
         * Execute getUsagesForTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsUsageDtoDto> _callback) throws ApiException {
            return getUsagesForTeamAsync(team, fromDate, toDate, _callback);
        }
    }

    /**
     * Get api calls in date range for team.
     * 
     * @param team The name of the team. (required)
     * @param fromDate The from date. (required)
     * @param toDate The to date. (required)
     * @return APIusagesGetUsagesForTeamRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API call returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Team not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIusagesGetUsagesForTeamRequest getUsagesForTeam(String team, LocalDate fromDate, LocalDate toDate) {
        return new APIusagesGetUsagesForTeamRequest(team, fromDate, toDate);
    }
}
