/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.ResourceLink;
import com.squidex.api.types.RuleJobResult;
import com.squidex.api.types.RuleResult;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * RuleEventDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class RuleEventDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;
  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;
  public static final String SERIALIZED_NAME_LAST_DUMP = "lastDump";
  @SerializedName(SERIALIZED_NAME_LAST_DUMP)
  private String lastDump;
  public static final String SERIALIZED_NAME_NUM_CALLS = "numCalls";
  @SerializedName(SERIALIZED_NAME_NUM_CALLS)
  private Integer numCalls;
  public static final String SERIALIZED_NAME_NEXT_ATTEMPT = "nextAttempt";
  @SerializedName(SERIALIZED_NAME_NEXT_ATTEMPT)
  private OffsetDateTime nextAttempt;
  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private RuleResult result;
  public static final String SERIALIZED_NAME_JOB_RESULT = "jobResult";
  @SerializedName(SERIALIZED_NAME_JOB_RESULT)
  private RuleJobResult jobResult;
  public RuleEventDto() {
  }
  public RuleEventDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public RuleEventDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public RuleEventDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the event.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }
  public RuleEventDto created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The time when the event has been created.
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }
  public RuleEventDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }
  public RuleEventDto eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * The name of the event.
   * @return eventName
   */
  @javax.annotation.Nonnull
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }
  public RuleEventDto lastDump(String lastDump) {
    this.lastDump = lastDump;
    return this;
  }

  /**
   * The last dump.
   * @return lastDump
   */
  @javax.annotation.Nullable
  public String getLastDump() {
    return lastDump;
  }

  public void setLastDump(String lastDump) {
    this.lastDump = lastDump;
  }
  public RuleEventDto numCalls(Integer numCalls) {
    this.numCalls = numCalls;
    return this;
  }

  /**
   * The number of calls.
   * @return numCalls
   */
  @javax.annotation.Nonnull
  public Integer getNumCalls() {
    return numCalls;
  }

  public void setNumCalls(Integer numCalls) {
    this.numCalls = numCalls;
  }
  public RuleEventDto nextAttempt(OffsetDateTime nextAttempt) {
    this.nextAttempt = nextAttempt;
    return this;
  }

  /**
   * The next attempt.
   * @return nextAttempt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextAttempt() {
    return nextAttempt;
  }

  public void setNextAttempt(OffsetDateTime nextAttempt) {
    this.nextAttempt = nextAttempt;
  }
  public RuleEventDto result(RuleResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nonnull
  public RuleResult getResult() {
    return result;
  }

  public void setResult(RuleResult result) {
    this.result = result;
  }
  public RuleEventDto jobResult(RuleJobResult jobResult) {
    this.jobResult = jobResult;
    return this;
  }

  /**
   * Get jobResult
   * @return jobResult
   */
  @javax.annotation.Nonnull
  public RuleJobResult getJobResult() {
    return jobResult;
  }

  public void setJobResult(RuleJobResult jobResult) {
    this.jobResult = jobResult;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleEventDto ruleEventDto = (RuleEventDto) o;
    return Objects.equals(this.links, ruleEventDto.links) &&
        Objects.equals(this.id, ruleEventDto.id) &&
        Objects.equals(this.created, ruleEventDto.created) &&
        Objects.equals(this.description, ruleEventDto.description) &&
        Objects.equals(this.eventName, ruleEventDto.eventName) &&
        Objects.equals(this.lastDump, ruleEventDto.lastDump) &&
        Objects.equals(this.numCalls, ruleEventDto.numCalls) &&
        Objects.equals(this.nextAttempt, ruleEventDto.nextAttempt) &&
        Objects.equals(this.result, ruleEventDto.result) &&
        Objects.equals(this.jobResult, ruleEventDto.jobResult);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, created, description, eventName, lastDump, numCalls, nextAttempt, result, jobResult);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleEventDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    lastDump: ").append(toIndentedString(lastDump)).append("\n");
    sb.append("    numCalls: ").append(toIndentedString(numCalls)).append("\n");
    sb.append("    nextAttempt: ").append(toIndentedString(nextAttempt)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    jobResult: ").append(toIndentedString(jobResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("eventName");
    openapiFields.add("lastDump");
    openapiFields.add("numCalls");
    openapiFields.add("nextAttempt");
    openapiFields.add("result");
    openapiFields.add("jobResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("numCalls");
    openapiRequiredFields.add("result");
    openapiRequiredFields.add("jobResult");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleEventDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleEventDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleEventDto is not found in the empty JSON string", RuleEventDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleEventDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleEventDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleEventDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      if ((jsonObj.get("lastDump") != null && !jsonObj.get("lastDump").isJsonNull()) && !jsonObj.get("lastDump").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastDump` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastDump").toString()));
      }
      // validate the required field `result`
      RuleResult.validateJsonElement(jsonObj.get("result"));
      // validate the required field `jobResult`
      RuleJobResult.validateJsonElement(jsonObj.get("jobResult"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleEventDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleEventDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleEventDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleEventDto.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleEventDto>() {
           @Override
           public void write(JsonWriter out, RuleEventDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleEventDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleEventDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleEventDto
   * @throws IOException if the JSON string is invalid with respect to RuleEventDto
   */
  public static RuleEventDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleEventDto.class);
  }

  /**
   * Convert an instance of RuleEventDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
