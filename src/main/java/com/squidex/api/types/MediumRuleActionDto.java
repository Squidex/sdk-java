/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.RuleActionDto;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * MediumRuleActionDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class MediumRuleActionDto extends RuleActionDto {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;
  public static final String SERIALIZED_NAME_CANONICAL_URL = "canonicalUrl";
  @SerializedName(SERIALIZED_NAME_CANONICAL_URL)
  private String canonicalUrl;
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;
  public static final String SERIALIZED_NAME_PUBLICATION_ID = "publicationId";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_ID)
  private String publicationId;
  public static final String SERIALIZED_NAME_IS_HTML = "isHtml";
  @SerializedName(SERIALIZED_NAME_IS_HTML)
  private Boolean isHtml;
  public MediumRuleActionDto() {
  }
  public MediumRuleActionDto accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * The self issued access token.
   * @return accessToken
   */
  @javax.annotation.Nonnull
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }
  public MediumRuleActionDto title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title, used for the url.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }
  public MediumRuleActionDto content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content, either html or markdown.
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }
  public MediumRuleActionDto canonicalUrl(String canonicalUrl) {
    this.canonicalUrl = canonicalUrl;
    return this;
  }

  /**
   * The original home of this content, if it was originally published elsewhere.
   * @return canonicalUrl
   */
  @javax.annotation.Nullable
  public String getCanonicalUrl() {
    return canonicalUrl;
  }

  public void setCanonicalUrl(String canonicalUrl) {
    this.canonicalUrl = canonicalUrl;
  }
  public MediumRuleActionDto tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The optional comma separated list of tags.
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }
  public MediumRuleActionDto publicationId(String publicationId) {
    this.publicationId = publicationId;
    return this;
  }

  /**
   * Optional publication id.
   * @return publicationId
   */
  @javax.annotation.Nullable
  public String getPublicationId() {
    return publicationId;
  }

  public void setPublicationId(String publicationId) {
    this.publicationId = publicationId;
  }
  public MediumRuleActionDto isHtml(Boolean isHtml) {
    this.isHtml = isHtml;
    return this;
  }

  /**
   * Indicates whether the content is markdown or html.
   * @return isHtml
   */
  @javax.annotation.Nonnull
  public Boolean getIsHtml() {
    return isHtml;
  }

  public void setIsHtml(Boolean isHtml) {
    this.isHtml = isHtml;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediumRuleActionDto mediumRuleActionDto = (MediumRuleActionDto) o;
    return Objects.equals(this.accessToken, mediumRuleActionDto.accessToken) &&
        Objects.equals(this.title, mediumRuleActionDto.title) &&
        Objects.equals(this.content, mediumRuleActionDto.content) &&
        Objects.equals(this.canonicalUrl, mediumRuleActionDto.canonicalUrl) &&
        Objects.equals(this.tags, mediumRuleActionDto.tags) &&
        Objects.equals(this.publicationId, mediumRuleActionDto.publicationId) &&
        Objects.equals(this.isHtml, mediumRuleActionDto.isHtml) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, title, content, canonicalUrl, tags, publicationId, isHtml, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediumRuleActionDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    canonicalUrl: ").append(toIndentedString(canonicalUrl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    publicationId: ").append(toIndentedString(publicationId)).append("\n");
    sb.append("    isHtml: ").append(toIndentedString(isHtml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionType");
    openapiFields.add("accessToken");
    openapiFields.add("title");
    openapiFields.add("content");
    openapiFields.add("canonicalUrl");
    openapiFields.add("tags");
    openapiFields.add("publicationId");
    openapiFields.add("isHtml");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessToken");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("isHtml");
    openapiRequiredFields.add("actionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediumRuleActionDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediumRuleActionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediumRuleActionDto is not found in the empty JSON string", MediumRuleActionDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediumRuleActionDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediumRuleActionDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MediumRuleActionDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediumRuleActionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediumRuleActionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediumRuleActionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediumRuleActionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MediumRuleActionDto>() {
           @Override
           public void write(JsonWriter out, MediumRuleActionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediumRuleActionDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediumRuleActionDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediumRuleActionDto
   * @throws IOException if the JSON string is invalid with respect to MediumRuleActionDto
   */
  public static MediumRuleActionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediumRuleActionDto.class);
  }

  /**
   * Convert an instance of MediumRuleActionDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
