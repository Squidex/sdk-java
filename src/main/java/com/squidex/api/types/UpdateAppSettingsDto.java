/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.EditorDto;
import com.squidex.api.types.PatternDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * UpdateAppSettingsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class UpdateAppSettingsDto {
  public static final String SERIALIZED_NAME_PATTERNS = "patterns";
  @SerializedName(SERIALIZED_NAME_PATTERNS)
  private List<PatternDto> patterns = new ArrayList<>();
  public static final String SERIALIZED_NAME_EDITORS = "editors";
  @SerializedName(SERIALIZED_NAME_EDITORS)
  private List<EditorDto> editors = new ArrayList<>();
  public static final String SERIALIZED_NAME_HIDE_SCHEDULER = "hideScheduler";
  @SerializedName(SERIALIZED_NAME_HIDE_SCHEDULER)
  private Boolean hideScheduler;
  public static final String SERIALIZED_NAME_HIDE_DATE_TIME_MODE_BUTTON = "hideDateTimeModeButton";
  @SerializedName(SERIALIZED_NAME_HIDE_DATE_TIME_MODE_BUTTON)
  private Boolean hideDateTimeModeButton;
  public UpdateAppSettingsDto() {
  }
  public UpdateAppSettingsDto patterns(List<PatternDto> patterns) {
    this.patterns = patterns;
    return this;
  }

  public UpdateAppSettingsDto addPatternsItem(PatternDto patternsItem) {
    if (this.patterns == null) {
      this.patterns = new ArrayList<>();
    }
    this.patterns.add(patternsItem);
    return this;
  }

  /**
   * The configured app patterns.
   * @return patterns
   */
  @javax.annotation.Nonnull
  public List<PatternDto> getPatterns() {
    return patterns;
  }

  public void setPatterns(List<PatternDto> patterns) {
    this.patterns = patterns;
  }
  public UpdateAppSettingsDto editors(List<EditorDto> editors) {
    this.editors = editors;
    return this;
  }

  public UpdateAppSettingsDto addEditorsItem(EditorDto editorsItem) {
    if (this.editors == null) {
      this.editors = new ArrayList<>();
    }
    this.editors.add(editorsItem);
    return this;
  }

  /**
   * The configured UI editors.
   * @return editors
   */
  @javax.annotation.Nonnull
  public List<EditorDto> getEditors() {
    return editors;
  }

  public void setEditors(List<EditorDto> editors) {
    this.editors = editors;
  }
  public UpdateAppSettingsDto hideScheduler(Boolean hideScheduler) {
    this.hideScheduler = hideScheduler;
    return this;
  }

  /**
   * Hide the scheduler for content items.
   * @return hideScheduler
   */
  @javax.annotation.Nullable
  public Boolean getHideScheduler() {
    return hideScheduler;
  }

  public void setHideScheduler(Boolean hideScheduler) {
    this.hideScheduler = hideScheduler;
  }
  public UpdateAppSettingsDto hideDateTimeModeButton(Boolean hideDateTimeModeButton) {
    this.hideDateTimeModeButton = hideDateTimeModeButton;
    return this;
  }

  /**
   * Hide the datetime mode button.
   * @return hideDateTimeModeButton
   */
  @javax.annotation.Nullable
  public Boolean getHideDateTimeModeButton() {
    return hideDateTimeModeButton;
  }

  public void setHideDateTimeModeButton(Boolean hideDateTimeModeButton) {
    this.hideDateTimeModeButton = hideDateTimeModeButton;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAppSettingsDto updateAppSettingsDto = (UpdateAppSettingsDto) o;
    return Objects.equals(this.patterns, updateAppSettingsDto.patterns) &&
        Objects.equals(this.editors, updateAppSettingsDto.editors) &&
        Objects.equals(this.hideScheduler, updateAppSettingsDto.hideScheduler) &&
        Objects.equals(this.hideDateTimeModeButton, updateAppSettingsDto.hideDateTimeModeButton);
  }

  @Override
  public int hashCode() {
    return Objects.hash(patterns, editors, hideScheduler, hideDateTimeModeButton);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAppSettingsDto {\n");
    sb.append("    patterns: ").append(toIndentedString(patterns)).append("\n");
    sb.append("    editors: ").append(toIndentedString(editors)).append("\n");
    sb.append("    hideScheduler: ").append(toIndentedString(hideScheduler)).append("\n");
    sb.append("    hideDateTimeModeButton: ").append(toIndentedString(hideDateTimeModeButton)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("patterns");
    openapiFields.add("editors");
    openapiFields.add("hideScheduler");
    openapiFields.add("hideDateTimeModeButton");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("patterns");
    openapiRequiredFields.add("editors");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAppSettingsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAppSettingsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAppSettingsDto is not found in the empty JSON string", UpdateAppSettingsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAppSettingsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAppSettingsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateAppSettingsDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("patterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `patterns` to be an array in the JSON string but got `%s`", jsonObj.get("patterns").toString()));
      }

      JsonArray jsonArraypatterns = jsonObj.getAsJsonArray("patterns");
      // validate the required field `patterns` (array)
      for (int i = 0; i < jsonArraypatterns.size(); i++) {
        PatternDto.validateJsonElement(jsonArraypatterns.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("editors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `editors` to be an array in the JSON string but got `%s`", jsonObj.get("editors").toString()));
      }

      JsonArray jsonArrayeditors = jsonObj.getAsJsonArray("editors");
      // validate the required field `editors` (array)
      for (int i = 0; i < jsonArrayeditors.size(); i++) {
        EditorDto.validateJsonElement(jsonArrayeditors.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAppSettingsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAppSettingsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAppSettingsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAppSettingsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAppSettingsDto>() {
           @Override
           public void write(JsonWriter out, UpdateAppSettingsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAppSettingsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAppSettingsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAppSettingsDto
   * @throws IOException if the JSON string is invalid with respect to UpdateAppSettingsDto
   */
  public static UpdateAppSettingsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAppSettingsDto.class);
  }

  /**
   * Convert an instance of UpdateAppSettingsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
