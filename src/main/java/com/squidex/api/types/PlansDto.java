/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.PlanDto;
import com.squidex.api.types.PlansLockedReason;
import com.squidex.api.types.ReferralInfo;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * PlansDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class PlansDto {
  public static final String SERIALIZED_NAME_PLANS = "plans";
  @SerializedName(SERIALIZED_NAME_PLANS)
  private List<PlanDto> plans = new ArrayList<>();
  public static final String SERIALIZED_NAME_CURRENT_PLAN_ID = "currentPlanId";
  @SerializedName(SERIALIZED_NAME_CURRENT_PLAN_ID)
  private String currentPlanId;
  public static final String SERIALIZED_NAME_PLAN_OWNER = "planOwner";
  @SerializedName(SERIALIZED_NAME_PLAN_OWNER)
  private String planOwner;
  public static final String SERIALIZED_NAME_PORTAL_LINK = "portalLink";
  @SerializedName(SERIALIZED_NAME_PORTAL_LINK)
  private URI portalLink;
  public static final String SERIALIZED_NAME_REFERRAL = "referral";
  @SerializedName(SERIALIZED_NAME_REFERRAL)
  private ReferralInfo referral;
  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private PlansLockedReason locked;
  public PlansDto() {
  }
  public PlansDto plans(List<PlanDto> plans) {
    this.plans = plans;
    return this;
  }

  public PlansDto addPlansItem(PlanDto plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<>();
    }
    this.plans.add(plansItem);
    return this;
  }

  /**
   * The available plans.
   * @return plans
   */
  @javax.annotation.Nonnull
  public List<PlanDto> getPlans() {
    return plans;
  }

  public void setPlans(List<PlanDto> plans) {
    this.plans = plans;
  }
  public PlansDto currentPlanId(String currentPlanId) {
    this.currentPlanId = currentPlanId;
    return this;
  }

  /**
   * The current plan id.
   * @return currentPlanId
   */
  @javax.annotation.Nullable
  public String getCurrentPlanId() {
    return currentPlanId;
  }

  public void setCurrentPlanId(String currentPlanId) {
    this.currentPlanId = currentPlanId;
  }
  public PlansDto planOwner(String planOwner) {
    this.planOwner = planOwner;
    return this;
  }

  /**
   * The plan owner.
   * @return planOwner
   */
  @javax.annotation.Nullable
  public String getPlanOwner() {
    return planOwner;
  }

  public void setPlanOwner(String planOwner) {
    this.planOwner = planOwner;
  }
  public PlansDto portalLink(URI portalLink) {
    this.portalLink = portalLink;
    return this;
  }

  /**
   * The link to the management portal.
   * @return portalLink
   */
  @javax.annotation.Nullable
  public URI getPortalLink() {
    return portalLink;
  }

  public void setPortalLink(URI portalLink) {
    this.portalLink = portalLink;
  }
  public PlansDto referral(ReferralInfo referral) {
    this.referral = referral;
    return this;
  }

  /**
   * Get referral
   * @return referral
   */
  @javax.annotation.Nullable
  public ReferralInfo getReferral() {
    return referral;
  }

  public void setReferral(ReferralInfo referral) {
    this.referral = referral;
  }
  public PlansDto locked(PlansLockedReason locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nonnull
  public PlansLockedReason getLocked() {
    return locked;
  }

  public void setLocked(PlansLockedReason locked) {
    this.locked = locked;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlansDto plansDto = (PlansDto) o;
    return Objects.equals(this.plans, plansDto.plans) &&
        Objects.equals(this.currentPlanId, plansDto.currentPlanId) &&
        Objects.equals(this.planOwner, plansDto.planOwner) &&
        Objects.equals(this.portalLink, plansDto.portalLink) &&
        Objects.equals(this.referral, plansDto.referral) &&
        Objects.equals(this.locked, plansDto.locked);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(plans, currentPlanId, planOwner, portalLink, referral, locked);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlansDto {\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    currentPlanId: ").append(toIndentedString(currentPlanId)).append("\n");
    sb.append("    planOwner: ").append(toIndentedString(planOwner)).append("\n");
    sb.append("    portalLink: ").append(toIndentedString(portalLink)).append("\n");
    sb.append("    referral: ").append(toIndentedString(referral)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plans");
    openapiFields.add("currentPlanId");
    openapiFields.add("planOwner");
    openapiFields.add("portalLink");
    openapiFields.add("referral");
    openapiFields.add("locked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("plans");
    openapiRequiredFields.add("locked");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlansDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlansDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlansDto is not found in the empty JSON string", PlansDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlansDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlansDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PlansDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("plans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `plans` to be an array in the JSON string but got `%s`", jsonObj.get("plans").toString()));
      }

      JsonArray jsonArrayplans = jsonObj.getAsJsonArray("plans");
      // validate the required field `plans` (array)
      for (int i = 0; i < jsonArrayplans.size(); i++) {
        PlanDto.validateJsonElement(jsonArrayplans.get(i));
      };
      if ((jsonObj.get("currentPlanId") != null && !jsonObj.get("currentPlanId").isJsonNull()) && !jsonObj.get("currentPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentPlanId").toString()));
      }
      if ((jsonObj.get("planOwner") != null && !jsonObj.get("planOwner").isJsonNull()) && !jsonObj.get("planOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planOwner").toString()));
      }
      if ((jsonObj.get("portalLink") != null && !jsonObj.get("portalLink").isJsonNull()) && !jsonObj.get("portalLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portalLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portalLink").toString()));
      }
      // validate the optional field `referral`
      if (jsonObj.get("referral") != null && !jsonObj.get("referral").isJsonNull()) {
        ReferralInfo.validateJsonElement(jsonObj.get("referral"));
      }
      // validate the required field `locked`
      PlansLockedReason.validateJsonElement(jsonObj.get("locked"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlansDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlansDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlansDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlansDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PlansDto>() {
           @Override
           public void write(JsonWriter out, PlansDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlansDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlansDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlansDto
   * @throws IOException if the JSON string is invalid with respect to PlansDto
   */
  public static PlansDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlansDto.class);
  }

  /**
   * Convert an instance of PlansDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
