/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * FieldPropertiesDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class FieldPropertiesDto {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;
  public static final String SERIALIZED_NAME_HINTS = "hints";
  @SerializedName(SERIALIZED_NAME_HINTS)
  private String hints;
  public static final String SERIALIZED_NAME_PLACEHOLDER = "placeholder";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER)
  private String placeholder;
  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;
  public static final String SERIALIZED_NAME_IS_REQUIRED_ON_PUBLISH = "isRequiredOnPublish";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED_ON_PUBLISH)
  private Boolean isRequiredOnPublish;
  public static final String SERIALIZED_NAME_IS_HALF_WIDTH = "isHalfWidth";
  @SerializedName(SERIALIZED_NAME_IS_HALF_WIDTH)
  private Boolean isHalfWidth;
  public static final String SERIALIZED_NAME_EDITOR_URL = "editorUrl";
  @SerializedName(SERIALIZED_NAME_EDITOR_URL)
  private String editorUrl;
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;
  public FieldPropertiesDto() {
  }
  public FieldPropertiesDto label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Optional label for the editor.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }
  public FieldPropertiesDto hints(String hints) {
    this.hints = hints;
    return this;
  }

  /**
   * Hints to describe the field.
   * @return hints
   */
  @javax.annotation.Nullable
  public String getHints() {
    return hints;
  }

  public void setHints(String hints) {
    this.hints = hints;
  }
  public FieldPropertiesDto placeholder(String placeholder) {
    this.placeholder = placeholder;
    return this;
  }

  /**
   * Placeholder to show when no value has been entered.
   * @return placeholder
   */
  @javax.annotation.Nullable
  public String getPlaceholder() {
    return placeholder;
  }

  public void setPlaceholder(String placeholder) {
    this.placeholder = placeholder;
  }
  public FieldPropertiesDto isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Indicates if the field is required.
   * @return isRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }
  public FieldPropertiesDto isRequiredOnPublish(Boolean isRequiredOnPublish) {
    this.isRequiredOnPublish = isRequiredOnPublish;
    return this;
  }

  /**
   * Indicates if the field is required when publishing.
   * @return isRequiredOnPublish
   */
  @javax.annotation.Nullable
  public Boolean getIsRequiredOnPublish() {
    return isRequiredOnPublish;
  }

  public void setIsRequiredOnPublish(Boolean isRequiredOnPublish) {
    this.isRequiredOnPublish = isRequiredOnPublish;
  }
  public FieldPropertiesDto isHalfWidth(Boolean isHalfWidth) {
    this.isHalfWidth = isHalfWidth;
    return this;
  }

  /**
   * Indicates if the field should be rendered with half width only.
   * @return isHalfWidth
   */
  @javax.annotation.Nullable
  public Boolean getIsHalfWidth() {
    return isHalfWidth;
  }

  public void setIsHalfWidth(Boolean isHalfWidth) {
    this.isHalfWidth = isHalfWidth;
  }
  public FieldPropertiesDto editorUrl(String editorUrl) {
    this.editorUrl = editorUrl;
    return this;
  }

  /**
   * Optional url to the editor.
   * @return editorUrl
   */
  @javax.annotation.Nullable
  public String getEditorUrl() {
    return editorUrl;
  }

  public void setEditorUrl(String editorUrl) {
    this.editorUrl = editorUrl;
  }
  public FieldPropertiesDto tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public FieldPropertiesDto addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags for automation processes.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldPropertiesDto fieldPropertiesDto = (FieldPropertiesDto) o;
    return Objects.equals(this.label, fieldPropertiesDto.label) &&
        Objects.equals(this.hints, fieldPropertiesDto.hints) &&
        Objects.equals(this.placeholder, fieldPropertiesDto.placeholder) &&
        Objects.equals(this.isRequired, fieldPropertiesDto.isRequired) &&
        Objects.equals(this.isRequiredOnPublish, fieldPropertiesDto.isRequiredOnPublish) &&
        Objects.equals(this.isHalfWidth, fieldPropertiesDto.isHalfWidth) &&
        Objects.equals(this.editorUrl, fieldPropertiesDto.editorUrl) &&
        Objects.equals(this.tags, fieldPropertiesDto.tags) &&
        true;
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, hints, placeholder, isRequired, isRequiredOnPublish, isHalfWidth, editorUrl, tags, true);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldPropertiesDto {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    hints: ").append(toIndentedString(hints)).append("\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    isRequiredOnPublish: ").append(toIndentedString(isRequiredOnPublish)).append("\n");
    sb.append("    isHalfWidth: ").append(toIndentedString(isHalfWidth)).append("\n");
    sb.append("    editorUrl: ").append(toIndentedString(editorUrl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("hints");
    openapiFields.add("placeholder");
    openapiFields.add("isRequired");
    openapiFields.add("isRequiredOnPublish");
    openapiFields.add("isHalfWidth");
    openapiFields.add("editorUrl");
    openapiFields.add("tags");
    openapiFields.add("fieldType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldPropertiesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldPropertiesDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldPropertiesDto is not found in the empty JSON string", FieldPropertiesDto.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("fieldType").getAsString();
      switch (discriminatorValue) {
        case "Array":
          ArrayFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "Assets":
          AssetsFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "Boolean":
          BooleanFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "Component":
          ComponentFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "Components":
          ComponentsFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "DateTime":
          DateTimeFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "Geolocation":
          GeolocationFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "Json":
          JsonFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "Number":
          NumberFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "References":
          ReferencesFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "RichText":
          RichTextFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "String":
          StringFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "Tags":
          TagsFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        case "UI":
          UIFieldPropertiesDto.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `fieldType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of FieldPropertiesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldPropertiesDto
   * @throws IOException if the JSON string is invalid with respect to FieldPropertiesDto
   */
  public static FieldPropertiesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldPropertiesDto.class);
  }

  /**
   * Convert an instance of FieldPropertiesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
