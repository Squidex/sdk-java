/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.JobLogMessageDto;
import com.squidex.api.types.JobStatus;
import com.squidex.api.types.ResourceLink;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * JobDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class JobDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;
  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;
  public static final String SERIALIZED_NAME_STOPPED = "stopped";
  @SerializedName(SERIALIZED_NAME_STOPPED)
  private OffsetDateTime stopped;
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobStatus status;
  public static final String SERIALIZED_NAME_TASK_NAME = "taskName";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;
  public static final String SERIALIZED_NAME_TASK_ARGUMENTS = "taskArguments";
  @SerializedName(SERIALIZED_NAME_TASK_ARGUMENTS)
  private Map<String, String> taskArguments = new HashMap<>();
  public static final String SERIALIZED_NAME_LOG = "log";
  @SerializedName(SERIALIZED_NAME_LOG)
  private List<JobLogMessageDto> log = new ArrayList<>();
  public static final String SERIALIZED_NAME_CAN_DOWNLOAD = "canDownload";
  @SerializedName(SERIALIZED_NAME_CAN_DOWNLOAD)
  private Boolean canDownload;
  public JobDto() {
  }
  public JobDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public JobDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public JobDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the job.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }
  public JobDto started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

  /**
   * The time when the job has been started.
   * @return started
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }
  public JobDto stopped(OffsetDateTime stopped) {
    this.stopped = stopped;
    return this;
  }

  /**
   * The time when the job has been stopped.
   * @return stopped
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopped() {
    return stopped;
  }

  public void setStopped(OffsetDateTime stopped) {
    this.stopped = stopped;
  }
  public JobDto status(JobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public JobStatus getStatus() {
    return status;
  }

  public void setStatus(JobStatus status) {
    this.status = status;
  }
  public JobDto taskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

  /**
   * The name of the task.
   * @return taskName
   */
  @javax.annotation.Nonnull
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }
  public JobDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the job.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }
  public JobDto taskArguments(Map<String, String> taskArguments) {
    this.taskArguments = taskArguments;
    return this;
  }

  public JobDto putTaskArgumentsItem(String key, String taskArgumentsItem) {
    if (this.taskArguments == null) {
      this.taskArguments = new HashMap<>();
    }
    this.taskArguments.put(key, taskArgumentsItem);
    return this;
  }

  /**
   * The arguments for the job.
   * @return taskArguments
   */
  @javax.annotation.Nonnull
  public Map<String, String> getTaskArguments() {
    return taskArguments;
  }

  public void setTaskArguments(Map<String, String> taskArguments) {
    this.taskArguments = taskArguments;
  }
  public JobDto log(List<JobLogMessageDto> log) {
    this.log = log;
    return this;
  }

  public JobDto addLogItem(JobLogMessageDto logItem) {
    if (this.log == null) {
      this.log = new ArrayList<>();
    }
    this.log.add(logItem);
    return this;
  }

  /**
   * The list of log items.
   * @return log
   */
  @javax.annotation.Nonnull
  public List<JobLogMessageDto> getLog() {
    return log;
  }

  public void setLog(List<JobLogMessageDto> log) {
    this.log = log;
  }
  public JobDto canDownload(Boolean canDownload) {
    this.canDownload = canDownload;
    return this;
  }

  /**
   * Indicates whether the job can be downloaded.
   * @return canDownload
   */
  @javax.annotation.Nonnull
  public Boolean getCanDownload() {
    return canDownload;
  }

  public void setCanDownload(Boolean canDownload) {
    this.canDownload = canDownload;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDto jobDto = (JobDto) o;
    return Objects.equals(this.links, jobDto.links) &&
        Objects.equals(this.id, jobDto.id) &&
        Objects.equals(this.started, jobDto.started) &&
        Objects.equals(this.stopped, jobDto.stopped) &&
        Objects.equals(this.status, jobDto.status) &&
        Objects.equals(this.taskName, jobDto.taskName) &&
        Objects.equals(this.description, jobDto.description) &&
        Objects.equals(this.taskArguments, jobDto.taskArguments) &&
        Objects.equals(this.log, jobDto.log) &&
        Objects.equals(this.canDownload, jobDto.canDownload);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, started, stopped, status, taskName, description, taskArguments, log, canDownload);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    stopped: ").append(toIndentedString(stopped)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    taskArguments: ").append(toIndentedString(taskArguments)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    canDownload: ").append(toIndentedString(canDownload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("started");
    openapiFields.add("stopped");
    openapiFields.add("status");
    openapiFields.add("taskName");
    openapiFields.add("description");
    openapiFields.add("taskArguments");
    openapiFields.add("log");
    openapiFields.add("canDownload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("started");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("taskName");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("taskArguments");
    openapiRequiredFields.add("log");
    openapiRequiredFields.add("canDownload");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDto is not found in the empty JSON string", JobDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `status`
      JobStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("taskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskName").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("log").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `log` to be an array in the JSON string but got `%s`", jsonObj.get("log").toString()));
      }

      JsonArray jsonArraylog = jsonObj.getAsJsonArray("log");
      // validate the required field `log` (array)
      for (int i = 0; i < jsonArraylog.size(); i++) {
        JobLogMessageDto.validateJsonElement(jsonArraylog.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDto.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDto>() {
           @Override
           public void write(JsonWriter out, JobDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobDto
   * @throws IOException if the JSON string is invalid with respect to JobDto
   */
  public static JobDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDto.class);
  }

  /**
   * Convert an instance of JobDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
