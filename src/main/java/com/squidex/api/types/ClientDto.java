/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.ResourceLink;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * ClientDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class ClientDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;
  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;
  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;
  public static final String SERIALIZED_NAME_API_CALLS_LIMIT = "apiCallsLimit";
  @SerializedName(SERIALIZED_NAME_API_CALLS_LIMIT)
  private Long apiCallsLimit;
  public static final String SERIALIZED_NAME_API_TRAFFIC_LIMIT = "apiTrafficLimit";
  @SerializedName(SERIALIZED_NAME_API_TRAFFIC_LIMIT)
  private Long apiTrafficLimit;
  public static final String SERIALIZED_NAME_ALLOW_ANONYMOUS = "allowAnonymous";
  @SerializedName(SERIALIZED_NAME_ALLOW_ANONYMOUS)
  private Boolean allowAnonymous;
  public ClientDto() {
  }
  public ClientDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public ClientDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public ClientDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The client id.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }
  public ClientDto secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * The client secret.
   * @return secret
   */
  @javax.annotation.Nonnull
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }
  public ClientDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The client name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
  public ClientDto role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The role of the client.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }
  public ClientDto apiCallsLimit(Long apiCallsLimit) {
    this.apiCallsLimit = apiCallsLimit;
    return this;
  }

  /**
   * The number of allowed api calls per month for this client.
   * @return apiCallsLimit
   */
  @javax.annotation.Nonnull
  public Long getApiCallsLimit() {
    return apiCallsLimit;
  }

  public void setApiCallsLimit(Long apiCallsLimit) {
    this.apiCallsLimit = apiCallsLimit;
  }
  public ClientDto apiTrafficLimit(Long apiTrafficLimit) {
    this.apiTrafficLimit = apiTrafficLimit;
    return this;
  }

  /**
   * The number of allowed api traffic bytes per month for this client.
   * @return apiTrafficLimit
   */
  @javax.annotation.Nonnull
  public Long getApiTrafficLimit() {
    return apiTrafficLimit;
  }

  public void setApiTrafficLimit(Long apiTrafficLimit) {
    this.apiTrafficLimit = apiTrafficLimit;
  }
  public ClientDto allowAnonymous(Boolean allowAnonymous) {
    this.allowAnonymous = allowAnonymous;
    return this;
  }

  /**
   * True to allow anonymous access without an access token for this client.
   * @return allowAnonymous
   */
  @javax.annotation.Nonnull
  public Boolean getAllowAnonymous() {
    return allowAnonymous;
  }

  public void setAllowAnonymous(Boolean allowAnonymous) {
    this.allowAnonymous = allowAnonymous;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientDto clientDto = (ClientDto) o;
    return Objects.equals(this.links, clientDto.links) &&
        Objects.equals(this.id, clientDto.id) &&
        Objects.equals(this.secret, clientDto.secret) &&
        Objects.equals(this.name, clientDto.name) &&
        Objects.equals(this.role, clientDto.role) &&
        Objects.equals(this.apiCallsLimit, clientDto.apiCallsLimit) &&
        Objects.equals(this.apiTrafficLimit, clientDto.apiTrafficLimit) &&
        Objects.equals(this.allowAnonymous, clientDto.allowAnonymous);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, secret, name, role, apiCallsLimit, apiTrafficLimit, allowAnonymous);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    apiCallsLimit: ").append(toIndentedString(apiCallsLimit)).append("\n");
    sb.append("    apiTrafficLimit: ").append(toIndentedString(apiTrafficLimit)).append("\n");
    sb.append("    allowAnonymous: ").append(toIndentedString(allowAnonymous)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("secret");
    openapiFields.add("name");
    openapiFields.add("role");
    openapiFields.add("apiCallsLimit");
    openapiFields.add("apiTrafficLimit");
    openapiFields.add("allowAnonymous");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("secret");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("apiCallsLimit");
    openapiRequiredFields.add("apiTrafficLimit");
    openapiRequiredFields.add("allowAnonymous");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientDto is not found in the empty JSON string", ClientDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClientDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientDto>() {
           @Override
           public void write(JsonWriter out, ClientDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientDto
   * @throws IOException if the JSON string is invalid with respect to ClientDto
   */
  public static ClientDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientDto.class);
  }

  /**
   * Convert an instance of ClientDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
