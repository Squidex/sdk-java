/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.RuleElementPropertyDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * RuleElementDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class RuleElementDto {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;
  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;
  public static final String SERIALIZED_NAME_ICON_COLOR = "iconColor";
  @SerializedName(SERIALIZED_NAME_ICON_COLOR)
  private String iconColor;
  public static final String SERIALIZED_NAME_ICON_IMAGE = "iconImage";
  @SerializedName(SERIALIZED_NAME_ICON_IMAGE)
  private String iconImage;
  public static final String SERIALIZED_NAME_READ_MORE = "readMore";
  @SerializedName(SERIALIZED_NAME_READ_MORE)
  private String readMore;
  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<RuleElementPropertyDto> properties = new ArrayList<>();
  public RuleElementDto() {
  }
  public RuleElementDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Describes the action or trigger type.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }
  public RuleElementDto display(String display) {
    this.display = display;
    return this;
  }

  /**
   * The label for the action or trigger type.
   * @return display
   */
  @javax.annotation.Nonnull
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }
  public RuleElementDto title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Optional title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }
  public RuleElementDto iconColor(String iconColor) {
    this.iconColor = iconColor;
    return this;
  }

  /**
   * The color for the icon.
   * @return iconColor
   */
  @javax.annotation.Nullable
  public String getIconColor() {
    return iconColor;
  }

  public void setIconColor(String iconColor) {
    this.iconColor = iconColor;
  }
  public RuleElementDto iconImage(String iconImage) {
    this.iconImage = iconImage;
    return this;
  }

  /**
   * The image for the icon.
   * @return iconImage
   */
  @javax.annotation.Nullable
  public String getIconImage() {
    return iconImage;
  }

  public void setIconImage(String iconImage) {
    this.iconImage = iconImage;
  }
  public RuleElementDto readMore(String readMore) {
    this.readMore = readMore;
    return this;
  }

  /**
   * The optional link to the product that is integrated.
   * @return readMore
   */
  @javax.annotation.Nullable
  public String getReadMore() {
    return readMore;
  }

  public void setReadMore(String readMore) {
    this.readMore = readMore;
  }
  public RuleElementDto properties(List<RuleElementPropertyDto> properties) {
    this.properties = properties;
    return this;
  }

  public RuleElementDto addPropertiesItem(RuleElementPropertyDto propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * The properties.
   * @return properties
   */
  @javax.annotation.Nonnull
  public List<RuleElementPropertyDto> getProperties() {
    return properties;
  }

  public void setProperties(List<RuleElementPropertyDto> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleElementDto ruleElementDto = (RuleElementDto) o;
    return Objects.equals(this.description, ruleElementDto.description) &&
        Objects.equals(this.display, ruleElementDto.display) &&
        Objects.equals(this.title, ruleElementDto.title) &&
        Objects.equals(this.iconColor, ruleElementDto.iconColor) &&
        Objects.equals(this.iconImage, ruleElementDto.iconImage) &&
        Objects.equals(this.readMore, ruleElementDto.readMore) &&
        Objects.equals(this.properties, ruleElementDto.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, display, title, iconColor, iconImage, readMore, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleElementDto {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    iconColor: ").append(toIndentedString(iconColor)).append("\n");
    sb.append("    iconImage: ").append(toIndentedString(iconImage)).append("\n");
    sb.append("    readMore: ").append(toIndentedString(readMore)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("display");
    openapiFields.add("title");
    openapiFields.add("iconColor");
    openapiFields.add("iconImage");
    openapiFields.add("readMore");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("display");
    openapiRequiredFields.add("properties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleElementDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleElementDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleElementDto is not found in the empty JSON string", RuleElementDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleElementDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleElementDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleElementDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("iconColor") != null && !jsonObj.get("iconColor").isJsonNull()) && !jsonObj.get("iconColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconColor").toString()));
      }
      if ((jsonObj.get("iconImage") != null && !jsonObj.get("iconImage").isJsonNull()) && !jsonObj.get("iconImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconImage").toString()));
      }
      if ((jsonObj.get("readMore") != null && !jsonObj.get("readMore").isJsonNull()) && !jsonObj.get("readMore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readMore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readMore").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("properties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
      }

      JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
      // validate the required field `properties` (array)
      for (int i = 0; i < jsonArrayproperties.size(); i++) {
        RuleElementPropertyDto.validateJsonElement(jsonArrayproperties.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleElementDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleElementDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleElementDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleElementDto.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleElementDto>() {
           @Override
           public void write(JsonWriter out, RuleElementDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleElementDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleElementDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleElementDto
   * @throws IOException if the JSON string is invalid with respect to RuleElementDto
   */
  public static RuleElementDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleElementDto.class);
  }

  /**
   * Convert an instance of RuleElementDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
