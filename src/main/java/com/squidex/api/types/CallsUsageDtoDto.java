/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.CallsUsagePerDateDto;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * CallsUsageDtoDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class CallsUsageDtoDto {
  public static final String SERIALIZED_NAME_TOTAL_CALLS = "totalCalls";
  @SerializedName(SERIALIZED_NAME_TOTAL_CALLS)
  private Long totalCalls;
  public static final String SERIALIZED_NAME_TOTAL_BYTES = "totalBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES)
  private Long totalBytes;
  public static final String SERIALIZED_NAME_MONTH_CALLS = "monthCalls";
  @SerializedName(SERIALIZED_NAME_MONTH_CALLS)
  private Long monthCalls;
  public static final String SERIALIZED_NAME_MONTH_BYTES = "monthBytes";
  @SerializedName(SERIALIZED_NAME_MONTH_BYTES)
  private Long monthBytes;
  public static final String SERIALIZED_NAME_BLOCKING_API_CALLS = "blockingApiCalls";
  @SerializedName(SERIALIZED_NAME_BLOCKING_API_CALLS)
  private Long blockingApiCalls;
  public static final String SERIALIZED_NAME_ALLOWED_BYTES = "allowedBytes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_BYTES)
  private Long allowedBytes;
  public static final String SERIALIZED_NAME_ALLOWED_CALLS = "allowedCalls";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CALLS)
  private Long allowedCalls;
  public static final String SERIALIZED_NAME_AVERAGE_ELAPSED_MS = "averageElapsedMs";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ELAPSED_MS)
  private Double averageElapsedMs;
  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Map<String, List<CallsUsagePerDateDto>> details = new HashMap<>();
  public CallsUsageDtoDto() {
  }
  public CallsUsageDtoDto totalCalls(Long totalCalls) {
    this.totalCalls = totalCalls;
    return this;
  }

  /**
   * The total number of API calls.
   * @return totalCalls
   */
  @javax.annotation.Nonnull
  public Long getTotalCalls() {
    return totalCalls;
  }

  public void setTotalCalls(Long totalCalls) {
    this.totalCalls = totalCalls;
  }
  public CallsUsageDtoDto totalBytes(Long totalBytes) {
    this.totalBytes = totalBytes;
    return this;
  }

  /**
   * The total number of bytes transferred.
   * @return totalBytes
   */
  @javax.annotation.Nonnull
  public Long getTotalBytes() {
    return totalBytes;
  }

  public void setTotalBytes(Long totalBytes) {
    this.totalBytes = totalBytes;
  }
  public CallsUsageDtoDto monthCalls(Long monthCalls) {
    this.monthCalls = monthCalls;
    return this;
  }

  /**
   * The total number of API calls this month.
   * @return monthCalls
   */
  @javax.annotation.Nonnull
  public Long getMonthCalls() {
    return monthCalls;
  }

  public void setMonthCalls(Long monthCalls) {
    this.monthCalls = monthCalls;
  }
  public CallsUsageDtoDto monthBytes(Long monthBytes) {
    this.monthBytes = monthBytes;
    return this;
  }

  /**
   * The total number of bytes transferred this month.
   * @return monthBytes
   */
  @javax.annotation.Nonnull
  public Long getMonthBytes() {
    return monthBytes;
  }

  public void setMonthBytes(Long monthBytes) {
    this.monthBytes = monthBytes;
  }
  public CallsUsageDtoDto blockingApiCalls(Long blockingApiCalls) {
    this.blockingApiCalls = blockingApiCalls;
    return this;
  }

  /**
   * The amount of calls that will block the app.
   * @return blockingApiCalls
   */
  @javax.annotation.Nonnull
  public Long getBlockingApiCalls() {
    return blockingApiCalls;
  }

  public void setBlockingApiCalls(Long blockingApiCalls) {
    this.blockingApiCalls = blockingApiCalls;
  }
  public CallsUsageDtoDto allowedBytes(Long allowedBytes) {
    this.allowedBytes = allowedBytes;
    return this;
  }

  /**
   * The included API traffic.
   * @return allowedBytes
   */
  @javax.annotation.Nonnull
  public Long getAllowedBytes() {
    return allowedBytes;
  }

  public void setAllowedBytes(Long allowedBytes) {
    this.allowedBytes = allowedBytes;
  }
  public CallsUsageDtoDto allowedCalls(Long allowedCalls) {
    this.allowedCalls = allowedCalls;
    return this;
  }

  /**
   * The included API calls.
   * @return allowedCalls
   */
  @javax.annotation.Nonnull
  public Long getAllowedCalls() {
    return allowedCalls;
  }

  public void setAllowedCalls(Long allowedCalls) {
    this.allowedCalls = allowedCalls;
  }
  public CallsUsageDtoDto averageElapsedMs(Double averageElapsedMs) {
    this.averageElapsedMs = averageElapsedMs;
    return this;
  }

  /**
   * The average duration in milliseconds.
   * @return averageElapsedMs
   */
  @javax.annotation.Nonnull
  public Double getAverageElapsedMs() {
    return averageElapsedMs;
  }

  public void setAverageElapsedMs(Double averageElapsedMs) {
    this.averageElapsedMs = averageElapsedMs;
  }
  public CallsUsageDtoDto details(Map<String, List<CallsUsagePerDateDto>> details) {
    this.details = details;
    return this;
  }

  public CallsUsageDtoDto putDetailsItem(String key, List<CallsUsagePerDateDto> detailsItem) {
    if (this.details == null) {
      this.details = new HashMap<>();
    }
    this.details.put(key, detailsItem);
    return this;
  }

  /**
   * The statistics by date and group.
   * @return details
   */
  @javax.annotation.Nonnull
  public Map<String, List<CallsUsagePerDateDto>> getDetails() {
    return details;
  }

  public void setDetails(Map<String, List<CallsUsagePerDateDto>> details) {
    this.details = details;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallsUsageDtoDto callsUsageDtoDto = (CallsUsageDtoDto) o;
    return Objects.equals(this.totalCalls, callsUsageDtoDto.totalCalls) &&
        Objects.equals(this.totalBytes, callsUsageDtoDto.totalBytes) &&
        Objects.equals(this.monthCalls, callsUsageDtoDto.monthCalls) &&
        Objects.equals(this.monthBytes, callsUsageDtoDto.monthBytes) &&
        Objects.equals(this.blockingApiCalls, callsUsageDtoDto.blockingApiCalls) &&
        Objects.equals(this.allowedBytes, callsUsageDtoDto.allowedBytes) &&
        Objects.equals(this.allowedCalls, callsUsageDtoDto.allowedCalls) &&
        Objects.equals(this.averageElapsedMs, callsUsageDtoDto.averageElapsedMs) &&
        Objects.equals(this.details, callsUsageDtoDto.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCalls, totalBytes, monthCalls, monthBytes, blockingApiCalls, allowedBytes, allowedCalls, averageElapsedMs, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallsUsageDtoDto {\n");
    sb.append("    totalCalls: ").append(toIndentedString(totalCalls)).append("\n");
    sb.append("    totalBytes: ").append(toIndentedString(totalBytes)).append("\n");
    sb.append("    monthCalls: ").append(toIndentedString(monthCalls)).append("\n");
    sb.append("    monthBytes: ").append(toIndentedString(monthBytes)).append("\n");
    sb.append("    blockingApiCalls: ").append(toIndentedString(blockingApiCalls)).append("\n");
    sb.append("    allowedBytes: ").append(toIndentedString(allowedBytes)).append("\n");
    sb.append("    allowedCalls: ").append(toIndentedString(allowedCalls)).append("\n");
    sb.append("    averageElapsedMs: ").append(toIndentedString(averageElapsedMs)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalCalls");
    openapiFields.add("totalBytes");
    openapiFields.add("monthCalls");
    openapiFields.add("monthBytes");
    openapiFields.add("blockingApiCalls");
    openapiFields.add("allowedBytes");
    openapiFields.add("allowedCalls");
    openapiFields.add("averageElapsedMs");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("totalCalls");
    openapiRequiredFields.add("totalBytes");
    openapiRequiredFields.add("monthCalls");
    openapiRequiredFields.add("monthBytes");
    openapiRequiredFields.add("blockingApiCalls");
    openapiRequiredFields.add("allowedBytes");
    openapiRequiredFields.add("allowedCalls");
    openapiRequiredFields.add("averageElapsedMs");
    openapiRequiredFields.add("details");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallsUsageDtoDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallsUsageDtoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallsUsageDtoDto is not found in the empty JSON string", CallsUsageDtoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallsUsageDtoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallsUsageDtoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CallsUsageDtoDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallsUsageDtoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallsUsageDtoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallsUsageDtoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallsUsageDtoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<CallsUsageDtoDto>() {
           @Override
           public void write(JsonWriter out, CallsUsageDtoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallsUsageDtoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallsUsageDtoDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallsUsageDtoDto
   * @throws IOException if the JSON string is invalid with respect to CallsUsageDtoDto
   */
  public static CallsUsageDtoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallsUsageDtoDto.class);
  }

  /**
   * Convert an instance of CallsUsageDtoDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
