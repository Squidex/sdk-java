/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.FieldPropertiesDto;
import com.squidex.api.types.TagsFieldEditor;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * TagsFieldPropertiesDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class TagsFieldPropertiesDto extends FieldPropertiesDto {
  public static final String SERIALIZED_NAME_DEFAULT_VALUES = "defaultValues";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUES)
  private Map<String, List<String>> defaultValues = new HashMap<>();
  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private List<String> defaultValue;
  public static final String SERIALIZED_NAME_MIN_ITEMS = "minItems";
  @SerializedName(SERIALIZED_NAME_MIN_ITEMS)
  private Integer minItems;
  public static final String SERIALIZED_NAME_MAX_ITEMS = "maxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  private Integer maxItems;
  public static final String SERIALIZED_NAME_ALLOWED_VALUES = "allowedValues";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUES)
  private List<String> allowedValues;
  public static final String SERIALIZED_NAME_CREATE_ENUM = "createEnum";
  @SerializedName(SERIALIZED_NAME_CREATE_ENUM)
  private Boolean createEnum;
  public static final String SERIALIZED_NAME_EDITOR = "editor";
  @SerializedName(SERIALIZED_NAME_EDITOR)
  private TagsFieldEditor editor;
  public TagsFieldPropertiesDto() {
  }
  public TagsFieldPropertiesDto defaultValues(Map<String, List<String>> defaultValues) {
    this.defaultValues = defaultValues;
    return this;
  }

  public TagsFieldPropertiesDto putDefaultValuesItem(String key, List<String> defaultValuesItem) {
    if (this.defaultValues == null) {
      this.defaultValues = new HashMap<>();
    }
    this.defaultValues.put(key, defaultValuesItem);
    return this;
  }

  /**
   * Get defaultValues
   * @return defaultValues
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getDefaultValues() {
    return defaultValues;
  }

  public void setDefaultValues(Map<String, List<String>> defaultValues) {
    this.defaultValues = defaultValues;
  }
  public TagsFieldPropertiesDto defaultValue(List<String> defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  public TagsFieldPropertiesDto addDefaultValueItem(String defaultValueItem) {
    if (this.defaultValue == null) {
      this.defaultValue = new ArrayList<>();
    }
    this.defaultValue.add(defaultValueItem);
    return this;
  }

  /**
   * The default value.
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public List<String> getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(List<String> defaultValue) {
    this.defaultValue = defaultValue;
  }
  public TagsFieldPropertiesDto minItems(Integer minItems) {
    this.minItems = minItems;
    return this;
  }

  /**
   * The minimum allowed items for the field value.
   * @return minItems
   */
  @javax.annotation.Nullable
  public Integer getMinItems() {
    return minItems;
  }

  public void setMinItems(Integer minItems) {
    this.minItems = minItems;
  }
  public TagsFieldPropertiesDto maxItems(Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * The maximum allowed items for the field value.
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(Integer maxItems) {
    this.maxItems = maxItems;
  }
  public TagsFieldPropertiesDto allowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
    return this;
  }

  public TagsFieldPropertiesDto addAllowedValuesItem(String allowedValuesItem) {
    if (this.allowedValues == null) {
      this.allowedValues = new ArrayList<>();
    }
    this.allowedValues.add(allowedValuesItem);
    return this;
  }

  /**
   * The allowed values for the field value.
   * @return allowedValues
   */
  @javax.annotation.Nullable
  public List<String> getAllowedValues() {
    return allowedValues;
  }

  public void setAllowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
  }
  public TagsFieldPropertiesDto createEnum(Boolean createEnum) {
    this.createEnum = createEnum;
    return this;
  }

  /**
   * Indicates whether GraphQL Enum should be created.
   * @return createEnum
   */
  @javax.annotation.Nullable
  public Boolean getCreateEnum() {
    return createEnum;
  }

  public void setCreateEnum(Boolean createEnum) {
    this.createEnum = createEnum;
  }
  public TagsFieldPropertiesDto editor(TagsFieldEditor editor) {
    this.editor = editor;
    return this;
  }

  /**
   * Get editor
   * @return editor
   */
  @javax.annotation.Nullable
  public TagsFieldEditor getEditor() {
    return editor;
  }

  public void setEditor(TagsFieldEditor editor) {
    this.editor = editor;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagsFieldPropertiesDto tagsFieldPropertiesDto = (TagsFieldPropertiesDto) o;
    return Objects.equals(this.defaultValues, tagsFieldPropertiesDto.defaultValues) &&
        Objects.equals(this.defaultValue, tagsFieldPropertiesDto.defaultValue) &&
        Objects.equals(this.minItems, tagsFieldPropertiesDto.minItems) &&
        Objects.equals(this.maxItems, tagsFieldPropertiesDto.maxItems) &&
        Objects.equals(this.allowedValues, tagsFieldPropertiesDto.allowedValues) &&
        Objects.equals(this.createEnum, tagsFieldPropertiesDto.createEnum) &&
        Objects.equals(this.editor, tagsFieldPropertiesDto.editor) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultValues, defaultValue, minItems, maxItems, allowedValues, createEnum, editor, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagsFieldPropertiesDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    defaultValues: ").append(toIndentedString(defaultValues)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    minItems: ").append(toIndentedString(minItems)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    allowedValues: ").append(toIndentedString(allowedValues)).append("\n");
    sb.append("    createEnum: ").append(toIndentedString(createEnum)).append("\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("hints");
    openapiFields.add("placeholder");
    openapiFields.add("isRequired");
    openapiFields.add("isRequiredOnPublish");
    openapiFields.add("isHalfWidth");
    openapiFields.add("editorUrl");
    openapiFields.add("tags");
    openapiFields.add("fieldType");
    openapiFields.add("defaultValues");
    openapiFields.add("defaultValue");
    openapiFields.add("minItems");
    openapiFields.add("maxItems");
    openapiFields.add("allowedValues");
    openapiFields.add("createEnum");
    openapiFields.add("editor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagsFieldPropertiesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagsFieldPropertiesDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagsFieldPropertiesDto is not found in the empty JSON string", TagsFieldPropertiesDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagsFieldPropertiesDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagsFieldPropertiesDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TagsFieldPropertiesDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagsFieldPropertiesDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagsFieldPropertiesDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagsFieldPropertiesDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagsFieldPropertiesDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TagsFieldPropertiesDto>() {
           @Override
           public void write(JsonWriter out, TagsFieldPropertiesDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagsFieldPropertiesDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagsFieldPropertiesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagsFieldPropertiesDto
   * @throws IOException if the JSON string is invalid with respect to TagsFieldPropertiesDto
   */
  public static TagsFieldPropertiesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagsFieldPropertiesDto.class);
  }

  /**
   * Convert an instance of TagsFieldPropertiesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
