/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.DateTimeCalculatedDefaultValue;
import com.squidex.api.types.DateTimeFieldEditor;
import com.squidex.api.types.FieldPropertiesDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * DateTimeFieldPropertiesDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class DateTimeFieldPropertiesDto extends FieldPropertiesDto {
  public static final String SERIALIZED_NAME_DEFAULT_VALUES = "defaultValues";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUES)
  private Map<String, OffsetDateTime> defaultValues = new HashMap<>();
  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private OffsetDateTime defaultValue;
  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private OffsetDateTime maxValue;
  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private OffsetDateTime minValue;
  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;
  public static final String SERIALIZED_NAME_EDITOR = "editor";
  @SerializedName(SERIALIZED_NAME_EDITOR)
  private DateTimeFieldEditor editor;
  public static final String SERIALIZED_NAME_CALCULATED_DEFAULT_VALUE = "calculatedDefaultValue";
  @SerializedName(SERIALIZED_NAME_CALCULATED_DEFAULT_VALUE)
  private DateTimeCalculatedDefaultValue calculatedDefaultValue;
  public DateTimeFieldPropertiesDto() {
  }
  public DateTimeFieldPropertiesDto defaultValues(Map<String, OffsetDateTime> defaultValues) {
    this.defaultValues = defaultValues;
    return this;
  }

  public DateTimeFieldPropertiesDto putDefaultValuesItem(String key, OffsetDateTime defaultValuesItem) {
    if (this.defaultValues == null) {
      this.defaultValues = new HashMap<>();
    }
    this.defaultValues.put(key, defaultValuesItem);
    return this;
  }

  /**
   * Get defaultValues
   * @return defaultValues
   */
  @javax.annotation.Nullable
  public Map<String, OffsetDateTime> getDefaultValues() {
    return defaultValues;
  }

  public void setDefaultValues(Map<String, OffsetDateTime> defaultValues) {
    this.defaultValues = defaultValues;
  }
  public DateTimeFieldPropertiesDto defaultValue(OffsetDateTime defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * The default value for the field value.
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(OffsetDateTime defaultValue) {
    this.defaultValue = defaultValue;
  }
  public DateTimeFieldPropertiesDto maxValue(OffsetDateTime maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * The maximum allowed value for the field value.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(OffsetDateTime maxValue) {
    this.maxValue = maxValue;
  }
  public DateTimeFieldPropertiesDto minValue(OffsetDateTime minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * The minimum allowed value for the field value.
   * @return minValue
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMinValue() {
    return minValue;
  }

  public void setMinValue(OffsetDateTime minValue) {
    this.minValue = minValue;
  }
  public DateTimeFieldPropertiesDto format(String format) {
    this.format = format;
    return this;
  }

  /**
   * The format pattern when displayed in the UI.
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }
  public DateTimeFieldPropertiesDto editor(DateTimeFieldEditor editor) {
    this.editor = editor;
    return this;
  }

  /**
   * Get editor
   * @return editor
   */
  @javax.annotation.Nullable
  public DateTimeFieldEditor getEditor() {
    return editor;
  }

  public void setEditor(DateTimeFieldEditor editor) {
    this.editor = editor;
  }
  public DateTimeFieldPropertiesDto calculatedDefaultValue(DateTimeCalculatedDefaultValue calculatedDefaultValue) {
    this.calculatedDefaultValue = calculatedDefaultValue;
    return this;
  }

  /**
   * Get calculatedDefaultValue
   * @return calculatedDefaultValue
   */
  @javax.annotation.Nullable
  public DateTimeCalculatedDefaultValue getCalculatedDefaultValue() {
    return calculatedDefaultValue;
  }

  public void setCalculatedDefaultValue(DateTimeCalculatedDefaultValue calculatedDefaultValue) {
    this.calculatedDefaultValue = calculatedDefaultValue;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateTimeFieldPropertiesDto dateTimeFieldPropertiesDto = (DateTimeFieldPropertiesDto) o;
    return Objects.equals(this.defaultValues, dateTimeFieldPropertiesDto.defaultValues) &&
        Objects.equals(this.defaultValue, dateTimeFieldPropertiesDto.defaultValue) &&
        Objects.equals(this.maxValue, dateTimeFieldPropertiesDto.maxValue) &&
        Objects.equals(this.minValue, dateTimeFieldPropertiesDto.minValue) &&
        Objects.equals(this.format, dateTimeFieldPropertiesDto.format) &&
        Objects.equals(this.editor, dateTimeFieldPropertiesDto.editor) &&
        Objects.equals(this.calculatedDefaultValue, dateTimeFieldPropertiesDto.calculatedDefaultValue) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultValues, defaultValue, maxValue, minValue, format, editor, calculatedDefaultValue, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateTimeFieldPropertiesDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    defaultValues: ").append(toIndentedString(defaultValues)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    calculatedDefaultValue: ").append(toIndentedString(calculatedDefaultValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("hints");
    openapiFields.add("placeholder");
    openapiFields.add("isRequired");
    openapiFields.add("isRequiredOnPublish");
    openapiFields.add("isHalfWidth");
    openapiFields.add("editorUrl");
    openapiFields.add("tags");
    openapiFields.add("fieldType");
    openapiFields.add("defaultValues");
    openapiFields.add("defaultValue");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("format");
    openapiFields.add("editor");
    openapiFields.add("calculatedDefaultValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DateTimeFieldPropertiesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DateTimeFieldPropertiesDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DateTimeFieldPropertiesDto is not found in the empty JSON string", DateTimeFieldPropertiesDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DateTimeFieldPropertiesDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DateTimeFieldPropertiesDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DateTimeFieldPropertiesDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DateTimeFieldPropertiesDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DateTimeFieldPropertiesDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DateTimeFieldPropertiesDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DateTimeFieldPropertiesDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DateTimeFieldPropertiesDto>() {
           @Override
           public void write(JsonWriter out, DateTimeFieldPropertiesDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DateTimeFieldPropertiesDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DateTimeFieldPropertiesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DateTimeFieldPropertiesDto
   * @throws IOException if the JSON string is invalid with respect to DateTimeFieldPropertiesDto
   */
  public static DateTimeFieldPropertiesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DateTimeFieldPropertiesDto.class);
  }

  /**
   * Convert an instance of DateTimeFieldPropertiesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
