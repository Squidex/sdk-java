/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.SkipReason;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * SimulatedRuleEventDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class SimulatedRuleEventDto {
  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;
  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;
  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;
  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private Object event = null;
  public static final String SERIALIZED_NAME_ENRICHED_EVENT = "enrichedEvent";
  @SerializedName(SERIALIZED_NAME_ENRICHED_EVENT)
  private Object enrichedEvent = null;
  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private String actionName;
  public static final String SERIALIZED_NAME_ACTION_DATA = "actionData";
  @SerializedName(SERIALIZED_NAME_ACTION_DATA)
  private String actionData;
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;
  public static final String SERIALIZED_NAME_SKIP_REASONS = "skipReasons";
  @SerializedName(SERIALIZED_NAME_SKIP_REASONS)
  private List<SkipReason> skipReasons = new ArrayList<>();
  public SimulatedRuleEventDto() {
  }
  public SimulatedRuleEventDto eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The unique event id.
   * @return eventId
   */
  @javax.annotation.Nonnull
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }
  public SimulatedRuleEventDto uniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

  /**
   * The the unique id of the simulated event.
   * @return uniqueId
   */
  @javax.annotation.Nonnull
  public String getUniqueId() {
    return uniqueId;
  }

  public void setUniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
  }
  public SimulatedRuleEventDto eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * The name of the event.
   * @return eventName
   */
  @javax.annotation.Nonnull
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }
  public SimulatedRuleEventDto event(Object event) {
    this.event = event;
    return this;
  }

  /**
   * The source event.
   * @return event
   */
  @javax.annotation.Nullable
  public Object getEvent() {
    return event;
  }

  public void setEvent(Object event) {
    this.event = event;
  }
  public SimulatedRuleEventDto enrichedEvent(Object enrichedEvent) {
    this.enrichedEvent = enrichedEvent;
    return this;
  }

  /**
   * The enriched event.
   * @return enrichedEvent
   */
  @javax.annotation.Nullable
  public Object getEnrichedEvent() {
    return enrichedEvent;
  }

  public void setEnrichedEvent(Object enrichedEvent) {
    this.enrichedEvent = enrichedEvent;
  }
  public SimulatedRuleEventDto actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * The data for the action.
   * @return actionName
   */
  @javax.annotation.Nullable
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }
  public SimulatedRuleEventDto actionData(String actionData) {
    this.actionData = actionData;
    return this;
  }

  /**
   * The name of the action.
   * @return actionData
   */
  @javax.annotation.Nullable
  public String getActionData() {
    return actionData;
  }

  public void setActionData(String actionData) {
    this.actionData = actionData;
  }
  public SimulatedRuleEventDto error(String error) {
    this.error = error;
    return this;
  }

  /**
   * The name of the event.
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }
  public SimulatedRuleEventDto skipReasons(List<SkipReason> skipReasons) {
    this.skipReasons = skipReasons;
    return this;
  }

  public SimulatedRuleEventDto addSkipReasonsItem(SkipReason skipReasonsItem) {
    if (this.skipReasons == null) {
      this.skipReasons = new ArrayList<>();
    }
    this.skipReasons.add(skipReasonsItem);
    return this;
  }

  /**
   * The reason why the event has been skipped.
   * @return skipReasons
   */
  @javax.annotation.Nonnull
  public List<SkipReason> getSkipReasons() {
    return skipReasons;
  }

  public void setSkipReasons(List<SkipReason> skipReasons) {
    this.skipReasons = skipReasons;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulatedRuleEventDto simulatedRuleEventDto = (SimulatedRuleEventDto) o;
    return Objects.equals(this.eventId, simulatedRuleEventDto.eventId) &&
        Objects.equals(this.uniqueId, simulatedRuleEventDto.uniqueId) &&
        Objects.equals(this.eventName, simulatedRuleEventDto.eventName) &&
        Objects.equals(this.event, simulatedRuleEventDto.event) &&
        Objects.equals(this.enrichedEvent, simulatedRuleEventDto.enrichedEvent) &&
        Objects.equals(this.actionName, simulatedRuleEventDto.actionName) &&
        Objects.equals(this.actionData, simulatedRuleEventDto.actionData) &&
        Objects.equals(this.error, simulatedRuleEventDto.error) &&
        Objects.equals(this.skipReasons, simulatedRuleEventDto.skipReasons);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, uniqueId, eventName, event, enrichedEvent, actionName, actionData, error, skipReasons);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulatedRuleEventDto {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    enrichedEvent: ").append(toIndentedString(enrichedEvent)).append("\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    actionData: ").append(toIndentedString(actionData)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    skipReasons: ").append(toIndentedString(skipReasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventId");
    openapiFields.add("uniqueId");
    openapiFields.add("eventName");
    openapiFields.add("event");
    openapiFields.add("enrichedEvent");
    openapiFields.add("actionName");
    openapiFields.add("actionData");
    openapiFields.add("error");
    openapiFields.add("skipReasons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eventId");
    openapiRequiredFields.add("uniqueId");
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("skipReasons");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulatedRuleEventDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulatedRuleEventDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulatedRuleEventDto is not found in the empty JSON string", SimulatedRuleEventDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulatedRuleEventDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulatedRuleEventDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimulatedRuleEventDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if (!jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      if ((jsonObj.get("actionName") != null && !jsonObj.get("actionName").isJsonNull()) && !jsonObj.get("actionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionName").toString()));
      }
      if ((jsonObj.get("actionData") != null && !jsonObj.get("actionData").isJsonNull()) && !jsonObj.get("actionData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionData").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("skipReasons") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("skipReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skipReasons` to be an array in the JSON string but got `%s`", jsonObj.get("skipReasons").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulatedRuleEventDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulatedRuleEventDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulatedRuleEventDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulatedRuleEventDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulatedRuleEventDto>() {
           @Override
           public void write(JsonWriter out, SimulatedRuleEventDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulatedRuleEventDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulatedRuleEventDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulatedRuleEventDto
   * @throws IOException if the JSON string is invalid with respect to SimulatedRuleEventDto
   */
  public static SimulatedRuleEventDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulatedRuleEventDto.class);
  }

  /**
   * Convert an instance of SimulatedRuleEventDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
