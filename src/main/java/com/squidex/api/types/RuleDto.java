/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.ResourceLink;
import com.squidex.api.types.RuleActionDto;
import com.squidex.api.types.RuleTriggerDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * RuleDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class RuleDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;
  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;
  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;
  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;
  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;
  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private RuleTriggerDto trigger;
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private RuleActionDto action;
  public static final String SERIALIZED_NAME_NUM_SUCCEEDED = "numSucceeded";
  @SerializedName(SERIALIZED_NAME_NUM_SUCCEEDED)
  private Long numSucceeded;
  public static final String SERIALIZED_NAME_NUM_FAILED = "numFailed";
  @SerializedName(SERIALIZED_NAME_NUM_FAILED)
  private Long numFailed;
  public static final String SERIALIZED_NAME_LAST_EXECUTED = "lastExecuted";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTED)
  private OffsetDateTime lastExecuted;
  public RuleDto() {
  }
  public RuleDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public RuleDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public RuleDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the rule.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }
  public RuleDto createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The user that has created the rule.
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }
  public RuleDto lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * The user that has updated the rule.
   * @return lastModifiedBy
   */
  @javax.annotation.Nonnull
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }
  public RuleDto created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The date and time when the rule has been created.
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }
  public RuleDto lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * The date and time when the rule has been modified last.
   * @return lastModified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }
  public RuleDto version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the rule.
   * @return version
   */
  @javax.annotation.Nonnull
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }
  public RuleDto isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Determines if the rule is enabled.
   * @return isEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }
  public RuleDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional rule name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
  public RuleDto trigger(RuleTriggerDto trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nonnull
  public RuleTriggerDto getTrigger() {
    return trigger;
  }

  public void setTrigger(RuleTriggerDto trigger) {
    this.trigger = trigger;
  }
  public RuleDto action(RuleActionDto action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public RuleActionDto getAction() {
    return action;
  }

  public void setAction(RuleActionDto action) {
    this.action = action;
  }
  public RuleDto numSucceeded(Long numSucceeded) {
    this.numSucceeded = numSucceeded;
    return this;
  }

  /**
   * The number of completed executions.
   * @return numSucceeded
   */
  @javax.annotation.Nonnull
  public Long getNumSucceeded() {
    return numSucceeded;
  }

  public void setNumSucceeded(Long numSucceeded) {
    this.numSucceeded = numSucceeded;
  }
  public RuleDto numFailed(Long numFailed) {
    this.numFailed = numFailed;
    return this;
  }

  /**
   * The number of failed executions.
   * @return numFailed
   */
  @javax.annotation.Nonnull
  public Long getNumFailed() {
    return numFailed;
  }

  public void setNumFailed(Long numFailed) {
    this.numFailed = numFailed;
  }
  @Deprecated
  public RuleDto lastExecuted(OffsetDateTime lastExecuted) {
    this.lastExecuted = lastExecuted;
    return this;
  }

  /**
   * The date and time when the rule was executed the last time.
   * @return lastExecuted
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public OffsetDateTime getLastExecuted() {
    return lastExecuted;
  }

  @Deprecated
  public void setLastExecuted(OffsetDateTime lastExecuted) {
    this.lastExecuted = lastExecuted;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleDto ruleDto = (RuleDto) o;
    return Objects.equals(this.links, ruleDto.links) &&
        Objects.equals(this.id, ruleDto.id) &&
        Objects.equals(this.createdBy, ruleDto.createdBy) &&
        Objects.equals(this.lastModifiedBy, ruleDto.lastModifiedBy) &&
        Objects.equals(this.created, ruleDto.created) &&
        Objects.equals(this.lastModified, ruleDto.lastModified) &&
        Objects.equals(this.version, ruleDto.version) &&
        Objects.equals(this.isEnabled, ruleDto.isEnabled) &&
        Objects.equals(this.name, ruleDto.name) &&
        Objects.equals(this.trigger, ruleDto.trigger) &&
        Objects.equals(this.action, ruleDto.action) &&
        Objects.equals(this.numSucceeded, ruleDto.numSucceeded) &&
        Objects.equals(this.numFailed, ruleDto.numFailed) &&
        Objects.equals(this.lastExecuted, ruleDto.lastExecuted);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, createdBy, lastModifiedBy, created, lastModified, version, isEnabled, name, trigger, action, numSucceeded, numFailed, lastExecuted);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    numSucceeded: ").append(toIndentedString(numSucceeded)).append("\n");
    sb.append("    numFailed: ").append(toIndentedString(numFailed)).append("\n");
    sb.append("    lastExecuted: ").append(toIndentedString(lastExecuted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("createdBy");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("created");
    openapiFields.add("lastModified");
    openapiFields.add("version");
    openapiFields.add("isEnabled");
    openapiFields.add("name");
    openapiFields.add("trigger");
    openapiFields.add("action");
    openapiFields.add("numSucceeded");
    openapiFields.add("numFailed");
    openapiFields.add("lastExecuted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("lastModifiedBy");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("lastModified");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("isEnabled");
    openapiRequiredFields.add("trigger");
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("numSucceeded");
    openapiRequiredFields.add("numFailed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleDto is not found in the empty JSON string", RuleDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if (!jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `trigger`
      RuleTriggerDto.validateJsonElement(jsonObj.get("trigger"));
      // validate the required field `action`
      RuleActionDto.validateJsonElement(jsonObj.get("action"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleDto.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleDto>() {
           @Override
           public void write(JsonWriter out, RuleDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleDto
   * @throws IOException if the JSON string is invalid with respect to RuleDto
   */
  public static RuleDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleDto.class);
  }

  /**
   * Convert an instance of RuleDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
