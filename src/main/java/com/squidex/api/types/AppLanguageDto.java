/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.ResourceLink;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * AppLanguageDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class AppLanguageDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_ISO2_CODE = "iso2Code";
  @SerializedName(SERIALIZED_NAME_ISO2_CODE)
  private String iso2Code;
  public static final String SERIALIZED_NAME_ENGLISH_NAME = "englishName";
  @SerializedName(SERIALIZED_NAME_ENGLISH_NAME)
  private String englishName;
  public static final String SERIALIZED_NAME_FALLBACK = "fallback";
  @SerializedName(SERIALIZED_NAME_FALLBACK)
  private List<String> fallback = new ArrayList<>();
  public static final String SERIALIZED_NAME_IS_MASTER = "isMaster";
  @SerializedName(SERIALIZED_NAME_IS_MASTER)
  private Boolean isMaster;
  public static final String SERIALIZED_NAME_IS_OPTIONAL = "isOptional";
  @SerializedName(SERIALIZED_NAME_IS_OPTIONAL)
  private Boolean isOptional;
  public AppLanguageDto() {
  }
  public AppLanguageDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public AppLanguageDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public AppLanguageDto iso2Code(String iso2Code) {
    this.iso2Code = iso2Code;
    return this;
  }

  /**
   * The iso code of the language.
   * @return iso2Code
   */
  @javax.annotation.Nonnull
  public String getIso2Code() {
    return iso2Code;
  }

  public void setIso2Code(String iso2Code) {
    this.iso2Code = iso2Code;
  }
  public AppLanguageDto englishName(String englishName) {
    this.englishName = englishName;
    return this;
  }

  /**
   * The english name of the language.
   * @return englishName
   */
  @javax.annotation.Nonnull
  public String getEnglishName() {
    return englishName;
  }

  public void setEnglishName(String englishName) {
    this.englishName = englishName;
  }
  public AppLanguageDto fallback(List<String> fallback) {
    this.fallback = fallback;
    return this;
  }

  public AppLanguageDto addFallbackItem(String fallbackItem) {
    if (this.fallback == null) {
      this.fallback = new ArrayList<>();
    }
    this.fallback.add(fallbackItem);
    return this;
  }

  /**
   * The fallback languages.
   * @return fallback
   */
  @javax.annotation.Nonnull
  public List<String> getFallback() {
    return fallback;
  }

  public void setFallback(List<String> fallback) {
    this.fallback = fallback;
  }
  public AppLanguageDto isMaster(Boolean isMaster) {
    this.isMaster = isMaster;
    return this;
  }

  /**
   * Indicates if the language is the master language.
   * @return isMaster
   */
  @javax.annotation.Nonnull
  public Boolean getIsMaster() {
    return isMaster;
  }

  public void setIsMaster(Boolean isMaster) {
    this.isMaster = isMaster;
  }
  public AppLanguageDto isOptional(Boolean isOptional) {
    this.isOptional = isOptional;
    return this;
  }

  /**
   * Indicates if the language is optional.
   * @return isOptional
   */
  @javax.annotation.Nonnull
  public Boolean getIsOptional() {
    return isOptional;
  }

  public void setIsOptional(Boolean isOptional) {
    this.isOptional = isOptional;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppLanguageDto appLanguageDto = (AppLanguageDto) o;
    return Objects.equals(this.links, appLanguageDto.links) &&
        Objects.equals(this.iso2Code, appLanguageDto.iso2Code) &&
        Objects.equals(this.englishName, appLanguageDto.englishName) &&
        Objects.equals(this.fallback, appLanguageDto.fallback) &&
        Objects.equals(this.isMaster, appLanguageDto.isMaster) &&
        Objects.equals(this.isOptional, appLanguageDto.isOptional);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, iso2Code, englishName, fallback, isMaster, isOptional);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppLanguageDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    iso2Code: ").append(toIndentedString(iso2Code)).append("\n");
    sb.append("    englishName: ").append(toIndentedString(englishName)).append("\n");
    sb.append("    fallback: ").append(toIndentedString(fallback)).append("\n");
    sb.append("    isMaster: ").append(toIndentedString(isMaster)).append("\n");
    sb.append("    isOptional: ").append(toIndentedString(isOptional)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("iso2Code");
    openapiFields.add("englishName");
    openapiFields.add("fallback");
    openapiFields.add("isMaster");
    openapiFields.add("isOptional");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("iso2Code");
    openapiRequiredFields.add("englishName");
    openapiRequiredFields.add("fallback");
    openapiRequiredFields.add("isMaster");
    openapiRequiredFields.add("isOptional");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppLanguageDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppLanguageDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppLanguageDto is not found in the empty JSON string", AppLanguageDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppLanguageDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppLanguageDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppLanguageDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("iso2Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso2Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso2Code").toString()));
      }
      if (!jsonObj.get("englishName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `englishName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("englishName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("fallback") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("fallback").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback` to be an array in the JSON string but got `%s`", jsonObj.get("fallback").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppLanguageDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppLanguageDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppLanguageDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppLanguageDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AppLanguageDto>() {
           @Override
           public void write(JsonWriter out, AppLanguageDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppLanguageDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppLanguageDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppLanguageDto
   * @throws IOException if the JSON string is invalid with respect to AppLanguageDto
   */
  public static AppLanguageDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppLanguageDto.class);
  }

  /**
   * Convert an instance of AppLanguageDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
