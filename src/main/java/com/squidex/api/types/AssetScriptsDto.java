/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.ResourceLink;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * AssetScriptsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class AssetScriptsDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;
  public static final String SERIALIZED_NAME_QUERY_PRE = "queryPre";
  @SerializedName(SERIALIZED_NAME_QUERY_PRE)
  private String queryPre;
  public static final String SERIALIZED_NAME_CREATE = "create";
  @SerializedName(SERIALIZED_NAME_CREATE)
  private String create;
  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private String update;
  public static final String SERIALIZED_NAME_ANNOTATE = "annotate";
  @SerializedName(SERIALIZED_NAME_ANNOTATE)
  private String annotate;
  public static final String SERIALIZED_NAME_MOVE = "move";
  @SerializedName(SERIALIZED_NAME_MOVE)
  private String move;
  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private String delete;
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;
  public AssetScriptsDto() {
  }
  public AssetScriptsDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public AssetScriptsDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public AssetScriptsDto query(String query) {
    this.query = query;
    return this;
  }

  /**
   * The script that is executed for each asset when querying assets.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }
  public AssetScriptsDto queryPre(String queryPre) {
    this.queryPre = queryPre;
    return this;
  }

  /**
   * The script that is executed for all assets when querying assets.
   * @return queryPre
   */
  @javax.annotation.Nullable
  public String getQueryPre() {
    return queryPre;
  }

  public void setQueryPre(String queryPre) {
    this.queryPre = queryPre;
  }
  public AssetScriptsDto create(String create) {
    this.create = create;
    return this;
  }

  /**
   * The script that is executed when creating an asset.
   * @return create
   */
  @javax.annotation.Nullable
  public String getCreate() {
    return create;
  }

  public void setCreate(String create) {
    this.create = create;
  }
  public AssetScriptsDto update(String update) {
    this.update = update;
    return this;
  }

  /**
   * The script that is executed when updating a content.
   * @return update
   */
  @javax.annotation.Nullable
  public String getUpdate() {
    return update;
  }

  public void setUpdate(String update) {
    this.update = update;
  }
  public AssetScriptsDto annotate(String annotate) {
    this.annotate = annotate;
    return this;
  }

  /**
   * The script that is executed when annotating a content.
   * @return annotate
   */
  @javax.annotation.Nullable
  public String getAnnotate() {
    return annotate;
  }

  public void setAnnotate(String annotate) {
    this.annotate = annotate;
  }
  public AssetScriptsDto move(String move) {
    this.move = move;
    return this;
  }

  /**
   * The script that is executed when moving a content.
   * @return move
   */
  @javax.annotation.Nullable
  public String getMove() {
    return move;
  }

  public void setMove(String move) {
    this.move = move;
  }
  public AssetScriptsDto delete(String delete) {
    this.delete = delete;
    return this;
  }

  /**
   * The script that is executed when deleting a content.
   * @return delete
   */
  @javax.annotation.Nullable
  public String getDelete() {
    return delete;
  }

  public void setDelete(String delete) {
    this.delete = delete;
  }
  public AssetScriptsDto version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the app.
   * @return version
   */
  @javax.annotation.Nonnull
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetScriptsDto assetScriptsDto = (AssetScriptsDto) o;
    return Objects.equals(this.links, assetScriptsDto.links) &&
        Objects.equals(this.query, assetScriptsDto.query) &&
        Objects.equals(this.queryPre, assetScriptsDto.queryPre) &&
        Objects.equals(this.create, assetScriptsDto.create) &&
        Objects.equals(this.update, assetScriptsDto.update) &&
        Objects.equals(this.annotate, assetScriptsDto.annotate) &&
        Objects.equals(this.move, assetScriptsDto.move) &&
        Objects.equals(this.delete, assetScriptsDto.delete) &&
        Objects.equals(this.version, assetScriptsDto.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, query, queryPre, create, update, annotate, move, delete, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetScriptsDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryPre: ").append(toIndentedString(queryPre)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    annotate: ").append(toIndentedString(annotate)).append("\n");
    sb.append("    move: ").append(toIndentedString(move)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("query");
    openapiFields.add("queryPre");
    openapiFields.add("create");
    openapiFields.add("update");
    openapiFields.add("annotate");
    openapiFields.add("move");
    openapiFields.add("delete");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetScriptsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetScriptsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetScriptsDto is not found in the empty JSON string", AssetScriptsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetScriptsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetScriptsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetScriptsDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("queryPre") != null && !jsonObj.get("queryPre").isJsonNull()) && !jsonObj.get("queryPre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryPre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryPre").toString()));
      }
      if ((jsonObj.get("create") != null && !jsonObj.get("create").isJsonNull()) && !jsonObj.get("create").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `create` to be a primitive type in the JSON string but got `%s`", jsonObj.get("create").toString()));
      }
      if ((jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) && !jsonObj.get("update").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `update` to be a primitive type in the JSON string but got `%s`", jsonObj.get("update").toString()));
      }
      if ((jsonObj.get("annotate") != null && !jsonObj.get("annotate").isJsonNull()) && !jsonObj.get("annotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotate").toString()));
      }
      if ((jsonObj.get("move") != null && !jsonObj.get("move").isJsonNull()) && !jsonObj.get("move").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `move` to be a primitive type in the JSON string but got `%s`", jsonObj.get("move").toString()));
      }
      if ((jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) && !jsonObj.get("delete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetScriptsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetScriptsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetScriptsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetScriptsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetScriptsDto>() {
           @Override
           public void write(JsonWriter out, AssetScriptsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetScriptsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetScriptsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetScriptsDto
   * @throws IOException if the JSON string is invalid with respect to AssetScriptsDto
   */
  public static AssetScriptsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetScriptsDto.class);
  }

  /**
   * Convert an instance of AssetScriptsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
