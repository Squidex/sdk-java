/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squidex.api.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squidex.api.core.ObjectMappers;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DeepDetectRuleActionDto.Builder.class)
public final class DeepDetectRuleActionDto {
    private final int minimumProbability;

    private final int maximumTags;

    private DeepDetectRuleActionDto(int minimumProbability, int maximumTags) {
        this.minimumProbability = minimumProbability;
        this.maximumTags = maximumTags;
    }

    /**
     * @return The minimum probability for objects to be recognized (0 - 100).
     */
    @JsonProperty("minimumProbability")
    public int getMinimumProbability() {
        return minimumProbability;
    }

    /**
     * @return The maximum number of tags to use.
     */
    @JsonProperty("maximumTags")
    public int getMaximumTags() {
        return maximumTags;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeepDetectRuleActionDto && equalTo((DeepDetectRuleActionDto) other);
    }

    private boolean equalTo(DeepDetectRuleActionDto other) {
        return minimumProbability == other.minimumProbability && maximumTags == other.maximumTags;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.minimumProbability, this.maximumTags);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MinimumProbabilityStage builder() {
        return new Builder();
    }

    public interface MinimumProbabilityStage {
        MaximumTagsStage minimumProbability(int minimumProbability);

        Builder from(DeepDetectRuleActionDto other);
    }

    public interface MaximumTagsStage {
        _FinalStage maximumTags(int maximumTags);
    }

    public interface _FinalStage {
        DeepDetectRuleActionDto build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MinimumProbabilityStage, MaximumTagsStage, _FinalStage {
        private int minimumProbability;

        private int maximumTags;

        private Builder() {}

        @Override
        public Builder from(DeepDetectRuleActionDto other) {
            minimumProbability(other.getMinimumProbability());
            maximumTags(other.getMaximumTags());
            return this;
        }

        /**
         * <p>The minimum probability for objects to be recognized (0 - 100).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("minimumProbability")
        public MaximumTagsStage minimumProbability(int minimumProbability) {
            this.minimumProbability = minimumProbability;
            return this;
        }

        /**
         * <p>The maximum number of tags to use.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("maximumTags")
        public _FinalStage maximumTags(int maximumTags) {
            this.maximumTags = maximumTags;
            return this;
        }

        @Override
        public DeepDetectRuleActionDto build() {
            return new DeepDetectRuleActionDto(minimumProbability, maximumTags);
        }
    }
}
