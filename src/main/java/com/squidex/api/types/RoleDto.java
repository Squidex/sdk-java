/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.ResourceLink;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * RoleDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class RoleDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;
  public static final String SERIALIZED_NAME_NUM_CLIENTS = "numClients";
  @SerializedName(SERIALIZED_NAME_NUM_CLIENTS)
  private Integer numClients;
  public static final String SERIALIZED_NAME_NUM_CONTRIBUTORS = "numContributors";
  @SerializedName(SERIALIZED_NAME_NUM_CONTRIBUTORS)
  private Integer numContributors;
  public static final String SERIALIZED_NAME_IS_DEFAULT_ROLE = "isDefaultRole";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_ROLE)
  private Boolean isDefaultRole;
  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<String> permissions = new ArrayList<>();
  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Object> properties = new HashMap<>();
  public RoleDto() {
  }
  public RoleDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public RoleDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public RoleDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The role name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
  public RoleDto numClients(Integer numClients) {
    this.numClients = numClients;
    return this;
  }

  /**
   * The number of clients with this role.
   * @return numClients
   */
  @javax.annotation.Nonnull
  public Integer getNumClients() {
    return numClients;
  }

  public void setNumClients(Integer numClients) {
    this.numClients = numClients;
  }
  public RoleDto numContributors(Integer numContributors) {
    this.numContributors = numContributors;
    return this;
  }

  /**
   * The number of contributors with this role.
   * @return numContributors
   */
  @javax.annotation.Nonnull
  public Integer getNumContributors() {
    return numContributors;
  }

  public void setNumContributors(Integer numContributors) {
    this.numContributors = numContributors;
  }
  public RoleDto isDefaultRole(Boolean isDefaultRole) {
    this.isDefaultRole = isDefaultRole;
    return this;
  }

  /**
   * Indicates if the role is an builtin default role.
   * @return isDefaultRole
   */
  @javax.annotation.Nonnull
  public Boolean getIsDefaultRole() {
    return isDefaultRole;
  }

  public void setIsDefaultRole(Boolean isDefaultRole) {
    this.isDefaultRole = isDefaultRole;
  }
  public RoleDto permissions(List<String> permissions) {
    this.permissions = permissions;
    return this;
  }

  public RoleDto addPermissionsItem(String permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Associated list of permissions.
   * @return permissions
   */
  @javax.annotation.Nonnull
  public List<String> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<String> permissions) {
    this.permissions = permissions;
  }
  public RoleDto properties(Map<String, Object> properties) {
    this.properties = properties;
    return this;
  }

  public RoleDto putPropertiesItem(String key, Object propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Associated list of UI properties.
   * @return properties
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, Object> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleDto roleDto = (RoleDto) o;
    return Objects.equals(this.links, roleDto.links) &&
        Objects.equals(this.name, roleDto.name) &&
        Objects.equals(this.numClients, roleDto.numClients) &&
        Objects.equals(this.numContributors, roleDto.numContributors) &&
        Objects.equals(this.isDefaultRole, roleDto.isDefaultRole) &&
        Objects.equals(this.permissions, roleDto.permissions) &&
        Objects.equals(this.properties, roleDto.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, name, numClients, numContributors, isDefaultRole, permissions, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numClients: ").append(toIndentedString(numClients)).append("\n");
    sb.append("    numContributors: ").append(toIndentedString(numContributors)).append("\n");
    sb.append("    isDefaultRole: ").append(toIndentedString(isDefaultRole)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("name");
    openapiFields.add("numClients");
    openapiFields.add("numContributors");
    openapiFields.add("isDefaultRole");
    openapiFields.add("permissions");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("numClients");
    openapiRequiredFields.add("numContributors");
    openapiRequiredFields.add("isDefaultRole");
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("properties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoleDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoleDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoleDto is not found in the empty JSON string", RoleDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoleDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoleDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoleDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("permissions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoleDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoleDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoleDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoleDto.class));

       return (TypeAdapter<T>) new TypeAdapter<RoleDto>() {
           @Override
           public void write(JsonWriter out, RoleDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoleDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoleDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoleDto
   * @throws IOException if the JSON string is invalid with respect to RoleDto
   */
  public static RoleDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoleDto.class);
  }

  /**
   * Convert an instance of RoleDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
