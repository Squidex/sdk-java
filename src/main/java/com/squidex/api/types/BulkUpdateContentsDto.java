/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.BulkUpdateContentsJobDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * BulkUpdateContentsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class BulkUpdateContentsDto {
  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<BulkUpdateContentsJobDto> jobs = new ArrayList<>();
  public static final String SERIALIZED_NAME_PUBLISH = "publish";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PUBLISH)
  private Boolean publish;
  public static final String SERIALIZED_NAME_DO_NOT_SCRIPT = "doNotScript";
  @SerializedName(SERIALIZED_NAME_DO_NOT_SCRIPT)
  private Boolean doNotScript;
  public static final String SERIALIZED_NAME_ENRICH_REQUIRED_FIELDS = "enrichRequiredFields";
  @SerializedName(SERIALIZED_NAME_ENRICH_REQUIRED_FIELDS)
  private Boolean enrichRequiredFields;
  public static final String SERIALIZED_NAME_DO_NOT_VALIDATE = "doNotValidate";
  @SerializedName(SERIALIZED_NAME_DO_NOT_VALIDATE)
  private Boolean doNotValidate;
  public static final String SERIALIZED_NAME_DO_NOT_VALIDATE_WORKFLOW = "doNotValidateWorkflow";
  @SerializedName(SERIALIZED_NAME_DO_NOT_VALIDATE_WORKFLOW)
  private Boolean doNotValidateWorkflow;
  public static final String SERIALIZED_NAME_CHECK_REFERRERS = "checkReferrers";
  @SerializedName(SERIALIZED_NAME_CHECK_REFERRERS)
  private Boolean checkReferrers;
  public static final String SERIALIZED_NAME_OPTIMIZE_VALIDATION = "optimizeValidation";
  @SerializedName(SERIALIZED_NAME_OPTIMIZE_VALIDATION)
  private Boolean optimizeValidation;
  public BulkUpdateContentsDto() {
  }
  public BulkUpdateContentsDto jobs(List<BulkUpdateContentsJobDto> jobs) {
    this.jobs = jobs;
    return this;
  }

  public BulkUpdateContentsDto addJobsItem(BulkUpdateContentsJobDto jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

  /**
   * The contents to update or insert.
   * @return jobs
   */
  @javax.annotation.Nonnull
  public List<BulkUpdateContentsJobDto> getJobs() {
    return jobs;
  }

  public void setJobs(List<BulkUpdateContentsJobDto> jobs) {
    this.jobs = jobs;
  }
  @Deprecated
  public BulkUpdateContentsDto publish(Boolean publish) {
    this.publish = publish;
    return this;
  }

  /**
   * True to automatically publish the content.
   * @return publish
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getPublish() {
    return publish;
  }

  @Deprecated
  public void setPublish(Boolean publish) {
    this.publish = publish;
  }
  public BulkUpdateContentsDto doNotScript(Boolean doNotScript) {
    this.doNotScript = doNotScript;
    return this;
  }

  /**
   * True to turn off scripting for faster inserts. Default: true.
   * @return doNotScript
   */
  @javax.annotation.Nullable
  public Boolean getDoNotScript() {
    return doNotScript;
  }

  public void setDoNotScript(Boolean doNotScript) {
    this.doNotScript = doNotScript;
  }
  public BulkUpdateContentsDto enrichRequiredFields(Boolean enrichRequiredFields) {
    this.enrichRequiredFields = enrichRequiredFields;
    return this;
  }

  /**
   * True, to also enrich required fields. Default: false.             
   * @return enrichRequiredFields
   */
  @javax.annotation.Nullable
  public Boolean getEnrichRequiredFields() {
    return enrichRequiredFields;
  }

  public void setEnrichRequiredFields(Boolean enrichRequiredFields) {
    this.enrichRequiredFields = enrichRequiredFields;
  }
  public BulkUpdateContentsDto doNotValidate(Boolean doNotValidate) {
    this.doNotValidate = doNotValidate;
    return this;
  }

  /**
   * True to turn off validation for faster inserts. Default: false.
   * @return doNotValidate
   */
  @javax.annotation.Nullable
  public Boolean getDoNotValidate() {
    return doNotValidate;
  }

  public void setDoNotValidate(Boolean doNotValidate) {
    this.doNotValidate = doNotValidate;
  }
  public BulkUpdateContentsDto doNotValidateWorkflow(Boolean doNotValidateWorkflow) {
    this.doNotValidateWorkflow = doNotValidateWorkflow;
    return this;
  }

  /**
   * True to turn off validation of workflow rules. Default: false.
   * @return doNotValidateWorkflow
   */
  @javax.annotation.Nullable
  public Boolean getDoNotValidateWorkflow() {
    return doNotValidateWorkflow;
  }

  public void setDoNotValidateWorkflow(Boolean doNotValidateWorkflow) {
    this.doNotValidateWorkflow = doNotValidateWorkflow;
  }
  public BulkUpdateContentsDto checkReferrers(Boolean checkReferrers) {
    this.checkReferrers = checkReferrers;
    return this;
  }

  /**
   * True to check referrers of deleted contents.
   * @return checkReferrers
   */
  @javax.annotation.Nullable
  public Boolean getCheckReferrers() {
    return checkReferrers;
  }

  public void setCheckReferrers(Boolean checkReferrers) {
    this.checkReferrers = checkReferrers;
  }
  public BulkUpdateContentsDto optimizeValidation(Boolean optimizeValidation) {
    this.optimizeValidation = optimizeValidation;
    return this;
  }

  /**
   * True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.
   * @return optimizeValidation
   */
  @javax.annotation.Nullable
  public Boolean getOptimizeValidation() {
    return optimizeValidation;
  }

  public void setOptimizeValidation(Boolean optimizeValidation) {
    this.optimizeValidation = optimizeValidation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkUpdateContentsDto bulkUpdateContentsDto = (BulkUpdateContentsDto) o;
    return Objects.equals(this.jobs, bulkUpdateContentsDto.jobs) &&
        Objects.equals(this.publish, bulkUpdateContentsDto.publish) &&
        Objects.equals(this.doNotScript, bulkUpdateContentsDto.doNotScript) &&
        Objects.equals(this.enrichRequiredFields, bulkUpdateContentsDto.enrichRequiredFields) &&
        Objects.equals(this.doNotValidate, bulkUpdateContentsDto.doNotValidate) &&
        Objects.equals(this.doNotValidateWorkflow, bulkUpdateContentsDto.doNotValidateWorkflow) &&
        Objects.equals(this.checkReferrers, bulkUpdateContentsDto.checkReferrers) &&
        Objects.equals(this.optimizeValidation, bulkUpdateContentsDto.optimizeValidation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobs, publish, doNotScript, enrichRequiredFields, doNotValidate, doNotValidateWorkflow, checkReferrers, optimizeValidation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkUpdateContentsDto {\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    publish: ").append(toIndentedString(publish)).append("\n");
    sb.append("    doNotScript: ").append(toIndentedString(doNotScript)).append("\n");
    sb.append("    enrichRequiredFields: ").append(toIndentedString(enrichRequiredFields)).append("\n");
    sb.append("    doNotValidate: ").append(toIndentedString(doNotValidate)).append("\n");
    sb.append("    doNotValidateWorkflow: ").append(toIndentedString(doNotValidateWorkflow)).append("\n");
    sb.append("    checkReferrers: ").append(toIndentedString(checkReferrers)).append("\n");
    sb.append("    optimizeValidation: ").append(toIndentedString(optimizeValidation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobs");
    openapiFields.add("publish");
    openapiFields.add("doNotScript");
    openapiFields.add("enrichRequiredFields");
    openapiFields.add("doNotValidate");
    openapiFields.add("doNotValidateWorkflow");
    openapiFields.add("checkReferrers");
    openapiFields.add("optimizeValidation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkUpdateContentsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkUpdateContentsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkUpdateContentsDto is not found in the empty JSON string", BulkUpdateContentsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkUpdateContentsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkUpdateContentsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BulkUpdateContentsDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("jobs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
      }

      JsonArray jsonArrayjobs = jsonObj.getAsJsonArray("jobs");
      // validate the required field `jobs` (array)
      for (int i = 0; i < jsonArrayjobs.size(); i++) {
        BulkUpdateContentsJobDto.validateJsonElement(jsonArrayjobs.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkUpdateContentsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkUpdateContentsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkUpdateContentsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkUpdateContentsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkUpdateContentsDto>() {
           @Override
           public void write(JsonWriter out, BulkUpdateContentsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkUpdateContentsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkUpdateContentsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkUpdateContentsDto
   * @throws IOException if the JSON string is invalid with respect to BulkUpdateContentsDto
   */
  public static BulkUpdateContentsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkUpdateContentsDto.class);
  }

  /**
   * Convert an instance of BulkUpdateContentsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
