/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.BulkUpdateContentType;
import com.squidex.api.types.QueryJsonDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * BulkUpdateContentsJobDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class BulkUpdateContentsJobDto {
  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private QueryJsonDto query;
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, Map<String, Object>> data = new HashMap<>();
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;
  public static final String SERIALIZED_NAME_DUE_TIME = "dueTime";
  @SerializedName(SERIALIZED_NAME_DUE_TIME)
  private OffsetDateTime dueTime;
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private BulkUpdateContentType type;
  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;
  public static final String SERIALIZED_NAME_PATCH = "patch";
  @SerializedName(SERIALIZED_NAME_PATCH)
  private Boolean patch;
  public static final String SERIALIZED_NAME_PERMANENT = "permanent";
  @SerializedName(SERIALIZED_NAME_PERMANENT)
  private Boolean permanent;
  public static final String SERIALIZED_NAME_ENRICH_DEFAULTS = "enrichDefaults";
  @SerializedName(SERIALIZED_NAME_ENRICH_DEFAULTS)
  private Boolean enrichDefaults;
  public static final String SERIALIZED_NAME_EXPECTED_COUNT = "expectedCount";
  @SerializedName(SERIALIZED_NAME_EXPECTED_COUNT)
  private Long expectedCount;
  public static final String SERIALIZED_NAME_EXPECTED_VERSION = "expectedVersion";
  @SerializedName(SERIALIZED_NAME_EXPECTED_VERSION)
  private Long expectedVersion;
  public BulkUpdateContentsJobDto() {
  }
  public BulkUpdateContentsJobDto query(QueryJsonDto query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public QueryJsonDto getQuery() {
    return query;
  }

  public void setQuery(QueryJsonDto query) {
    this.query = query;
  }
  public BulkUpdateContentsJobDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An optional ID of the content to update.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }
  public BulkUpdateContentsJobDto data(Map<String, Map<String, Object>> data) {
    this.data = data;
    return this;
  }

  public BulkUpdateContentsJobDto putDataItem(String key, Map<String, Object> dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Object>> getData() {
    return data;
  }

  public void setData(Map<String, Map<String, Object>> data) {
    this.data = data;
  }
  public BulkUpdateContentsJobDto status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The new status when the type is set to &#39;ChangeStatus&#39; or &#39;Upsert&#39;.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
  public BulkUpdateContentsJobDto dueTime(OffsetDateTime dueTime) {
    this.dueTime = dueTime;
    return this;
  }

  /**
   * The due time.
   * @return dueTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueTime() {
    return dueTime;
  }

  public void setDueTime(OffsetDateTime dueTime) {
    this.dueTime = dueTime;
  }
  public BulkUpdateContentsJobDto type(BulkUpdateContentType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public BulkUpdateContentType getType() {
    return type;
  }

  public void setType(BulkUpdateContentType type) {
    this.type = type;
  }
  public BulkUpdateContentsJobDto schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * The optional schema id or name.
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }
  public BulkUpdateContentsJobDto patch(Boolean patch) {
    this.patch = patch;
    return this;
  }

  /**
   * Makes the update as patch.
   * @return patch
   */
  @javax.annotation.Nullable
  public Boolean getPatch() {
    return patch;
  }

  public void setPatch(Boolean patch) {
    this.patch = patch;
  }
  public BulkUpdateContentsJobDto permanent(Boolean permanent) {
    this.permanent = permanent;
    return this;
  }

  /**
   * True to delete the content permanently.
   * @return permanent
   */
  @javax.annotation.Nullable
  public Boolean getPermanent() {
    return permanent;
  }

  public void setPermanent(Boolean permanent) {
    this.permanent = permanent;
  }
  public BulkUpdateContentsJobDto enrichDefaults(Boolean enrichDefaults) {
    this.enrichDefaults = enrichDefaults;
    return this;
  }

  /**
   * Enrich the data with the default values when updating a content item.
   * @return enrichDefaults
   */
  @javax.annotation.Nullable
  public Boolean getEnrichDefaults() {
    return enrichDefaults;
  }

  public void setEnrichDefaults(Boolean enrichDefaults) {
    this.enrichDefaults = enrichDefaults;
  }
  public BulkUpdateContentsJobDto expectedCount(Long expectedCount) {
    this.expectedCount = expectedCount;
    return this;
  }

  /**
   * The number of expected items. Set it to a higher number to update multiple items when a query is defined.
   * @return expectedCount
   */
  @javax.annotation.Nullable
  public Long getExpectedCount() {
    return expectedCount;
  }

  public void setExpectedCount(Long expectedCount) {
    this.expectedCount = expectedCount;
  }
  public BulkUpdateContentsJobDto expectedVersion(Long expectedVersion) {
    this.expectedVersion = expectedVersion;
    return this;
  }

  /**
   * The expected version.
   * @return expectedVersion
   */
  @javax.annotation.Nullable
  public Long getExpectedVersion() {
    return expectedVersion;
  }

  public void setExpectedVersion(Long expectedVersion) {
    this.expectedVersion = expectedVersion;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkUpdateContentsJobDto bulkUpdateContentsJobDto = (BulkUpdateContentsJobDto) o;
    return Objects.equals(this.query, bulkUpdateContentsJobDto.query) &&
        Objects.equals(this.id, bulkUpdateContentsJobDto.id) &&
        Objects.equals(this.data, bulkUpdateContentsJobDto.data) &&
        Objects.equals(this.status, bulkUpdateContentsJobDto.status) &&
        Objects.equals(this.dueTime, bulkUpdateContentsJobDto.dueTime) &&
        Objects.equals(this.type, bulkUpdateContentsJobDto.type) &&
        Objects.equals(this.schema, bulkUpdateContentsJobDto.schema) &&
        Objects.equals(this.patch, bulkUpdateContentsJobDto.patch) &&
        Objects.equals(this.permanent, bulkUpdateContentsJobDto.permanent) &&
        Objects.equals(this.enrichDefaults, bulkUpdateContentsJobDto.enrichDefaults) &&
        Objects.equals(this.expectedCount, bulkUpdateContentsJobDto.expectedCount) &&
        Objects.equals(this.expectedVersion, bulkUpdateContentsJobDto.expectedVersion);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, id, data, status, dueTime, type, schema, patch, permanent, enrichDefaults, expectedCount, expectedVersion);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkUpdateContentsJobDto {\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    dueTime: ").append(toIndentedString(dueTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    patch: ").append(toIndentedString(patch)).append("\n");
    sb.append("    permanent: ").append(toIndentedString(permanent)).append("\n");
    sb.append("    enrichDefaults: ").append(toIndentedString(enrichDefaults)).append("\n");
    sb.append("    expectedCount: ").append(toIndentedString(expectedCount)).append("\n");
    sb.append("    expectedVersion: ").append(toIndentedString(expectedVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("query");
    openapiFields.add("id");
    openapiFields.add("data");
    openapiFields.add("status");
    openapiFields.add("dueTime");
    openapiFields.add("type");
    openapiFields.add("schema");
    openapiFields.add("patch");
    openapiFields.add("permanent");
    openapiFields.add("enrichDefaults");
    openapiFields.add("expectedCount");
    openapiFields.add("expectedVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkUpdateContentsJobDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkUpdateContentsJobDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkUpdateContentsJobDto is not found in the empty JSON string", BulkUpdateContentsJobDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkUpdateContentsJobDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkUpdateContentsJobDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        QueryJsonDto.validateJsonElement(jsonObj.get("query"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        BulkUpdateContentType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkUpdateContentsJobDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkUpdateContentsJobDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkUpdateContentsJobDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkUpdateContentsJobDto.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkUpdateContentsJobDto>() {
           @Override
           public void write(JsonWriter out, BulkUpdateContentsJobDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkUpdateContentsJobDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkUpdateContentsJobDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkUpdateContentsJobDto
   * @throws IOException if the JSON string is invalid with respect to BulkUpdateContentsJobDto
   */
  public static BulkUpdateContentsJobDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkUpdateContentsJobDto.class);
  }

  /**
   * Convert an instance of BulkUpdateContentsJobDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
