/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.FieldDto;
import com.squidex.api.types.ResourceLink;
import com.squidex.api.types.ScheduleJobDto;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * ContentDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class ContentDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;
  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;
  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data = null;
  public static final String SERIALIZED_NAME_REFERENCE_DATA = "referenceData";
  @SerializedName(SERIALIZED_NAME_REFERENCE_DATA)
  private Map<String, Map<String, Object>> referenceData = new HashMap<>();
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;
  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;
  public static final String SERIALIZED_NAME_NEW_STATUS = "newStatus";
  @SerializedName(SERIALIZED_NAME_NEW_STATUS)
  private String newStatus;
  public static final String SERIALIZED_NAME_STATUS_COLOR = "statusColor";
  @SerializedName(SERIALIZED_NAME_STATUS_COLOR)
  private String statusColor;
  public static final String SERIALIZED_NAME_NEW_STATUS_COLOR = "newStatusColor";
  @SerializedName(SERIALIZED_NAME_NEW_STATUS_COLOR)
  private String newStatusColor;
  public static final String SERIALIZED_NAME_EDIT_TOKEN = "editToken";
  @SerializedName(SERIALIZED_NAME_EDIT_TOKEN)
  private String editToken;
  public static final String SERIALIZED_NAME_SCHEDULE_JOB = "scheduleJob";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_JOB)
  private ScheduleJobDto scheduleJob;
  public static final String SERIALIZED_NAME_SCHEMA_ID = "schemaId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ID)
  private String schemaId;
  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;
  public static final String SERIALIZED_NAME_SCHEMA_DISPLAY_NAME = "schemaDisplayName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_DISPLAY_NAME)
  private String schemaDisplayName;
  public static final String SERIALIZED_NAME_REFERENCE_FIELDS = "referenceFields";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FIELDS)
  private List<FieldDto> referenceFields;
  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;
  public ContentDto() {
  }
  public ContentDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public ContentDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public ContentDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The if of the content item.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }
  public ContentDto createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The user that has created the content item.
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }
  public ContentDto lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * The user that has updated the content item.
   * @return lastModifiedBy
   */
  @javax.annotation.Nonnull
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }
  public ContentDto data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * The data of the content item.
   * @return data
   */
  @javax.annotation.Nullable
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }
  public ContentDto referenceData(Map<String, Map<String, Object>> referenceData) {
    this.referenceData = referenceData;
    return this;
  }

  public ContentDto putReferenceDataItem(String key, Map<String, Object> referenceDataItem) {
    if (this.referenceData == null) {
      this.referenceData = new HashMap<>();
    }
    this.referenceData.put(key, referenceDataItem);
    return this;
  }

  /**
   * Get referenceData
   * @return referenceData
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Object>> getReferenceData() {
    return referenceData;
  }

  public void setReferenceData(Map<String, Map<String, Object>> referenceData) {
    this.referenceData = referenceData;
  }
  public ContentDto created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The date and time when the content item has been created.
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }
  public ContentDto lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * The date and time when the content item has been modified last.
   * @return lastModified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }
  public ContentDto status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the content.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
  public ContentDto newStatus(String newStatus) {
    this.newStatus = newStatus;
    return this;
  }

  /**
   * The new status of the content.
   * @return newStatus
   */
  @javax.annotation.Nullable
  public String getNewStatus() {
    return newStatus;
  }

  public void setNewStatus(String newStatus) {
    this.newStatus = newStatus;
  }
  public ContentDto statusColor(String statusColor) {
    this.statusColor = statusColor;
    return this;
  }

  /**
   * The color of the status.
   * @return statusColor
   */
  @javax.annotation.Nonnull
  public String getStatusColor() {
    return statusColor;
  }

  public void setStatusColor(String statusColor) {
    this.statusColor = statusColor;
  }
  public ContentDto newStatusColor(String newStatusColor) {
    this.newStatusColor = newStatusColor;
    return this;
  }

  /**
   * The color of the new status.
   * @return newStatusColor
   */
  @javax.annotation.Nullable
  public String getNewStatusColor() {
    return newStatusColor;
  }

  public void setNewStatusColor(String newStatusColor) {
    this.newStatusColor = newStatusColor;
  }
  public ContentDto editToken(String editToken) {
    this.editToken = editToken;
    return this;
  }

  /**
   * The UI token.
   * @return editToken
   */
  @javax.annotation.Nullable
  public String getEditToken() {
    return editToken;
  }

  public void setEditToken(String editToken) {
    this.editToken = editToken;
  }
  public ContentDto scheduleJob(ScheduleJobDto scheduleJob) {
    this.scheduleJob = scheduleJob;
    return this;
  }

  /**
   * Get scheduleJob
   * @return scheduleJob
   */
  @javax.annotation.Nullable
  public ScheduleJobDto getScheduleJob() {
    return scheduleJob;
  }

  public void setScheduleJob(ScheduleJobDto scheduleJob) {
    this.scheduleJob = scheduleJob;
  }
  public ContentDto schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

  /**
   * The ID of the schema.
   * @return schemaId
   */
  @javax.annotation.Nonnull
  public String getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }
  public ContentDto schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * The name of the schema.
   * @return schemaName
   */
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }
  public ContentDto schemaDisplayName(String schemaDisplayName) {
    this.schemaDisplayName = schemaDisplayName;
    return this;
  }

  /**
   * The display name of the schema.
   * @return schemaDisplayName
   */
  @javax.annotation.Nullable
  public String getSchemaDisplayName() {
    return schemaDisplayName;
  }

  public void setSchemaDisplayName(String schemaDisplayName) {
    this.schemaDisplayName = schemaDisplayName;
  }
  public ContentDto referenceFields(List<FieldDto> referenceFields) {
    this.referenceFields = referenceFields;
    return this;
  }

  public ContentDto addReferenceFieldsItem(FieldDto referenceFieldsItem) {
    if (this.referenceFields == null) {
      this.referenceFields = new ArrayList<>();
    }
    this.referenceFields.add(referenceFieldsItem);
    return this;
  }

  /**
   * The reference fields.
   * @return referenceFields
   */
  @javax.annotation.Nullable
  public List<FieldDto> getReferenceFields() {
    return referenceFields;
  }

  public void setReferenceFields(List<FieldDto> referenceFields) {
    this.referenceFields = referenceFields;
  }
  public ContentDto isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Indicates whether the content is deleted.
   * @return isDeleted
   */
  @javax.annotation.Nonnull
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }
  public ContentDto version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the content.
   * @return version
   */
  @javax.annotation.Nonnull
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentDto contentDto = (ContentDto) o;
    return Objects.equals(this.links, contentDto.links) &&
        Objects.equals(this.id, contentDto.id) &&
        Objects.equals(this.createdBy, contentDto.createdBy) &&
        Objects.equals(this.lastModifiedBy, contentDto.lastModifiedBy) &&
        Objects.equals(this.data, contentDto.data) &&
        Objects.equals(this.referenceData, contentDto.referenceData) &&
        Objects.equals(this.created, contentDto.created) &&
        Objects.equals(this.lastModified, contentDto.lastModified) &&
        Objects.equals(this.status, contentDto.status) &&
        Objects.equals(this.newStatus, contentDto.newStatus) &&
        Objects.equals(this.statusColor, contentDto.statusColor) &&
        Objects.equals(this.newStatusColor, contentDto.newStatusColor) &&
        Objects.equals(this.editToken, contentDto.editToken) &&
        Objects.equals(this.scheduleJob, contentDto.scheduleJob) &&
        Objects.equals(this.schemaId, contentDto.schemaId) &&
        Objects.equals(this.schemaName, contentDto.schemaName) &&
        Objects.equals(this.schemaDisplayName, contentDto.schemaDisplayName) &&
        Objects.equals(this.referenceFields, contentDto.referenceFields) &&
        Objects.equals(this.isDeleted, contentDto.isDeleted) &&
        Objects.equals(this.version, contentDto.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, createdBy, lastModifiedBy, data, referenceData, created, lastModified, status, newStatus, statusColor, newStatusColor, editToken, scheduleJob, schemaId, schemaName, schemaDisplayName, referenceFields, isDeleted, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    referenceData: ").append(toIndentedString(referenceData)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    newStatus: ").append(toIndentedString(newStatus)).append("\n");
    sb.append("    statusColor: ").append(toIndentedString(statusColor)).append("\n");
    sb.append("    newStatusColor: ").append(toIndentedString(newStatusColor)).append("\n");
    sb.append("    editToken: ").append(toIndentedString(editToken)).append("\n");
    sb.append("    scheduleJob: ").append(toIndentedString(scheduleJob)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    schemaDisplayName: ").append(toIndentedString(schemaDisplayName)).append("\n");
    sb.append("    referenceFields: ").append(toIndentedString(referenceFields)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("createdBy");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("data");
    openapiFields.add("referenceData");
    openapiFields.add("created");
    openapiFields.add("lastModified");
    openapiFields.add("status");
    openapiFields.add("newStatus");
    openapiFields.add("statusColor");
    openapiFields.add("newStatusColor");
    openapiFields.add("editToken");
    openapiFields.add("scheduleJob");
    openapiFields.add("schemaId");
    openapiFields.add("schemaName");
    openapiFields.add("schemaDisplayName");
    openapiFields.add("referenceFields");
    openapiFields.add("isDeleted");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("lastModifiedBy");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("lastModified");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("statusColor");
    openapiRequiredFields.add("schemaId");
    openapiRequiredFields.add("isDeleted");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentDto is not found in the empty JSON string", ContentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if (!jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("newStatus") != null && !jsonObj.get("newStatus").isJsonNull()) && !jsonObj.get("newStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newStatus").toString()));
      }
      if (!jsonObj.get("statusColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusColor").toString()));
      }
      if ((jsonObj.get("newStatusColor") != null && !jsonObj.get("newStatusColor").isJsonNull()) && !jsonObj.get("newStatusColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newStatusColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newStatusColor").toString()));
      }
      if ((jsonObj.get("editToken") != null && !jsonObj.get("editToken").isJsonNull()) && !jsonObj.get("editToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editToken").toString()));
      }
      // validate the optional field `scheduleJob`
      if (jsonObj.get("scheduleJob") != null && !jsonObj.get("scheduleJob").isJsonNull()) {
        ScheduleJobDto.validateJsonElement(jsonObj.get("scheduleJob"));
      }
      if (!jsonObj.get("schemaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaId").toString()));
      }
      if ((jsonObj.get("schemaName") != null && !jsonObj.get("schemaName").isJsonNull()) && !jsonObj.get("schemaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaName").toString()));
      }
      if ((jsonObj.get("schemaDisplayName") != null && !jsonObj.get("schemaDisplayName").isJsonNull()) && !jsonObj.get("schemaDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaDisplayName").toString()));
      }
      if (jsonObj.get("referenceFields") != null && !jsonObj.get("referenceFields").isJsonNull()) {
        JsonArray jsonArrayreferenceFields = jsonObj.getAsJsonArray("referenceFields");
        if (jsonArrayreferenceFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referenceFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referenceFields` to be an array in the JSON string but got `%s`", jsonObj.get("referenceFields").toString()));
          }

          // validate the optional field `referenceFields` (array)
          for (int i = 0; i < jsonArrayreferenceFields.size(); i++) {
            FieldDto.validateJsonElement(jsonArrayreferenceFields.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentDto>() {
           @Override
           public void write(JsonWriter out, ContentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentDto
   * @throws IOException if the JSON string is invalid with respect to ContentDto
   */
  public static ContentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentDto.class);
  }

  /**
   * Convert an instance of ContentDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
