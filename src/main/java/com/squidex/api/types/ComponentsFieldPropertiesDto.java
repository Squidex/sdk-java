/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.ArrayCalculatedDefaultValue;
import com.squidex.api.types.FieldPropertiesDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * ComponentsFieldPropertiesDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class ComponentsFieldPropertiesDto extends FieldPropertiesDto {
  public static final String SERIALIZED_NAME_MIN_ITEMS = "minItems";
  @SerializedName(SERIALIZED_NAME_MIN_ITEMS)
  private Integer minItems;
  public static final String SERIALIZED_NAME_MAX_ITEMS = "maxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  private Integer maxItems;
  public static final String SERIALIZED_NAME_CALCULATED_DEFAULT_VALUE = "calculatedDefaultValue";
  @SerializedName(SERIALIZED_NAME_CALCULATED_DEFAULT_VALUE)
  private ArrayCalculatedDefaultValue calculatedDefaultValue;
  public static final String SERIALIZED_NAME_SCHEMA_IDS = "schemaIds";
  @SerializedName(SERIALIZED_NAME_SCHEMA_IDS)
  private List<String> schemaIds;
  public static final String SERIALIZED_NAME_UNIQUE_FIELDS = "uniqueFields";
  @SerializedName(SERIALIZED_NAME_UNIQUE_FIELDS)
  private List<String> uniqueFields;
  public ComponentsFieldPropertiesDto() {
  }
  public ComponentsFieldPropertiesDto minItems(Integer minItems) {
    this.minItems = minItems;
    return this;
  }

  /**
   * The minimum allowed items for the field value.
   * @return minItems
   */
  @javax.annotation.Nullable
  public Integer getMinItems() {
    return minItems;
  }

  public void setMinItems(Integer minItems) {
    this.minItems = minItems;
  }
  public ComponentsFieldPropertiesDto maxItems(Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * The maximum allowed items for the field value.
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(Integer maxItems) {
    this.maxItems = maxItems;
  }
  public ComponentsFieldPropertiesDto calculatedDefaultValue(ArrayCalculatedDefaultValue calculatedDefaultValue) {
    this.calculatedDefaultValue = calculatedDefaultValue;
    return this;
  }

  /**
   * Get calculatedDefaultValue
   * @return calculatedDefaultValue
   */
  @javax.annotation.Nullable
  public ArrayCalculatedDefaultValue getCalculatedDefaultValue() {
    return calculatedDefaultValue;
  }

  public void setCalculatedDefaultValue(ArrayCalculatedDefaultValue calculatedDefaultValue) {
    this.calculatedDefaultValue = calculatedDefaultValue;
  }
  public ComponentsFieldPropertiesDto schemaIds(List<String> schemaIds) {
    this.schemaIds = schemaIds;
    return this;
  }

  public ComponentsFieldPropertiesDto addSchemaIdsItem(String schemaIdsItem) {
    if (this.schemaIds == null) {
      this.schemaIds = new ArrayList<>();
    }
    this.schemaIds.add(schemaIdsItem);
    return this;
  }

  /**
   * The ID of the embedded schemas.
   * @return schemaIds
   */
  @javax.annotation.Nullable
  public List<String> getSchemaIds() {
    return schemaIds;
  }

  public void setSchemaIds(List<String> schemaIds) {
    this.schemaIds = schemaIds;
  }
  public ComponentsFieldPropertiesDto uniqueFields(List<String> uniqueFields) {
    this.uniqueFields = uniqueFields;
    return this;
  }

  public ComponentsFieldPropertiesDto addUniqueFieldsItem(String uniqueFieldsItem) {
    if (this.uniqueFields == null) {
      this.uniqueFields = new ArrayList<>();
    }
    this.uniqueFields.add(uniqueFieldsItem);
    return this;
  }

  /**
   * The fields that must be unique.
   * @return uniqueFields
   */
  @javax.annotation.Nullable
  public List<String> getUniqueFields() {
    return uniqueFields;
  }

  public void setUniqueFields(List<String> uniqueFields) {
    this.uniqueFields = uniqueFields;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentsFieldPropertiesDto componentsFieldPropertiesDto = (ComponentsFieldPropertiesDto) o;
    return Objects.equals(this.minItems, componentsFieldPropertiesDto.minItems) &&
        Objects.equals(this.maxItems, componentsFieldPropertiesDto.maxItems) &&
        Objects.equals(this.calculatedDefaultValue, componentsFieldPropertiesDto.calculatedDefaultValue) &&
        Objects.equals(this.schemaIds, componentsFieldPropertiesDto.schemaIds) &&
        Objects.equals(this.uniqueFields, componentsFieldPropertiesDto.uniqueFields) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(minItems, maxItems, calculatedDefaultValue, schemaIds, uniqueFields, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentsFieldPropertiesDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    minItems: ").append(toIndentedString(minItems)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    calculatedDefaultValue: ").append(toIndentedString(calculatedDefaultValue)).append("\n");
    sb.append("    schemaIds: ").append(toIndentedString(schemaIds)).append("\n");
    sb.append("    uniqueFields: ").append(toIndentedString(uniqueFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("hints");
    openapiFields.add("placeholder");
    openapiFields.add("isRequired");
    openapiFields.add("isRequiredOnPublish");
    openapiFields.add("isHalfWidth");
    openapiFields.add("editorUrl");
    openapiFields.add("tags");
    openapiFields.add("fieldType");
    openapiFields.add("minItems");
    openapiFields.add("maxItems");
    openapiFields.add("calculatedDefaultValue");
    openapiFields.add("schemaIds");
    openapiFields.add("uniqueFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentsFieldPropertiesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentsFieldPropertiesDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentsFieldPropertiesDto is not found in the empty JSON string", ComponentsFieldPropertiesDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentsFieldPropertiesDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentsFieldPropertiesDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComponentsFieldPropertiesDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentsFieldPropertiesDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentsFieldPropertiesDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentsFieldPropertiesDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentsFieldPropertiesDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentsFieldPropertiesDto>() {
           @Override
           public void write(JsonWriter out, ComponentsFieldPropertiesDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentsFieldPropertiesDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentsFieldPropertiesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentsFieldPropertiesDto
   * @throws IOException if the JSON string is invalid with respect to ComponentsFieldPropertiesDto
   */
  public static ComponentsFieldPropertiesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentsFieldPropertiesDto.class);
  }

  /**
   * Convert an instance of ComponentsFieldPropertiesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
