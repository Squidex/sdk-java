/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.AssetPreviewMode;
import com.squidex.api.types.AssetType;
import com.squidex.api.types.FieldPropertiesDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * AssetsFieldPropertiesDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class AssetsFieldPropertiesDto extends FieldPropertiesDto {
  public static final String SERIALIZED_NAME_PREVIEW_MODE = "previewMode";
  @SerializedName(SERIALIZED_NAME_PREVIEW_MODE)
  private AssetPreviewMode previewMode;
  public static final String SERIALIZED_NAME_DEFAULT_VALUES = "defaultValues";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUES)
  private Map<String, List<String>> defaultValues = new HashMap<>();
  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private List<String> defaultValue;
  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;
  public static final String SERIALIZED_NAME_PREVIEW_FORMAT = "previewFormat";
  @SerializedName(SERIALIZED_NAME_PREVIEW_FORMAT)
  private String previewFormat;
  public static final String SERIALIZED_NAME_MIN_ITEMS = "minItems";
  @SerializedName(SERIALIZED_NAME_MIN_ITEMS)
  private Integer minItems;
  public static final String SERIALIZED_NAME_MAX_ITEMS = "maxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  private Integer maxItems;
  public static final String SERIALIZED_NAME_MIN_SIZE = "minSize";
  @SerializedName(SERIALIZED_NAME_MIN_SIZE)
  private Integer minSize;
  public static final String SERIALIZED_NAME_MAX_SIZE = "maxSize";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE)
  private Integer maxSize;
  public static final String SERIALIZED_NAME_MIN_WIDTH = "minWidth";
  @SerializedName(SERIALIZED_NAME_MIN_WIDTH)
  private Integer minWidth;
  public static final String SERIALIZED_NAME_MAX_WIDTH = "maxWidth";
  @SerializedName(SERIALIZED_NAME_MAX_WIDTH)
  private Integer maxWidth;
  public static final String SERIALIZED_NAME_MIN_HEIGHT = "minHeight";
  @SerializedName(SERIALIZED_NAME_MIN_HEIGHT)
  private Integer minHeight;
  public static final String SERIALIZED_NAME_MAX_HEIGHT = "maxHeight";
  @SerializedName(SERIALIZED_NAME_MAX_HEIGHT)
  private Integer maxHeight;
  public static final String SERIALIZED_NAME_ASPECT_WIDTH = "aspectWidth";
  @SerializedName(SERIALIZED_NAME_ASPECT_WIDTH)
  private Integer aspectWidth;
  public static final String SERIALIZED_NAME_ASPECT_HEIGHT = "aspectHeight";
  @SerializedName(SERIALIZED_NAME_ASPECT_HEIGHT)
  private Integer aspectHeight;
  public static final String SERIALIZED_NAME_EXPECTED_TYPE = "expectedType";
  @SerializedName(SERIALIZED_NAME_EXPECTED_TYPE)
  private AssetType expectedType;
  public static final String SERIALIZED_NAME_RESOLVE_FIRST = "resolveFirst";
  @SerializedName(SERIALIZED_NAME_RESOLVE_FIRST)
  private Boolean resolveFirst;
  public static final String SERIALIZED_NAME_MUST_BE_IMAGE = "mustBeImage";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MUST_BE_IMAGE)
  private Boolean mustBeImage;
  public static final String SERIALIZED_NAME_RESOLVE_IMAGE = "resolveImage";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RESOLVE_IMAGE)
  private Boolean resolveImage;
  public static final String SERIALIZED_NAME_ALLOWED_EXTENSIONS = "allowedExtensions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_EXTENSIONS)
  private List<String> allowedExtensions;
  public static final String SERIALIZED_NAME_ALLOW_DUPLICATES = "allowDuplicates";
  @SerializedName(SERIALIZED_NAME_ALLOW_DUPLICATES)
  private Boolean allowDuplicates;
  public AssetsFieldPropertiesDto() {
  }
  public AssetsFieldPropertiesDto previewMode(AssetPreviewMode previewMode) {
    this.previewMode = previewMode;
    return this;
  }

  /**
   * Get previewMode
   * @return previewMode
   */
  @javax.annotation.Nullable
  public AssetPreviewMode getPreviewMode() {
    return previewMode;
  }

  public void setPreviewMode(AssetPreviewMode previewMode) {
    this.previewMode = previewMode;
  }
  public AssetsFieldPropertiesDto defaultValues(Map<String, List<String>> defaultValues) {
    this.defaultValues = defaultValues;
    return this;
  }

  public AssetsFieldPropertiesDto putDefaultValuesItem(String key, List<String> defaultValuesItem) {
    if (this.defaultValues == null) {
      this.defaultValues = new HashMap<>();
    }
    this.defaultValues.put(key, defaultValuesItem);
    return this;
  }

  /**
   * Get defaultValues
   * @return defaultValues
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getDefaultValues() {
    return defaultValues;
  }

  public void setDefaultValues(Map<String, List<String>> defaultValues) {
    this.defaultValues = defaultValues;
  }
  public AssetsFieldPropertiesDto defaultValue(List<String> defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  public AssetsFieldPropertiesDto addDefaultValueItem(String defaultValueItem) {
    if (this.defaultValue == null) {
      this.defaultValue = new ArrayList<>();
    }
    this.defaultValue.add(defaultValueItem);
    return this;
  }

  /**
   * The default value as a list of asset ids.
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public List<String> getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(List<String> defaultValue) {
    this.defaultValue = defaultValue;
  }
  public AssetsFieldPropertiesDto folderId(String folderId) {
    this.folderId = folderId;
    return this;
  }

  /**
   * The initial id to the folder.
   * @return folderId
   */
  @javax.annotation.Nullable
  public String getFolderId() {
    return folderId;
  }

  public void setFolderId(String folderId) {
    this.folderId = folderId;
  }
  public AssetsFieldPropertiesDto previewFormat(String previewFormat) {
    this.previewFormat = previewFormat;
    return this;
  }

  /**
   * The preview format.
   * @return previewFormat
   */
  @javax.annotation.Nullable
  public String getPreviewFormat() {
    return previewFormat;
  }

  public void setPreviewFormat(String previewFormat) {
    this.previewFormat = previewFormat;
  }
  public AssetsFieldPropertiesDto minItems(Integer minItems) {
    this.minItems = minItems;
    return this;
  }

  /**
   * The minimum allowed items for the field value.
   * @return minItems
   */
  @javax.annotation.Nullable
  public Integer getMinItems() {
    return minItems;
  }

  public void setMinItems(Integer minItems) {
    this.minItems = minItems;
  }
  public AssetsFieldPropertiesDto maxItems(Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * The maximum allowed items for the field value.
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(Integer maxItems) {
    this.maxItems = maxItems;
  }
  public AssetsFieldPropertiesDto minSize(Integer minSize) {
    this.minSize = minSize;
    return this;
  }

  /**
   * The minimum file size in bytes.
   * @return minSize
   */
  @javax.annotation.Nullable
  public Integer getMinSize() {
    return minSize;
  }

  public void setMinSize(Integer minSize) {
    this.minSize = minSize;
  }
  public AssetsFieldPropertiesDto maxSize(Integer maxSize) {
    this.maxSize = maxSize;
    return this;
  }

  /**
   * The maximum file size in bytes.
   * @return maxSize
   */
  @javax.annotation.Nullable
  public Integer getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(Integer maxSize) {
    this.maxSize = maxSize;
  }
  public AssetsFieldPropertiesDto minWidth(Integer minWidth) {
    this.minWidth = minWidth;
    return this;
  }

  /**
   * The minimum image width in pixels.
   * @return minWidth
   */
  @javax.annotation.Nullable
  public Integer getMinWidth() {
    return minWidth;
  }

  public void setMinWidth(Integer minWidth) {
    this.minWidth = minWidth;
  }
  public AssetsFieldPropertiesDto maxWidth(Integer maxWidth) {
    this.maxWidth = maxWidth;
    return this;
  }

  /**
   * The maximum image width in pixels.
   * @return maxWidth
   */
  @javax.annotation.Nullable
  public Integer getMaxWidth() {
    return maxWidth;
  }

  public void setMaxWidth(Integer maxWidth) {
    this.maxWidth = maxWidth;
  }
  public AssetsFieldPropertiesDto minHeight(Integer minHeight) {
    this.minHeight = minHeight;
    return this;
  }

  /**
   * The minimum image height in pixels.
   * @return minHeight
   */
  @javax.annotation.Nullable
  public Integer getMinHeight() {
    return minHeight;
  }

  public void setMinHeight(Integer minHeight) {
    this.minHeight = minHeight;
  }
  public AssetsFieldPropertiesDto maxHeight(Integer maxHeight) {
    this.maxHeight = maxHeight;
    return this;
  }

  /**
   * The maximum image height in pixels.
   * @return maxHeight
   */
  @javax.annotation.Nullable
  public Integer getMaxHeight() {
    return maxHeight;
  }

  public void setMaxHeight(Integer maxHeight) {
    this.maxHeight = maxHeight;
  }
  public AssetsFieldPropertiesDto aspectWidth(Integer aspectWidth) {
    this.aspectWidth = aspectWidth;
    return this;
  }

  /**
   * The image aspect width in pixels.
   * @return aspectWidth
   */
  @javax.annotation.Nullable
  public Integer getAspectWidth() {
    return aspectWidth;
  }

  public void setAspectWidth(Integer aspectWidth) {
    this.aspectWidth = aspectWidth;
  }
  public AssetsFieldPropertiesDto aspectHeight(Integer aspectHeight) {
    this.aspectHeight = aspectHeight;
    return this;
  }

  /**
   * The image aspect height in pixels.
   * @return aspectHeight
   */
  @javax.annotation.Nullable
  public Integer getAspectHeight() {
    return aspectHeight;
  }

  public void setAspectHeight(Integer aspectHeight) {
    this.aspectHeight = aspectHeight;
  }
  public AssetsFieldPropertiesDto expectedType(AssetType expectedType) {
    this.expectedType = expectedType;
    return this;
  }

  /**
   * Get expectedType
   * @return expectedType
   */
  @javax.annotation.Nullable
  public AssetType getExpectedType() {
    return expectedType;
  }

  public void setExpectedType(AssetType expectedType) {
    this.expectedType = expectedType;
  }
  public AssetsFieldPropertiesDto resolveFirst(Boolean resolveFirst) {
    this.resolveFirst = resolveFirst;
    return this;
  }

  /**
   * True to resolve first asset in the content list.
   * @return resolveFirst
   */
  @javax.annotation.Nullable
  public Boolean getResolveFirst() {
    return resolveFirst;
  }

  public void setResolveFirst(Boolean resolveFirst) {
    this.resolveFirst = resolveFirst;
  }
  @Deprecated
  public AssetsFieldPropertiesDto mustBeImage(Boolean mustBeImage) {
    this.mustBeImage = mustBeImage;
    return this;
  }

  /**
   * True to resolve first image in the content list.
   * @return mustBeImage
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getMustBeImage() {
    return mustBeImage;
  }

  @Deprecated
  public void setMustBeImage(Boolean mustBeImage) {
    this.mustBeImage = mustBeImage;
  }
  @Deprecated
  public AssetsFieldPropertiesDto resolveImage(Boolean resolveImage) {
    this.resolveImage = resolveImage;
    return this;
  }

  /**
   * True to resolve first image in the content list.
   * @return resolveImage
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getResolveImage() {
    return resolveImage;
  }

  @Deprecated
  public void setResolveImage(Boolean resolveImage) {
    this.resolveImage = resolveImage;
  }
  public AssetsFieldPropertiesDto allowedExtensions(List<String> allowedExtensions) {
    this.allowedExtensions = allowedExtensions;
    return this;
  }

  public AssetsFieldPropertiesDto addAllowedExtensionsItem(String allowedExtensionsItem) {
    if (this.allowedExtensions == null) {
      this.allowedExtensions = new ArrayList<>();
    }
    this.allowedExtensions.add(allowedExtensionsItem);
    return this;
  }

  /**
   * The allowed file extensions.
   * @return allowedExtensions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedExtensions() {
    return allowedExtensions;
  }

  public void setAllowedExtensions(List<String> allowedExtensions) {
    this.allowedExtensions = allowedExtensions;
  }
  public AssetsFieldPropertiesDto allowDuplicates(Boolean allowDuplicates) {
    this.allowDuplicates = allowDuplicates;
    return this;
  }

  /**
   * True, if duplicate values are allowed.
   * @return allowDuplicates
   */
  @javax.annotation.Nullable
  public Boolean getAllowDuplicates() {
    return allowDuplicates;
  }

  public void setAllowDuplicates(Boolean allowDuplicates) {
    this.allowDuplicates = allowDuplicates;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetsFieldPropertiesDto assetsFieldPropertiesDto = (AssetsFieldPropertiesDto) o;
    return Objects.equals(this.previewMode, assetsFieldPropertiesDto.previewMode) &&
        Objects.equals(this.defaultValues, assetsFieldPropertiesDto.defaultValues) &&
        Objects.equals(this.defaultValue, assetsFieldPropertiesDto.defaultValue) &&
        Objects.equals(this.folderId, assetsFieldPropertiesDto.folderId) &&
        Objects.equals(this.previewFormat, assetsFieldPropertiesDto.previewFormat) &&
        Objects.equals(this.minItems, assetsFieldPropertiesDto.minItems) &&
        Objects.equals(this.maxItems, assetsFieldPropertiesDto.maxItems) &&
        Objects.equals(this.minSize, assetsFieldPropertiesDto.minSize) &&
        Objects.equals(this.maxSize, assetsFieldPropertiesDto.maxSize) &&
        Objects.equals(this.minWidth, assetsFieldPropertiesDto.minWidth) &&
        Objects.equals(this.maxWidth, assetsFieldPropertiesDto.maxWidth) &&
        Objects.equals(this.minHeight, assetsFieldPropertiesDto.minHeight) &&
        Objects.equals(this.maxHeight, assetsFieldPropertiesDto.maxHeight) &&
        Objects.equals(this.aspectWidth, assetsFieldPropertiesDto.aspectWidth) &&
        Objects.equals(this.aspectHeight, assetsFieldPropertiesDto.aspectHeight) &&
        Objects.equals(this.expectedType, assetsFieldPropertiesDto.expectedType) &&
        Objects.equals(this.resolveFirst, assetsFieldPropertiesDto.resolveFirst) &&
        Objects.equals(this.mustBeImage, assetsFieldPropertiesDto.mustBeImage) &&
        Objects.equals(this.resolveImage, assetsFieldPropertiesDto.resolveImage) &&
        Objects.equals(this.allowedExtensions, assetsFieldPropertiesDto.allowedExtensions) &&
        Objects.equals(this.allowDuplicates, assetsFieldPropertiesDto.allowDuplicates) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(previewMode, defaultValues, defaultValue, folderId, previewFormat, minItems, maxItems, minSize, maxSize, minWidth, maxWidth, minHeight, maxHeight, aspectWidth, aspectHeight, expectedType, resolveFirst, mustBeImage, resolveImage, allowedExtensions, allowDuplicates, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetsFieldPropertiesDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    previewMode: ").append(toIndentedString(previewMode)).append("\n");
    sb.append("    defaultValues: ").append(toIndentedString(defaultValues)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    previewFormat: ").append(toIndentedString(previewFormat)).append("\n");
    sb.append("    minItems: ").append(toIndentedString(minItems)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    minSize: ").append(toIndentedString(minSize)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    minWidth: ").append(toIndentedString(minWidth)).append("\n");
    sb.append("    maxWidth: ").append(toIndentedString(maxWidth)).append("\n");
    sb.append("    minHeight: ").append(toIndentedString(minHeight)).append("\n");
    sb.append("    maxHeight: ").append(toIndentedString(maxHeight)).append("\n");
    sb.append("    aspectWidth: ").append(toIndentedString(aspectWidth)).append("\n");
    sb.append("    aspectHeight: ").append(toIndentedString(aspectHeight)).append("\n");
    sb.append("    expectedType: ").append(toIndentedString(expectedType)).append("\n");
    sb.append("    resolveFirst: ").append(toIndentedString(resolveFirst)).append("\n");
    sb.append("    mustBeImage: ").append(toIndentedString(mustBeImage)).append("\n");
    sb.append("    resolveImage: ").append(toIndentedString(resolveImage)).append("\n");
    sb.append("    allowedExtensions: ").append(toIndentedString(allowedExtensions)).append("\n");
    sb.append("    allowDuplicates: ").append(toIndentedString(allowDuplicates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("hints");
    openapiFields.add("placeholder");
    openapiFields.add("isRequired");
    openapiFields.add("isRequiredOnPublish");
    openapiFields.add("isHalfWidth");
    openapiFields.add("editorUrl");
    openapiFields.add("tags");
    openapiFields.add("fieldType");
    openapiFields.add("previewMode");
    openapiFields.add("defaultValues");
    openapiFields.add("defaultValue");
    openapiFields.add("folderId");
    openapiFields.add("previewFormat");
    openapiFields.add("minItems");
    openapiFields.add("maxItems");
    openapiFields.add("minSize");
    openapiFields.add("maxSize");
    openapiFields.add("minWidth");
    openapiFields.add("maxWidth");
    openapiFields.add("minHeight");
    openapiFields.add("maxHeight");
    openapiFields.add("aspectWidth");
    openapiFields.add("aspectHeight");
    openapiFields.add("expectedType");
    openapiFields.add("resolveFirst");
    openapiFields.add("mustBeImage");
    openapiFields.add("resolveImage");
    openapiFields.add("allowedExtensions");
    openapiFields.add("allowDuplicates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetsFieldPropertiesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetsFieldPropertiesDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetsFieldPropertiesDto is not found in the empty JSON string", AssetsFieldPropertiesDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetsFieldPropertiesDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetsFieldPropertiesDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetsFieldPropertiesDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetsFieldPropertiesDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetsFieldPropertiesDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetsFieldPropertiesDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetsFieldPropertiesDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetsFieldPropertiesDto>() {
           @Override
           public void write(JsonWriter out, AssetsFieldPropertiesDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetsFieldPropertiesDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetsFieldPropertiesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetsFieldPropertiesDto
   * @throws IOException if the JSON string is invalid with respect to AssetsFieldPropertiesDto
   */
  public static AssetsFieldPropertiesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetsFieldPropertiesDto.class);
  }

  /**
   * Convert an instance of AssetsFieldPropertiesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
