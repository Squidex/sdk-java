/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.AssetMeta;
import com.squidex.api.types.AssetType;
import com.squidex.api.types.ResourceLink;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * AssetDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class AssetDto {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, ResourceLink> links = new HashMap<>();
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;
  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;
  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;
  public static final String SERIALIZED_NAME_FILE_HASH = "fileHash";
  @SerializedName(SERIALIZED_NAME_FILE_HASH)
  private String fileHash;
  public static final String SERIALIZED_NAME_IS_PROTECTED = "isProtected";
  @SerializedName(SERIALIZED_NAME_IS_PROTECTED)
  private Boolean isProtected;
  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;
  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;
  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private String fileType;
  public static final String SERIALIZED_NAME_METADATA_TEXT = "metadataText";
  @SerializedName(SERIALIZED_NAME_METADATA_TEXT)
  private String metadataText;
  public static final String SERIALIZED_NAME_EDIT_TOKEN = "editToken";
  @SerializedName(SERIALIZED_NAME_EDIT_TOKEN)
  private String editToken;
  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, Object> metadata = new HashMap<>();
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;
  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Long fileSize;
  public static final String SERIALIZED_NAME_FILE_VERSION = "fileVersion";
  @SerializedName(SERIALIZED_NAME_FILE_VERSION)
  private Long fileVersion;
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AssetType type;
  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;
  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;
  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;
  public static final String SERIALIZED_NAME_META = "_meta";
  @SerializedName(SERIALIZED_NAME_META)
  private AssetMeta meta;
  public static final String SERIALIZED_NAME_IS_IMAGE = "isImage";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_IS_IMAGE)
  private Boolean isImage;
  public static final String SERIALIZED_NAME_PIXEL_WIDTH = "pixelWidth";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PIXEL_WIDTH)
  private Integer pixelWidth;
  public static final String SERIALIZED_NAME_PIXEL_HEIGHT = "pixelHeight";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PIXEL_HEIGHT)
  private Integer pixelHeight;
  public AssetDto() {
  }
  public AssetDto links(Map<String, ResourceLink> links) {
    this.links = links;
    return this;
  }

  public AssetDto putLinksItem(String key, ResourceLink linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * The links.
   * @return links
   */
  @javax.annotation.Nonnull
  public Map<String, ResourceLink> getLinks() {
    return links;
  }

  public void setLinks(Map<String, ResourceLink> links) {
    this.links = links;
  }
  public AssetDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the asset.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }
  public AssetDto parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The ID of the parent folder. Empty for files without parent.
   * @return parentId
   */
  @javax.annotation.Nonnull
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }
  public AssetDto fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The file name.
   * @return fileName
   */
  @javax.annotation.Nonnull
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }
  public AssetDto fileHash(String fileHash) {
    this.fileHash = fileHash;
    return this;
  }

  /**
   * The file hash.
   * @return fileHash
   */
  @javax.annotation.Nullable
  public String getFileHash() {
    return fileHash;
  }

  public void setFileHash(String fileHash) {
    this.fileHash = fileHash;
  }
  public AssetDto isProtected(Boolean isProtected) {
    this.isProtected = isProtected;
    return this;
  }

  /**
   * True, when the asset is not public.
   * @return isProtected
   */
  @javax.annotation.Nonnull
  public Boolean getIsProtected() {
    return isProtected;
  }

  public void setIsProtected(Boolean isProtected) {
    this.isProtected = isProtected;
  }
  public AssetDto slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * The slug.
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }
  public AssetDto mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The mime type.
   * @return mimeType
   */
  @javax.annotation.Nonnull
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }
  public AssetDto fileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * The file type.
   * @return fileType
   */
  @javax.annotation.Nonnull
  public String getFileType() {
    return fileType;
  }

  public void setFileType(String fileType) {
    this.fileType = fileType;
  }
  public AssetDto metadataText(String metadataText) {
    this.metadataText = metadataText;
    return this;
  }

  /**
   * The formatted text representation of the metadata.
   * @return metadataText
   */
  @javax.annotation.Nonnull
  public String getMetadataText() {
    return metadataText;
  }

  public void setMetadataText(String metadataText) {
    this.metadataText = metadataText;
  }
  public AssetDto editToken(String editToken) {
    this.editToken = editToken;
    return this;
  }

  /**
   * The UI token.
   * @return editToken
   */
  @javax.annotation.Nullable
  public String getEditToken() {
    return editToken;
  }

  public void setEditToken(String editToken) {
    this.editToken = editToken;
  }
  public AssetDto metadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public AssetDto putMetadataItem(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * The asset metadata.
   * @return metadata
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
  }
  public AssetDto tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public AssetDto addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The asset tags.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }
  public AssetDto fileSize(Long fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * The size of the file in bytes.
   * @return fileSize
   */
  @javax.annotation.Nonnull
  public Long getFileSize() {
    return fileSize;
  }

  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }
  public AssetDto fileVersion(Long fileVersion) {
    this.fileVersion = fileVersion;
    return this;
  }

  /**
   * The version of the file.
   * @return fileVersion
   */
  @javax.annotation.Nonnull
  public Long getFileVersion() {
    return fileVersion;
  }

  public void setFileVersion(Long fileVersion) {
    this.fileVersion = fileVersion;
  }
  public AssetDto type(AssetType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public AssetType getType() {
    return type;
  }

  public void setType(AssetType type) {
    this.type = type;
  }
  public AssetDto createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The user that has created the schema.
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }
  public AssetDto lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * The user that has updated the asset.
   * @return lastModifiedBy
   */
  @javax.annotation.Nonnull
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }
  public AssetDto created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The date and time when the asset has been created.
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }
  public AssetDto lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * The date and time when the asset has been modified last.
   * @return lastModified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }
  public AssetDto version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the asset.
   * @return version
   */
  @javax.annotation.Nonnull
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }
  public AssetDto meta(AssetMeta meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nullable
  public AssetMeta getMeta() {
    return meta;
  }

  public void setMeta(AssetMeta meta) {
    this.meta = meta;
  }
  @Deprecated
  public AssetDto isImage(Boolean isImage) {
    this.isImage = isImage;
    return this;
  }

  /**
   * Determines of the created file is an image.
   * @return isImage
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public Boolean getIsImage() {
    return isImage;
  }

  @Deprecated
  public void setIsImage(Boolean isImage) {
    this.isImage = isImage;
  }
  @Deprecated
  public AssetDto pixelWidth(Integer pixelWidth) {
    this.pixelWidth = pixelWidth;
    return this;
  }

  /**
   * The width of the image in pixels if the asset is an image.
   * @return pixelWidth
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getPixelWidth() {
    return pixelWidth;
  }

  @Deprecated
  public void setPixelWidth(Integer pixelWidth) {
    this.pixelWidth = pixelWidth;
  }
  @Deprecated
  public AssetDto pixelHeight(Integer pixelHeight) {
    this.pixelHeight = pixelHeight;
    return this;
  }

  /**
   * The height of the image in pixels if the asset is an image.
   * @return pixelHeight
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getPixelHeight() {
    return pixelHeight;
  }

  @Deprecated
  public void setPixelHeight(Integer pixelHeight) {
    this.pixelHeight = pixelHeight;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetDto assetDto = (AssetDto) o;
    return Objects.equals(this.links, assetDto.links) &&
        Objects.equals(this.id, assetDto.id) &&
        Objects.equals(this.parentId, assetDto.parentId) &&
        Objects.equals(this.fileName, assetDto.fileName) &&
        Objects.equals(this.fileHash, assetDto.fileHash) &&
        Objects.equals(this.isProtected, assetDto.isProtected) &&
        Objects.equals(this.slug, assetDto.slug) &&
        Objects.equals(this.mimeType, assetDto.mimeType) &&
        Objects.equals(this.fileType, assetDto.fileType) &&
        Objects.equals(this.metadataText, assetDto.metadataText) &&
        Objects.equals(this.editToken, assetDto.editToken) &&
        Objects.equals(this.metadata, assetDto.metadata) &&
        Objects.equals(this.tags, assetDto.tags) &&
        Objects.equals(this.fileSize, assetDto.fileSize) &&
        Objects.equals(this.fileVersion, assetDto.fileVersion) &&
        Objects.equals(this.type, assetDto.type) &&
        Objects.equals(this.createdBy, assetDto.createdBy) &&
        Objects.equals(this.lastModifiedBy, assetDto.lastModifiedBy) &&
        Objects.equals(this.created, assetDto.created) &&
        Objects.equals(this.lastModified, assetDto.lastModified) &&
        Objects.equals(this.version, assetDto.version) &&
        Objects.equals(this.meta, assetDto.meta) &&
        Objects.equals(this.isImage, assetDto.isImage) &&
        Objects.equals(this.pixelWidth, assetDto.pixelWidth) &&
        Objects.equals(this.pixelHeight, assetDto.pixelHeight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, parentId, fileName, fileHash, isProtected, slug, mimeType, fileType, metadataText, editToken, metadata, tags, fileSize, fileVersion, type, createdBy, lastModifiedBy, created, lastModified, version, meta, isImage, pixelWidth, pixelHeight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetDto {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileHash: ").append(toIndentedString(fileHash)).append("\n");
    sb.append("    isProtected: ").append(toIndentedString(isProtected)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    metadataText: ").append(toIndentedString(metadataText)).append("\n");
    sb.append("    editToken: ").append(toIndentedString(editToken)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileVersion: ").append(toIndentedString(fileVersion)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    isImage: ").append(toIndentedString(isImage)).append("\n");
    sb.append("    pixelWidth: ").append(toIndentedString(pixelWidth)).append("\n");
    sb.append("    pixelHeight: ").append(toIndentedString(pixelHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("parentId");
    openapiFields.add("fileName");
    openapiFields.add("fileHash");
    openapiFields.add("isProtected");
    openapiFields.add("slug");
    openapiFields.add("mimeType");
    openapiFields.add("fileType");
    openapiFields.add("metadataText");
    openapiFields.add("editToken");
    openapiFields.add("metadata");
    openapiFields.add("tags");
    openapiFields.add("fileSize");
    openapiFields.add("fileVersion");
    openapiFields.add("type");
    openapiFields.add("createdBy");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("created");
    openapiFields.add("lastModified");
    openapiFields.add("version");
    openapiFields.add("_meta");
    openapiFields.add("isImage");
    openapiFields.add("pixelWidth");
    openapiFields.add("pixelHeight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("parentId");
    openapiRequiredFields.add("fileName");
    openapiRequiredFields.add("isProtected");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("mimeType");
    openapiRequiredFields.add("fileType");
    openapiRequiredFields.add("metadataText");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("fileSize");
    openapiRequiredFields.add("fileVersion");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("lastModifiedBy");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("lastModified");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("isImage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetDto is not found in the empty JSON string", AssetDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      if (!jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("fileHash") != null && !jsonObj.get("fileHash").isJsonNull()) && !jsonObj.get("fileHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileHash").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if (!jsonObj.get("fileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileType").toString()));
      }
      if (!jsonObj.get("metadataText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataText").toString()));
      }
      if ((jsonObj.get("editToken") != null && !jsonObj.get("editToken").isJsonNull()) && !jsonObj.get("editToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the required field `type`
      AssetType.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if (!jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      // validate the optional field `_meta`
      if (jsonObj.get("_meta") != null && !jsonObj.get("_meta").isJsonNull()) {
        AssetMeta.validateJsonElement(jsonObj.get("_meta"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetDto>() {
           @Override
           public void write(JsonWriter out, AssetDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetDto
   * @throws IOException if the JSON string is invalid with respect to AssetDto
   */
  public static AssetDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetDto.class);
  }

  /**
   * Convert an instance of AssetDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
