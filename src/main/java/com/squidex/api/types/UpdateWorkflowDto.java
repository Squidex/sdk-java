/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.WorkflowStepDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * UpdateWorkflowDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class UpdateWorkflowDto {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;
  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private Map<String, WorkflowStepDto> steps = new HashMap<>();
  public static final String SERIALIZED_NAME_SCHEMA_IDS = "schemaIds";
  @SerializedName(SERIALIZED_NAME_SCHEMA_IDS)
  private List<String> schemaIds;
  public static final String SERIALIZED_NAME_INITIAL = "initial";
  @SerializedName(SERIALIZED_NAME_INITIAL)
  private String initial;
  public UpdateWorkflowDto() {
  }
  public UpdateWorkflowDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the workflow.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
  public UpdateWorkflowDto steps(Map<String, WorkflowStepDto> steps) {
    this.steps = steps;
    return this;
  }

  public UpdateWorkflowDto putStepsItem(String key, WorkflowStepDto stepsItem) {
    if (this.steps == null) {
      this.steps = new HashMap<>();
    }
    this.steps.put(key, stepsItem);
    return this;
  }

  /**
   * The workflow steps.
   * @return steps
   */
  @javax.annotation.Nonnull
  public Map<String, WorkflowStepDto> getSteps() {
    return steps;
  }

  public void setSteps(Map<String, WorkflowStepDto> steps) {
    this.steps = steps;
  }
  public UpdateWorkflowDto schemaIds(List<String> schemaIds) {
    this.schemaIds = schemaIds;
    return this;
  }

  public UpdateWorkflowDto addSchemaIdsItem(String schemaIdsItem) {
    if (this.schemaIds == null) {
      this.schemaIds = new ArrayList<>();
    }
    this.schemaIds.add(schemaIdsItem);
    return this;
  }

  /**
   * The schema ids.
   * @return schemaIds
   */
  @javax.annotation.Nullable
  public List<String> getSchemaIds() {
    return schemaIds;
  }

  public void setSchemaIds(List<String> schemaIds) {
    this.schemaIds = schemaIds;
  }
  public UpdateWorkflowDto initial(String initial) {
    this.initial = initial;
    return this;
  }

  /**
   * The initial step.
   * @return initial
   */
  @javax.annotation.Nonnull
  public String getInitial() {
    return initial;
  }

  public void setInitial(String initial) {
    this.initial = initial;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateWorkflowDto updateWorkflowDto = (UpdateWorkflowDto) o;
    return Objects.equals(this.name, updateWorkflowDto.name) &&
        Objects.equals(this.steps, updateWorkflowDto.steps) &&
        Objects.equals(this.schemaIds, updateWorkflowDto.schemaIds) &&
        Objects.equals(this.initial, updateWorkflowDto.initial);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, steps, schemaIds, initial);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateWorkflowDto {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    schemaIds: ").append(toIndentedString(schemaIds)).append("\n");
    sb.append("    initial: ").append(toIndentedString(initial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("steps");
    openapiFields.add("schemaIds");
    openapiFields.add("initial");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("steps");
    openapiRequiredFields.add("initial");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateWorkflowDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateWorkflowDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateWorkflowDto is not found in the empty JSON string", UpdateWorkflowDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateWorkflowDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateWorkflowDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateWorkflowDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemaIds") != null && !jsonObj.get("schemaIds").isJsonNull() && !jsonObj.get("schemaIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaIds` to be an array in the JSON string but got `%s`", jsonObj.get("schemaIds").toString()));
      }
      if (!jsonObj.get("initial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initial").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateWorkflowDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateWorkflowDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateWorkflowDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateWorkflowDto.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateWorkflowDto>() {
           @Override
           public void write(JsonWriter out, UpdateWorkflowDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateWorkflowDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateWorkflowDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateWorkflowDto
   * @throws IOException if the JSON string is invalid with respect to UpdateWorkflowDto
   */
  public static UpdateWorkflowDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateWorkflowDto.class);
  }

  /**
   * Convert an instance of UpdateWorkflowDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
