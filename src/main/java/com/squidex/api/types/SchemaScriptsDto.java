/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * SchemaScriptsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class SchemaScriptsDto {
  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;
  public static final String SERIALIZED_NAME_QUERY_PRE = "queryPre";
  @SerializedName(SERIALIZED_NAME_QUERY_PRE)
  private String queryPre;
  public static final String SERIALIZED_NAME_CREATE = "create";
  @SerializedName(SERIALIZED_NAME_CREATE)
  private String create;
  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private String update;
  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private String delete;
  public static final String SERIALIZED_NAME_CHANGE = "change";
  @SerializedName(SERIALIZED_NAME_CHANGE)
  private String change;
  public SchemaScriptsDto() {
  }
  public SchemaScriptsDto query(String query) {
    this.query = query;
    return this;
  }

  /**
   * The script that is executed for each content when querying contents.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }
  public SchemaScriptsDto queryPre(String queryPre) {
    this.queryPre = queryPre;
    return this;
  }

  /**
   * The script that is executed for all contents when querying contents.
   * @return queryPre
   */
  @javax.annotation.Nullable
  public String getQueryPre() {
    return queryPre;
  }

  public void setQueryPre(String queryPre) {
    this.queryPre = queryPre;
  }
  public SchemaScriptsDto create(String create) {
    this.create = create;
    return this;
  }

  /**
   * The script that is executed when creating a content.
   * @return create
   */
  @javax.annotation.Nullable
  public String getCreate() {
    return create;
  }

  public void setCreate(String create) {
    this.create = create;
  }
  public SchemaScriptsDto update(String update) {
    this.update = update;
    return this;
  }

  /**
   * The script that is executed when updating a content.
   * @return update
   */
  @javax.annotation.Nullable
  public String getUpdate() {
    return update;
  }

  public void setUpdate(String update) {
    this.update = update;
  }
  public SchemaScriptsDto delete(String delete) {
    this.delete = delete;
    return this;
  }

  /**
   * The script that is executed when deleting a content.
   * @return delete
   */
  @javax.annotation.Nullable
  public String getDelete() {
    return delete;
  }

  public void setDelete(String delete) {
    this.delete = delete;
  }
  public SchemaScriptsDto change(String change) {
    this.change = change;
    return this;
  }

  /**
   * The script that is executed when change a content status.
   * @return change
   */
  @javax.annotation.Nullable
  public String getChange() {
    return change;
  }

  public void setChange(String change) {
    this.change = change;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaScriptsDto schemaScriptsDto = (SchemaScriptsDto) o;
    return Objects.equals(this.query, schemaScriptsDto.query) &&
        Objects.equals(this.queryPre, schemaScriptsDto.queryPre) &&
        Objects.equals(this.create, schemaScriptsDto.create) &&
        Objects.equals(this.update, schemaScriptsDto.update) &&
        Objects.equals(this.delete, schemaScriptsDto.delete) &&
        Objects.equals(this.change, schemaScriptsDto.change);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, queryPre, create, update, delete, change);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaScriptsDto {\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryPre: ").append(toIndentedString(queryPre)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    change: ").append(toIndentedString(change)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("query");
    openapiFields.add("queryPre");
    openapiFields.add("create");
    openapiFields.add("update");
    openapiFields.add("delete");
    openapiFields.add("change");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaScriptsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaScriptsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaScriptsDto is not found in the empty JSON string", SchemaScriptsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaScriptsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaScriptsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("queryPre") != null && !jsonObj.get("queryPre").isJsonNull()) && !jsonObj.get("queryPre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryPre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryPre").toString()));
      }
      if ((jsonObj.get("create") != null && !jsonObj.get("create").isJsonNull()) && !jsonObj.get("create").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `create` to be a primitive type in the JSON string but got `%s`", jsonObj.get("create").toString()));
      }
      if ((jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) && !jsonObj.get("update").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `update` to be a primitive type in the JSON string but got `%s`", jsonObj.get("update").toString()));
      }
      if ((jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) && !jsonObj.get("delete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete").toString()));
      }
      if ((jsonObj.get("change") != null && !jsonObj.get("change").isJsonNull()) && !jsonObj.get("change").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaScriptsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaScriptsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaScriptsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaScriptsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaScriptsDto>() {
           @Override
           public void write(JsonWriter out, SchemaScriptsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaScriptsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaScriptsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaScriptsDto
   * @throws IOException if the JSON string is invalid with respect to SchemaScriptsDto
   */
  public static SchemaScriptsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaScriptsDto.class);
  }

  /**
   * Convert an instance of SchemaScriptsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
