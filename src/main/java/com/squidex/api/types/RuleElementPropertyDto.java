/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.squidex.api.types.RuleFieldEditor;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * RuleElementPropertyDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class RuleElementPropertyDto {
  public static final String SERIALIZED_NAME_EDITOR = "editor";
  @SerializedName(SERIALIZED_NAME_EDITOR)
  private RuleFieldEditor editor;
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;
  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;
  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<String> options;
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;
  public static final String SERIALIZED_NAME_IS_FORMATTABLE = "isFormattable";
  @SerializedName(SERIALIZED_NAME_IS_FORMATTABLE)
  private Boolean isFormattable;
  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;
  public RuleElementPropertyDto() {
  }
  public RuleElementPropertyDto editor(RuleFieldEditor editor) {
    this.editor = editor;
    return this;
  }

  /**
   * Get editor
   * @return editor
   */
  @javax.annotation.Nonnull
  public RuleFieldEditor getEditor() {
    return editor;
  }

  public void setEditor(RuleFieldEditor editor) {
    this.editor = editor;
  }
  public RuleElementPropertyDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the editor.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
  public RuleElementPropertyDto display(String display) {
    this.display = display;
    return this;
  }

  /**
   * The label to use.
   * @return display
   */
  @javax.annotation.Nonnull
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }
  public RuleElementPropertyDto options(List<String> options) {
    this.options = options;
    return this;
  }

  public RuleElementPropertyDto addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * The options, if the editor is a dropdown.
   * @return options
   */
  @javax.annotation.Nullable
  public List<String> getOptions() {
    return options;
  }

  public void setOptions(List<String> options) {
    this.options = options;
  }
  public RuleElementPropertyDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The optional description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }
  public RuleElementPropertyDto isFormattable(Boolean isFormattable) {
    this.isFormattable = isFormattable;
    return this;
  }

  /**
   * Indicates if the property is formattable.
   * @return isFormattable
   */
  @javax.annotation.Nonnull
  public Boolean getIsFormattable() {
    return isFormattable;
  }

  public void setIsFormattable(Boolean isFormattable) {
    this.isFormattable = isFormattable;
  }
  public RuleElementPropertyDto isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Indicates if the property is required.
   * @return isRequired
   */
  @javax.annotation.Nonnull
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleElementPropertyDto ruleElementPropertyDto = (RuleElementPropertyDto) o;
    return Objects.equals(this.editor, ruleElementPropertyDto.editor) &&
        Objects.equals(this.name, ruleElementPropertyDto.name) &&
        Objects.equals(this.display, ruleElementPropertyDto.display) &&
        Objects.equals(this.options, ruleElementPropertyDto.options) &&
        Objects.equals(this.description, ruleElementPropertyDto.description) &&
        Objects.equals(this.isFormattable, ruleElementPropertyDto.isFormattable) &&
        Objects.equals(this.isRequired, ruleElementPropertyDto.isRequired);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(editor, name, display, options, description, isFormattable, isRequired);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleElementPropertyDto {\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isFormattable: ").append(toIndentedString(isFormattable)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("editor");
    openapiFields.add("name");
    openapiFields.add("display");
    openapiFields.add("options");
    openapiFields.add("description");
    openapiFields.add("isFormattable");
    openapiFields.add("isRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("editor");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("display");
    openapiRequiredFields.add("isFormattable");
    openapiRequiredFields.add("isRequired");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleElementPropertyDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleElementPropertyDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleElementPropertyDto is not found in the empty JSON string", RuleElementPropertyDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleElementPropertyDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleElementPropertyDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleElementPropertyDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `editor`
      RuleFieldEditor.validateJsonElement(jsonObj.get("editor"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull() && !jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleElementPropertyDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleElementPropertyDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleElementPropertyDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleElementPropertyDto.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleElementPropertyDto>() {
           @Override
           public void write(JsonWriter out, RuleElementPropertyDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleElementPropertyDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleElementPropertyDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleElementPropertyDto
   * @throws IOException if the JSON string is invalid with respect to RuleElementPropertyDto
   */
  public static RuleElementPropertyDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleElementPropertyDto.class);
  }

  /**
   * Convert an instance of RuleElementPropertyDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
