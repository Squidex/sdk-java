/*
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.squidex.api.types;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.squidex.api.core.JSON;

/**
 * UpdateSchemaDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0-SNAPSHOT")
public class UpdateSchemaDto {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;
  public static final String SERIALIZED_NAME_HINTS = "hints";
  @SerializedName(SERIALIZED_NAME_HINTS)
  private String hints;
  public static final String SERIALIZED_NAME_CONTENTS_SIDEBAR_URL = "contentsSidebarUrl";
  @SerializedName(SERIALIZED_NAME_CONTENTS_SIDEBAR_URL)
  private String contentsSidebarUrl;
  public static final String SERIALIZED_NAME_CONTENT_SIDEBAR_URL = "contentSidebarUrl";
  @SerializedName(SERIALIZED_NAME_CONTENT_SIDEBAR_URL)
  private String contentSidebarUrl;
  public static final String SERIALIZED_NAME_CONTENTS_LIST_URL = "contentsListUrl";
  @SerializedName(SERIALIZED_NAME_CONTENTS_LIST_URL)
  private String contentsListUrl;
  public static final String SERIALIZED_NAME_VALIDATE_ON_PUBLISH = "validateOnPublish";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ON_PUBLISH)
  private Boolean validateOnPublish;
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;
  public UpdateSchemaDto() {
  }
  public UpdateSchemaDto label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Optional label for the editor.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }
  public UpdateSchemaDto hints(String hints) {
    this.hints = hints;
    return this;
  }

  /**
   * Hints to describe the schema.
   * @return hints
   */
  @javax.annotation.Nullable
  public String getHints() {
    return hints;
  }

  public void setHints(String hints) {
    this.hints = hints;
  }
  public UpdateSchemaDto contentsSidebarUrl(String contentsSidebarUrl) {
    this.contentsSidebarUrl = contentsSidebarUrl;
    return this;
  }

  /**
   * The url to a the sidebar plugin for content lists.
   * @return contentsSidebarUrl
   */
  @javax.annotation.Nullable
  public String getContentsSidebarUrl() {
    return contentsSidebarUrl;
  }

  public void setContentsSidebarUrl(String contentsSidebarUrl) {
    this.contentsSidebarUrl = contentsSidebarUrl;
  }
  public UpdateSchemaDto contentSidebarUrl(String contentSidebarUrl) {
    this.contentSidebarUrl = contentSidebarUrl;
    return this;
  }

  /**
   * The url to a the sidebar plugin for content items.
   * @return contentSidebarUrl
   */
  @javax.annotation.Nullable
  public String getContentSidebarUrl() {
    return contentSidebarUrl;
  }

  public void setContentSidebarUrl(String contentSidebarUrl) {
    this.contentSidebarUrl = contentSidebarUrl;
  }
  public UpdateSchemaDto contentsListUrl(String contentsListUrl) {
    this.contentsListUrl = contentsListUrl;
    return this;
  }

  /**
   * The url to the content list plugin.
   * @return contentsListUrl
   */
  @javax.annotation.Nullable
  public String getContentsListUrl() {
    return contentsListUrl;
  }

  public void setContentsListUrl(String contentsListUrl) {
    this.contentsListUrl = contentsListUrl;
  }
  public UpdateSchemaDto validateOnPublish(Boolean validateOnPublish) {
    this.validateOnPublish = validateOnPublish;
    return this;
  }

  /**
   * True to validate the content items on publish.
   * @return validateOnPublish
   */
  @javax.annotation.Nullable
  public Boolean getValidateOnPublish() {
    return validateOnPublish;
  }

  public void setValidateOnPublish(Boolean validateOnPublish) {
    this.validateOnPublish = validateOnPublish;
  }
  public UpdateSchemaDto tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateSchemaDto addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags for automation processes.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSchemaDto updateSchemaDto = (UpdateSchemaDto) o;
    return Objects.equals(this.label, updateSchemaDto.label) &&
        Objects.equals(this.hints, updateSchemaDto.hints) &&
        Objects.equals(this.contentsSidebarUrl, updateSchemaDto.contentsSidebarUrl) &&
        Objects.equals(this.contentSidebarUrl, updateSchemaDto.contentSidebarUrl) &&
        Objects.equals(this.contentsListUrl, updateSchemaDto.contentsListUrl) &&
        Objects.equals(this.validateOnPublish, updateSchemaDto.validateOnPublish) &&
        Objects.equals(this.tags, updateSchemaDto.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, hints, contentsSidebarUrl, contentSidebarUrl, contentsListUrl, validateOnPublish, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSchemaDto {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    hints: ").append(toIndentedString(hints)).append("\n");
    sb.append("    contentsSidebarUrl: ").append(toIndentedString(contentsSidebarUrl)).append("\n");
    sb.append("    contentSidebarUrl: ").append(toIndentedString(contentSidebarUrl)).append("\n");
    sb.append("    contentsListUrl: ").append(toIndentedString(contentsListUrl)).append("\n");
    sb.append("    validateOnPublish: ").append(toIndentedString(validateOnPublish)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("hints");
    openapiFields.add("contentsSidebarUrl");
    openapiFields.add("contentSidebarUrl");
    openapiFields.add("contentsListUrl");
    openapiFields.add("validateOnPublish");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSchemaDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSchemaDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSchemaDto is not found in the empty JSON string", UpdateSchemaDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSchemaDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSchemaDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("hints") != null && !jsonObj.get("hints").isJsonNull()) && !jsonObj.get("hints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hints").toString()));
      }
      if ((jsonObj.get("contentsSidebarUrl") != null && !jsonObj.get("contentsSidebarUrl").isJsonNull()) && !jsonObj.get("contentsSidebarUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentsSidebarUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentsSidebarUrl").toString()));
      }
      if ((jsonObj.get("contentSidebarUrl") != null && !jsonObj.get("contentSidebarUrl").isJsonNull()) && !jsonObj.get("contentSidebarUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentSidebarUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentSidebarUrl").toString()));
      }
      if ((jsonObj.get("contentsListUrl") != null && !jsonObj.get("contentsListUrl").isJsonNull()) && !jsonObj.get("contentsListUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentsListUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentsListUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSchemaDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSchemaDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSchemaDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSchemaDto.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSchemaDto>() {
           @Override
           public void write(JsonWriter out, UpdateSchemaDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSchemaDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSchemaDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSchemaDto
   * @throws IOException if the JSON string is invalid with respect to UpdateSchemaDto
   */
  public static UpdateSchemaDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSchemaDto.class);
  }

  /**
   * Convert an instance of UpdateSchemaDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
