/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squidex.api.resources.users.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squidex.api.core.ObjectMappers;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UpdateProfileDto.Builder.class)
public final class UpdateProfileDto {
    private final Optional<Map<String, Optional<String>>> answers;

    private UpdateProfileDto(Optional<Map<String, Optional<String>>> answers) {
        this.answers = answers;
    }

    /**
     * @return The answers from a questionaire.
     */
    @JsonProperty("answers")
    public Optional<Map<String, Optional<String>>> getAnswers() {
        return answers;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateProfileDto && equalTo((UpdateProfileDto) other);
    }

    private boolean equalTo(UpdateProfileDto other) {
        return answers.equals(other.answers);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.answers);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<String>>> answers = Optional.empty();

        private Builder() {}

        public Builder from(UpdateProfileDto other) {
            answers(other.getAnswers());
            return this;
        }

        @JsonSetter(value = "answers", nulls = Nulls.SKIP)
        public Builder answers(Optional<Map<String, Optional<String>>> answers) {
            this.answers = answers;
            return this;
        }

        public Builder answers(Map<String, Optional<String>> answers) {
            this.answers = Optional.of(answers);
            return this;
        }

        public UpdateProfileDto build() {
            return new UpdateProfileDto(answers);
        }
    }
}
