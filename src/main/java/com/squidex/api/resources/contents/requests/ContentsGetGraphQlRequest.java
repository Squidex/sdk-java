/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squidex.api.resources.contents.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squidex.api.core.ObjectMappers;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ContentsGetGraphQlRequest.Builder.class)
public final class ContentsGetGraphQlRequest {
    private final Optional<Boolean> unpublished;

    private final Optional<String> query;

    private final Optional<String> operationName;

    private final Optional<String> variables;

    private ContentsGetGraphQlRequest(
            Optional<Boolean> unpublished,
            Optional<String> query,
            Optional<String> operationName,
            Optional<String> variables) {
        this.unpublished = unpublished;
        this.query = query;
        this.operationName = operationName;
        this.variables = variables;
    }

    /**
     * @return Return unpublished content items.
     */
    @JsonProperty("X-Unpublished")
    public Optional<Boolean> getUnpublished() {
        return unpublished;
    }

    /**
     * @return The query string.
     */
    @JsonProperty("query")
    public Optional<String> getQuery() {
        return query;
    }

    /**
     * @return The optional operation name.
     */
    @JsonProperty("operationName")
    public Optional<String> getOperationName() {
        return operationName;
    }

    /**
     * @return The optional variables.
     */
    @JsonProperty("variables")
    public Optional<String> getVariables() {
        return variables;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ContentsGetGraphQlRequest && equalTo((ContentsGetGraphQlRequest) other);
    }

    private boolean equalTo(ContentsGetGraphQlRequest other) {
        return unpublished.equals(other.unpublished)
                && query.equals(other.query)
                && operationName.equals(other.operationName)
                && variables.equals(other.variables);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.unpublished, this.query, this.operationName, this.variables);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> unpublished = Optional.empty();

        private Optional<String> query = Optional.empty();

        private Optional<String> operationName = Optional.empty();

        private Optional<String> variables = Optional.empty();

        private Builder() {}

        public Builder from(ContentsGetGraphQlRequest other) {
            unpublished(other.getUnpublished());
            query(other.getQuery());
            operationName(other.getOperationName());
            variables(other.getVariables());
            return this;
        }

        @JsonSetter(value = "X-Unpublished", nulls = Nulls.SKIP)
        public Builder unpublished(Optional<Boolean> unpublished) {
            this.unpublished = unpublished;
            return this;
        }

        public Builder unpublished(Boolean unpublished) {
            this.unpublished = Optional.of(unpublished);
            return this;
        }

        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public Builder query(Optional<String> query) {
            this.query = query;
            return this;
        }

        public Builder query(String query) {
            this.query = Optional.of(query);
            return this;
        }

        @JsonSetter(value = "operationName", nulls = Nulls.SKIP)
        public Builder operationName(Optional<String> operationName) {
            this.operationName = operationName;
            return this;
        }

        public Builder operationName(String operationName) {
            this.operationName = Optional.of(operationName);
            return this;
        }

        @JsonSetter(value = "variables", nulls = Nulls.SKIP)
        public Builder variables(Optional<String> variables) {
            this.variables = variables;
            return this;
        }

        public Builder variables(String variables) {
            this.variables = Optional.of(variables);
            return this;
        }

        public ContentsGetGraphQlRequest build() {
            return new ContentsGetGraphQlRequest(unpublished, query, operationName, variables);
        }
    }
}
