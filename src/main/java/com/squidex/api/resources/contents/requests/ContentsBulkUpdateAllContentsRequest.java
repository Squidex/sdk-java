/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squidex.api.resources.contents.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squidex.api.core.ObjectMappers;
import com.squidex.api.types.BulkUpdateContentsDto;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ContentsBulkUpdateAllContentsRequest.Builder.class)
public final class ContentsBulkUpdateAllContentsRequest {
    private final Optional<String> schema;

    private final BulkUpdateContentsDto body;

    private ContentsBulkUpdateAllContentsRequest(Optional<String> schema, BulkUpdateContentsDto body) {
        this.schema = schema;
        this.body = body;
    }

    /**
     * @return The name of the schema.
     */
    @JsonProperty("schema")
    public Optional<String> getSchema() {
        return schema;
    }

    @JsonProperty("body")
    public BulkUpdateContentsDto getBody() {
        return body;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ContentsBulkUpdateAllContentsRequest
                && equalTo((ContentsBulkUpdateAllContentsRequest) other);
    }

    private boolean equalTo(ContentsBulkUpdateAllContentsRequest other) {
        return schema.equals(other.schema) && body.equals(other.body);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.schema, this.body);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BodyStage builder() {
        return new Builder();
    }

    public interface BodyStage {
        _FinalStage body(BulkUpdateContentsDto body);

        Builder from(ContentsBulkUpdateAllContentsRequest other);
    }

    public interface _FinalStage {
        ContentsBulkUpdateAllContentsRequest build();

        _FinalStage schema(Optional<String> schema);

        _FinalStage schema(String schema);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BodyStage, _FinalStage {
        private BulkUpdateContentsDto body;

        private Optional<String> schema = Optional.empty();

        private Builder() {}

        @Override
        public Builder from(ContentsBulkUpdateAllContentsRequest other) {
            schema(other.getSchema());
            body(other.getBody());
            return this;
        }

        @Override
        @JsonSetter("body")
        public _FinalStage body(BulkUpdateContentsDto body) {
            this.body = body;
            return this;
        }

        /**
         * <p>The name of the schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage schema(String schema) {
            this.schema = Optional.of(schema);
            return this;
        }

        @Override
        @JsonSetter(value = "schema", nulls = Nulls.SKIP)
        public _FinalStage schema(Optional<String> schema) {
            this.schema = schema;
            return this;
        }

        @Override
        public ContentsBulkUpdateAllContentsRequest build() {
            return new ContentsBulkUpdateAllContentsRequest(schema, body);
        }
    }
}
